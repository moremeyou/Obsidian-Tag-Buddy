/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TagBuddy
});
module.exports = __toCommonJS(main_exports);

// settings.ts
var import_obsidian = require("obsidian");
var TBSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Tag Buddy" });
    new import_obsidian.Setting(containerEl).setName("Override native tag search on click").setDesc("Toggle OFF to use CTRL/CMD+CLICK to remove tag.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.removeOnClick).onChange(async (value) => {
        this.plugin.settings.removeOnClick = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Convert to tag text (removes #)").setDesc("Toggle OFF to use OPT/ALT+CLICK to perform native tag search.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.optToConvert).onChange(async (value) => {
        this.plugin.settings.optToConvert = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Remove nested tags first").setDesc("Toggle OFF to use SHIFT+CLICK to remove nested tags first.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.removeChildTagsFirst).onChange(async (value) => {
        this.plugin.settings.removeChildTagsFirst = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Mobile tag search").setDesc("Toggle ON to restore mobile native tag search on tap. Tag removal will then use LONG PRESS.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.mobileTagSearch).onChange(async (value) => {
        this.plugin.settings.mobileTagSearch = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show mobile notices").setDesc("Toggle OFF to hide notices when editing or removing a tag.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.mobileNotices).onChange(async (value) => {
        this.plugin.settings.mobileNotices = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("BETA: Show tag summary paragraph buttons").setDesc("Show buttons below each tagged paragraph that let you copy, remove, and move the paragraph.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.tagSummaryBlockButtons).onChange(async (value) => {
        this.plugin.settings.tagSummaryBlockButtons = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("BETA: Show tag summary buttons").setDesc("Show buttons below each summary that let you copy or make a note from the summary.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showSummaryButtons).onChange(async (value) => {
        this.plugin.settings.showSummaryButtons = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Copy to section prefix").setDesc("When moving a tagged paragraph from tag summaries below note header sections use this prefix:\nExample: '- ', '> ', '- [ ]'").addText((text) => {
      text.setPlaceholder(this.plugin.settings.taggedParagraphCopyPrefix).setValue(this.plugin.settings.taggedParagraphCopyPrefix).onChange(async (value) => {
        this.plugin.settings.taggedParagraphCopyPrefix = value;
        await this.plugin.saveSettings();
      });
    });
    function isValidTag(tag) {
      const tagPattern = /^#[\w]+$/;
      return tagPattern.test(tag);
    }
    function filterAndJoinTags(tagsString) {
      const tagsArray = tagsString.split(", ");
      const validTags = tagsArray.filter(isValidTag);
      return validTags.join(", ");
    }
    new import_obsidian.Setting(containerEl).setName("Recent tags").setDesc("The most recent tags added via Tag Buddy are stored here. These will show up first in the list when adding.").addText((text) => {
      text.setPlaceholder(this.plugin.settings.recentlyAddedTags).setValue(this.plugin.settings.recentlyAddedTags).onChange(async (value) => {
        this.plugin.settings.recentlyAddedTags = filterAndJoinTags(value);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Lock recent tags").setDesc("Toggle ON to lock the recent tags list. Recent tags will not be updated. Instead, the tags above will act like a favorites list.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.lockRecentTags).onChange(async (value) => {
        this.plugin.settings.lockRecentTags = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("hr");
    containerEl.createEl("h1", { text: "Support a buddy" });
    const donateButton = containerEl.createEl("a");
    donateButton.setAttribute("href", "https://www.buymeacoffee.com/moremeyou");
    donateButton.innerHTML = `<img src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" style="height: 40px !important;width: 150px !important;" ></a>`;
    containerEl.createEl("br");
    containerEl.createEl("br");
    containerEl.createEl("br");
    new import_obsidian.Setting(containerEl).setName("Debug mode").setDesc("Output to console.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.debugMode).onChange(async (value) => {
        this.plugin.settings.debugMode = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// main.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  removeOnClick: true,
  // when true, cmd is needed when clicking to remove the tag
  removeChildTagsFirst: true,
  // use shift when false
  optToConvert: true,
  // when false, clicking tag will do nothing
  mobileTagSearch: false,
  // toggle on use double tap for search. press+hold will then remove.
  mobileNotices: true,
  tagSummaryBlockButtons: false,
  taggedParagraphCopyPrefix: "",
  recentlyAddedTags: "",
  lockRecentTags: false,
  showSummaryButtons: false,
  debugMode: false
};
var TagBuddy = class extends import_obsidian2.Plugin {
  onunload() {
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new TBSettingsTab(this.app, this));
    console.log("Tag Buddy Plugin loaded on " + (this.app.isMobile ? "mobile at " : "desktop at ") + new Date().toUTCString().substring(17));
    this.injectStyles();
    const debouncedProcessTags = this.debounce(this.processTags.bind(this), 500);
    this.app.workspace.onLayoutReady(async () => {
      setTimeout(async () => {
        this.processTags();
      }, 500);
      this.registerEvent(this.app.workspace.on("active-leaf-change", async () => {
      }));
      this.registerDomEvent(document, "contextmenu", async (event) => {
        const view = await this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (view && this.ctrlCmdKey(event) && view.getMode() == "preview") {
          event.preventDefault();
          const file = await this.app.workspace.getActiveFile();
          this.showTagSelector(event.pageX, event.pageY, file);
        }
      });
      this.registerEvent(this.app.on("layout-change", (event) => {
        debouncedProcessTags();
      }));
      this.registerEvent(this.app.on("file-open", async (event) => {
        debouncedProcessTags();
      }));
      if (!this.app.isMobile) {
        this.registerDomEvent(document, "click", this.onClickEvent.bind(this), true);
      } else {
        this.registerDomEvent(document, "click", (e) => {
          const isTag = e.target.classList.contains("tag");
          if (isTag && !this.settings.mobileTagSearch) {
            e.stopPropagation();
          }
        }, true);
        new PressAndHoldHandler(this, document, this.onClickEvent.bind(this));
        new DoubleTapHandler(this, document, this.onClickEvent.bind(this));
      }
    });
    this.registerMarkdownCodeBlockProcessor("tag-summary", this.summaryCodeBlockProcessor.bind(this));
  }
  async onClickEvent(event) {
    const target = event.target;
    const view = await this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (!view && target.matches(".tag")) {
      new import_obsidian2.Notice("Tag Buddy: Can't edit tag. Unsupported view type. Try again within that note.");
      return;
    }
    if (view) {
      if (view.getMode() != "preview")
        return;
    } else {
    }
    if (!this.app.isMobile) {
      if (this.settings.removeOnClick && this.ctrlCmdKey(event) || !this.settings.removeOnClick && !this.ctrlCmdKey(event)) {
        return;
      } else if (event.altKey && !this.settings.optToConvert) {
        return;
      }
    } else {
      if (this.settings.mobileTagSearch && event.type == "touchend") {
        return;
      }
    }
    if (target && target.matches(".tag")) {
      if (this.settings.removeOnClick || !this.settings.removeOnClick && this.ctrlCmdKey(event)) {
        event.stopPropagation();
        event.preventDefault();
      }
      const clickedTag = target.closest(".tag");
      const tag = clickedTag.innerText;
      let tagIndex = clickedTag.getAttribute("md-index");
      let tagFile = clickedTag.getAttribute("file-source");
      if (tagFile) {
        this.editTag(target, event);
      } else {
        setTimeout(async () => {
          tagIndex = clickedTag.getAttribute("md-index");
          tagFile = clickedTag.getAttribute("file-source");
          this.editTag(target, event);
        }, 300);
      }
    } else if (!view && target.matches(".tag")) {
      new import_obsidian2.Notice("Tag Buddy: Can't edit tag. Might be in an unsupported view type.");
    }
  }
  async editTag(tagEl, event, pragraphEl) {
    const index = tagEl.getAttribute("md-index");
    const filePath = tagEl.getAttribute("file-source");
    if (this.settings.debugMode)
      console.log("Tag Buddy edit tag: " + tagEl.innerText + "\nIn file: " + filePath);
    if (filePath) {
      const file = await this.validateFilePath(filePath);
      let fileContent;
      let fileContentBackup;
      const tag = tagEl.innerText.trim();
      try {
        fileContent = await this.app.vault.read(file);
        fileContentBackup = fileContent;
      } catch (error) {
        new import_obsidian2.Notice("Tag Buddy file read error:\n" + error.message);
        return;
      }
      let safeToEmptyFile = false;
      const tagRegex = /^\s*#(\w+)\s*$/;
      if (tagRegex.test(fileContent.trim())) {
        safeToEmptyFile = true;
      }
      let beforeTag = fileContent.substring(0, index);
      let afterTag = fileContent.substring(Number(index) + Number(tag.length));
      let afterTagChr;
      let beforeTagChr;
      if (afterTag.startsWith(" ")) {
        afterTagChr = " ";
      } else if (afterTag.startsWith("\n")) {
        afterTagChr = "\n";
      }
      if (fileContent[index] === "\n") {
        beforeTag += "\n";
      }
      let newContent = "";
      if (!event) {
        newContent = beforeTag + afterTagChr + afterTag;
      } else if (event.altKey || event.type == "touchstart" && !this.settings.mobileTagSearch) {
        const noHash = tag.substring(1);
        newContent = beforeTag + noHash + afterTagChr + afterTag;
        if (this.app.isMobile && this.settings.mobileNotices) {
          new import_obsidian2.Notice("Tag Buddy: " + tag + " converted to text.");
        }
      } else if (event.type == "touchend" || this.settings.mobileTagSearch || this.ctrlCmdKey(event) && !this.settings.removeOnClick || !this.ctrlCmdKey(event) && this.settings.removeOnClick) {
        let parentTag = "";
        if (tag.includes("/") && (this.settings.removeChildTagsFirst || event.shiftKey && !this.settings.removeChildTagsFirst)) {
          let parts = tag.split("/");
          const removedChild = parts.pop();
          parentTag = parts.join("/");
          newContent = beforeTag + (!beforeTag.endsWith(" ") ? " " : "") + parentTag + afterTagChr + afterTag;
          if (this.app.isMobile && this.settings.mobileNotices) {
            new import_obsidian2.Notice("Tag Buddy: '" + removedChild + "' removed from parent tag.");
          }
        } else {
          newContent = beforeTag + afterTag;
          if (this.app.isMobile && this.settings.mobileNotices) {
            new import_obsidian2.Notice("Tag Buddy: " + tag + " removed.");
          }
        }
      }
      try {
        if (tagEl.getAttribute("type") == "plugin-summary") {
          const summaryEl = tagEl.closest(".tag-summary-paragraph");
          const mdSource = summaryEl.getAttribute("md-source").trim();
          const escapedText = this.escapeRegExp(mdSource);
          const regex = new RegExp(escapedText, "g");
          const matches = fileContent.match(regex);
          if (matches && matches.length > 1) {
            new import_obsidian2.Notice("\u26A0\uFE0F Can't safely remove/edit tag:\nSurrounding text repeated in source note.");
            return;
          } else if (matches && matches.length === 0 || !matches) {
            new import_obsidian2.Notice("\u26A0\uFE0F Can't find tag in source note.\n");
            return;
          }
          if (newContent == "" && !safeToEmptyFile || this.contentChangedTooMuch(fileContentBackup, newContent, tag, 2)) {
            new import_obsidian2.Notice("Tag Buddy: File change error.");
            newContent = fileContentBackup;
          } else if (newContent == "" && safeToEmptyFile) {
            new import_obsidian2.Notice("Tag Buddy: Tag removed. The note is empty.");
          }
          setTimeout(async () => {
            const tagParagraphEl = tagEl.closest(".tag-summary-paragraph");
            const tagSummaryBlock = tagEl.closest(".tag-summary-block");
            const tagsToCheck = this.getTagsToCheckFromEl(tagSummaryBlock);
            const tagsInContent = this.tagsInString(tagParagraphEl.innerText);
            if (tagsToCheck.includes(tag)) {
              const tagCount = this.countOccurrences(tagsToCheck, tagsInContent);
              if (tagCount >= 2) {
                this.updateSummary(tagSummaryBlock);
                setTimeout(async () => {
                  this.processTags();
                }, 200);
              } else {
                const notice = new import_obsidian2.Notice(tag + " removed from paragraph.\n\u{1F517} Open source note.", 5e3);
                this.removeElementWithAnimation(tagParagraphEl, () => {
                  setTimeout(async () => {
                    this.updateSummary(tagSummaryBlock);
                    tagParagraphEl.remove();
                  }, 500);
                  setTimeout(async () => {
                    this.processTags();
                  }, 800);
                });
                this.registerDomEvent(notice.noticeEl, "click", (e) => {
                  this.app.workspace.openLinkText(filePath, "");
                });
              }
            } else {
              this.updateSummary(tagSummaryBlock);
              setTimeout(async () => {
                this.processTags();
              }, 200);
            }
          }, 200);
        } else {
          setTimeout(async () => {
            this.processTags();
          }, 50);
        }
        await this.app.vault.modify(file, newContent);
      } catch (error) {
        try {
          const backupFileName = String(file.name.substring(0, file.name.indexOf(".md")) + " BACKUP.md");
          this.app.vault.create(backupFileName, fileContentBackup);
          new import_obsidian2.Notice("\u26A0\uFE0F Tag/note editing error: " + error.message + "\n" + backupFileName + " saved to vault root.");
        } catch (error2) {
          navigator.clipboard.writeText(fileContentBackup);
          new import_obsidian2.Notice("\u26A0\uFE0F Tag/note editing error: " + error2.message + "\nNote content copied to clipboard.");
        }
      }
    } else {
      this.processTags();
      new import_obsidian2.Notice("\u26A0\uFE0F Can't identify tag location. Please try again.");
    }
  }
  getTagsToCheckFromEl(tagSummaryEl) {
    const tagsStr = tagSummaryEl.getAttribute("codeblock-tags");
    const tags = tagsStr ? tagsStr.split(",") : [];
    const tagsIncludeStr = tagSummaryEl.getAttribute("codeblock-tags-include");
    const tagsInclude = tagsIncludeStr ? tagsIncludeStr.split(",") : [];
    return tags.concat(tagsInclude);
  }
  updateSummary(summaryEl) {
    const summaryContainer = summaryEl;
    const tagsStr = summaryContainer.getAttribute("codeblock-tags");
    const tags = tagsStr ? tagsStr.split(",") : [];
    const tagsIncludeStr = summaryContainer.getAttribute("codeblock-tags-include");
    const tagsInclude = tagsIncludeStr ? tagsIncludeStr.split(",") : [];
    const tagsExcludeStr = summaryContainer.getAttribute("codeblock-tags-exclude");
    const tagsExclude = tagsExcludeStr ? tagsExcludeStr.split(",") : [];
    const sectionsStr = summaryContainer.getAttribute("codeblock-sections");
    const sections = sectionsStr ? sectionsStr.split(",") : [];
    const max = Number(summaryContainer.getAttribute("codeblock-max"));
    const mdSource = summaryContainer.getAttribute("codeblock-code");
    this.createSummary(summaryContainer, tags, tagsInclude, tagsExclude, sections, max, "", mdSource);
  }
  /*async updateSummariess () {
  		//const activeFile = await this.app.workspace.getActiveFile();
  		//const fileContent = await app.vault.read(activeFile);
  		const activeNoteContainer = await this.app.workspace.activeLeaf.containerEl;
  		const embeds = await activeNoteContainer.querySelectorAll('.tag-summary-block');
  		//let embededTagFiles = [];
  
  		embeds.forEach(async (embed) => {
  			if (embed.classList.contains('tag-summary-block')) {
  				this.updateSummary (embed);
  			}
  		});
  	}*/
  async processTags() {
    if (this.settings.debugMode)
      console.log("Tag Buddy: Processing tags.");
    const view = await this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (view) {
      const activeNoteContainer = await this.app.workspace.activeLeaf.containerEl;
      const activeNoteReadingView = activeNoteContainer.querySelector(".markdown-reading-view");
      const activeNoteEditView = activeNoteContainer.querySelector(".markdown-source-view");
      const activeFile = await this.app.workspace.getActiveFile();
      const fileContent = await app.vault.read(activeFile);
      const activeFileTagElements = await activeNoteContainer.querySelectorAll(".mod-active .tag:not(.markdown-embed .tag):not(.tag-summary-block .tag)");
      const activeFileTags = await this.getMarkdownTags(activeFile, fileContent);
      if (activeFileTags.length > 0)
        this.assignMarkdownTags(activeFileTags, activeFileTagElements, 0, "active");
      this.processEmbeds(activeNoteReadingView);
    }
  }
  async getMarkdownTags(file, fileContent) {
    const tagPositions = [];
    let match;
    const regex = /(?<=^|\s)(#[^\s#.,;!?:]+)(?=[.,;!?:\s]|$)|```/g;
    let insideCodeBlock = false;
    while ((match = regex.exec(fileContent)) !== null) {
      if (match[0].trim() === "```") {
        insideCodeBlock = !insideCodeBlock;
        continue;
      }
      if (insideCodeBlock)
        continue;
      const tag = match[0].trim();
      if (fileContent.slice(match.index, match.index + tag.length + 2).endsWith("]]")) {
        continue;
      }
      tagPositions.push({ tag, index: match.index, source: file.name });
    }
    return tagPositions;
  }
  assignMarkdownTags(tagPositions, tagElements, startIndex, type) {
    let tagEl;
    const tagElArray = Array.from(tagElements);
    let tagElIndex = 0;
    tagPositions.forEach((tagPos, i) => {
      if (tagPositions[i].index >= startIndex) {
        tagEl = tagElArray[tagElIndex];
        if (tagEl) {
          tagEl.setAttribute("md-index", tagPositions[i].index);
          tagEl.setAttribute("file-source", tagPositions[i].source);
          tagEl.setAttribute("type", type);
        }
        tagElIndex++;
      }
    });
    return tagElArray;
  }
  async processEmbeds(element, ids = ["tag-summary-block", "markdown-embed"]) {
    const embeds = await element.querySelectorAll(".tag-summary-block, .markdown-embed");
    embeds.forEach(async (embed) => {
      if (embed.classList.contains("tag-summary-block")) {
        this.processTagSummary(embed);
      } else if (embed.classList.contains("markdown-embed")) {
        this.processNativeEmbed(embed);
        if (Array.from(embed.querySelectorAll(".tag-summary-block")).length > 0) {
          this.processTagSummary(embed);
        }
      } else {
      }
    });
  }
  async processNativeEmbed(embed) {
    const linkElement = embed.getAttribute("src");
    let filePath = embed.getAttribute("src");
    const linkArray = filePath.split("#");
    filePath = linkArray[0].trim() + ".md";
    const file = await this.validateFilePath(filePath);
    if (file) {
      const fileContent = await app.vault.read(file);
      const embededTagFile = await this.getMarkdownTags(file, fileContent);
      const tempComponent = new TempComponent();
      const tempContainerHTML = createEl("div");
      await import_obsidian2.MarkdownRenderer.renderMarkdown(fileContent, tempContainerHTML, file.path, tempComponent);
      const innerText = embed.querySelector(".markdown-embed-content").innerText;
      const startIndex = tempContainerHTML.innerText.indexOf(innerText);
      this.assignMarkdownTags(embededTagFile, embed.querySelectorAll(".tag"), startIndex, "native-embed");
    }
  }
  async processTagSummary(embed) {
    let summaryBlocks = embed.querySelectorAll("blockquote");
    summaryBlocks.forEach(async (block, index) => {
      var _a, _b;
      const filePath = block.getAttribute("file-source");
      const file = this.app.vault.getAbstractFileByPath(filePath);
      const tempComponent = new TempComponent();
      if (file) {
        let fileContent = await app.vault.read(file);
        const embededTagFile = await this.getMarkdownTags(file, fileContent);
        const tempBlock = block.cloneNode(true);
        (_a = tempBlock.querySelector(".tagsummary-item-title")) == null ? void 0 : _a.remove();
        (_b = tempBlock.querySelector(".tagsummary-buttons")) == null ? void 0 : _b.remove();
        const markdownBlock = block.getAttribute("md-source").trim();
        const startIndex = fileContent.indexOf(markdownBlock);
        this.assignMarkdownTags(embededTagFile, block.querySelectorAll(".tag"), startIndex, "plugin-summary");
      }
    });
  }
  async summaryCodeBlockProcessor(source, el, ctx) {
    let tags = Array();
    let include = Array();
    let exclude = Array();
    let sections = Array();
    let max = 50;
    const maxPattern = /^\s*max:\s*(\d+)\s*$/;
    let match;
    const rows = source.split("\n").filter((row) => row.length > 0);
    rows.forEach((line) => {
      if (line.match(/^\s*tags:[\p{L}0-9_\-/# ]+$/gu)) {
        const content = line.replace(/^\s*tags:/, "").trim();
        let list = content.split(/\s+/).map((tag) => tag.trim());
        list = list.filter((tag) => {
          if (tag.match(/^#[\p{L}]+[^#]*$/u)) {
            return true;
          } else {
            return false;
          }
        });
        tags = list;
      }
      if (line.match(/^\s*include:[\p{L}0-9_\-/# ]+$/gu)) {
        const content = line.replace(/^\s*include:/, "").trim();
        let list = content.split(/\s+/).map((tag) => tag.trim());
        list = list.filter((tag) => {
          if (tag.match(/^#[\p{L}]+[^#]*$/u)) {
            return true;
          } else {
            return false;
          }
        });
        include = list;
      }
      if (line.match(/^\s*exclude:[\p{L}0-9_\-/# ]+$/gu)) {
        const content = line.replace(/^\s*exclude:/, "").trim();
        let list = content.split(/\s+/).map((tag) => tag.trim());
        list = list.filter((tag) => {
          if (tag.match(/^#[\p{L}]+[^#]*$/u)) {
            return true;
          } else {
            return false;
          }
        });
        exclude = list;
      }
      if (line.match(/^\s*sections:[\p{L}0-9_\-/#, ]+$/gu)) {
        const content = line.replace(/^\s*sections:/, "").trim();
        let list = content.split(",").map((sec) => sec.trim());
        sections = list;
      }
      match = line.match(maxPattern);
      if (match) {
        max = Math.min(50, Number(match[1]));
      }
    });
    const codeBlock = "```tag-summary\n" + source.trim() + "\n```";
    if (tags.length > 0 || include.length > 0) {
      await this.createSummary(el, tags, include, exclude, sections, max, ctx.sourcePath, codeBlock);
    } else {
      this.createEmptySummary(el, tags ? tags : [], include ? include : [], exclude ? exclude : [], sections ? sections : [], max ? max : [], ctx.sourcePath ? ctx.sourcePath : "", codeBlock);
    }
  }
  createEmptySummary(element, tags, include, exclude, sections, max, fileCtx, mdSource) {
    const container = createEl("div");
    const textDiv = createEl("blockquote");
    textDiv.innerHTML = "There are no files with tagged paragraphs that match the tags:<br>" + (tags.length > 0 ? tags.join(", ") : "No tags specified.") + "<br>";
    container.appendChild(textDiv);
    container.setAttribute("codeblock-tags", tags.length > 0 ? tags.join(",") : "");
    container.setAttribute("codeblock-tags-include", include ? include.join(",") : "");
    container.setAttribute("codeblock-tags-exclude", exclude ? exclude.join(",") : "");
    container.setAttribute("codeblock-sections", sections ? sections.join(",") : "");
    container.setAttribute("codeblock-max", max);
    container.setAttribute("codeblock-code", mdSource);
    container.appendChild(this.makeSummaryRefreshButton(container));
    ;
    element.replaceWith(container);
  }
  async createSummary(element, tags, include, exclude, sections, max, fileCtx, mdSource) {
    const activeFile = await this.app.workspace.getActiveFile();
    const validTags = tags.concat(include);
    const tempComponent = new TempComponent();
    const summaryContainer = createEl("div");
    summaryContainer.setAttribute("class", "tag-summary-block");
    let listFiles = this.app.vault.getMarkdownFiles();
    listFiles = listFiles.filter((file) => {
      const cache = app.metadataCache.getFileCache(file);
      const tagsInFile = (0, import_obsidian2.getAllTags)(cache);
      if (validTags.some((value) => tagsInFile.includes(value))) {
        return true;
      }
      return false;
    });
    listFiles = listFiles.sort((file1, file2) => {
      if (file1.path < file2.path) {
        return -1;
      } else if (file1.path > file2.path) {
        return 1;
      } else {
        return 0;
      }
    });
    let listContents = await this.readFiles(listFiles);
    let count = 0;
    let summary = "";
    listContents.forEach((item) => {
      const fileName = item[0].name.replace(/.md$/g, "");
      const filePath = item[0].path;
      if (activeFile) {
        if (activeFile.name == item[0].name)
          return;
      }
      let listParagraphs = Array();
      const blocks = item[1].split(/\n\s*\n/).filter((row) => row.trim().length > 0);
      blocks.forEach((paragraph) => {
        let valid = false;
        let listTags = paragraph.match(/#[\p{L}0-9_\-/#]+/gu);
        if (listTags != null && listTags.length > 0) {
          if (!paragraph.contains("```")) {
            valid = this.isValidText(listTags, tags, include, exclude);
          }
        }
        if (valid) {
          let listItems = Array();
          let itemText = "";
          paragraph.split("\ns*\n").forEach((line) => {
            if (count >= max)
              return;
            let isList = false;
            isList = line.search(/(\s*[\-\+\*]){1}|([0-9]\.){1}\s+/) != -1;
            if (!isList) {
              listParagraphs.push(line);
              itemText = "";
            } else {
              line.split("\n").forEach((itemLine) => {
                let level = 0;
                const endIndex = itemLine.search(/[\-\+\*]{1}|([0-9]\.){1}\s+/);
                const tabText = itemLine.slice(0, endIndex);
                const tabs = tabText.match(/\t/g);
                if (tabs) {
                  level = tabs.length;
                }
                if (level == 0) {
                  if (itemText != "") {
                    listItems.push(itemText);
                    itemText = "";
                  }
                  itemText = "" + itemText.concat(itemLine + "\n");
                } else if (level > 0 && itemText != "") {
                  itemText = itemText.concat(itemLine + "\n");
                }
              });
            }
            count++;
          });
          if (itemText != "") {
            listItems.push(itemText);
            itemText = "";
          }
          listItems.forEach((line) => {
            listTags = line.match(/#[\p{L}0-9_\-/#]+/gu);
            if (listTags != null && listTags.length > 0) {
              if (this.isValidText(listTags, tags, include, exclude)) {
                listParagraphs.push(line);
              }
            }
          });
        }
      });
      listParagraphs.forEach(async (paragraph) => {
        paragraph += "\n";
        var regex = new RegExp();
        var tagText = new String();
        var tagSection = null;
        tags.forEach((tag) => {
          tagText = tag.replace("#", "\\#");
          regex = new RegExp(`${tagText}(\\W|$)`, "g");
          if (paragraph.match(regex) != null) {
            tagSection = tag;
          }
        });
        const buttonContainer = createEl("div");
        buttonContainer.setAttribute("class", "tagsummary-buttons");
        const paragraphEl = createEl("blockquote");
        paragraphEl.setAttribute("file-source", filePath);
        paragraphEl.setAttribute("class", "tag-summary-paragraph");
        const blockLink = paragraph.match(/\^[\p{L}0-9_\-/^]+/gu);
        let link;
        if (blockLink) {
          link = "[[" + filePath + "#" + blockLink + "|" + fileName + "]]";
          let count2 = 0;
          sections.forEach((sec) => {
            if (count2++ > 3)
              return;
            buttonContainer.appendChild(this.makeCopyToButton(paragraph, sec, paragraphEl, tags, filePath + "#" + blockLink, paragraphEl, summaryContainer));
          });
          if (this.settings.tagSummaryBlockButtons) {
            buttonContainer.appendChild(this.makeCopyButton(paragraph.trim()));
            buttonContainer.appendChild(this.makeRemoveTagButton(paragraphEl, tagSection, filePath + "#" + blockLink));
          }
        } else {
          link = "[[" + filePath + "|" + fileName + "]]";
          let count2 = 0;
          sections.forEach((sec) => {
            if (count2++ > 3)
              return;
            if (this.settings.tagSummaryBlockButtons)
              buttonContainer.appendChild(this.makeCopyToButton(paragraph, sec, paragraphEl, tags, filePath, paragraphEl, summaryContainer));
          });
          if (this.settings.tagSummaryBlockButtons) {
            buttonContainer.appendChild(this.makeCopyButton(paragraph.trim()));
            buttonContainer.appendChild(this.makeRemoveTagButton(paragraphEl, tagSection, filePath));
          }
        }
        const mdParagraph = paragraph;
        paragraph = "**" + link + "**\n" + paragraph;
        summary += paragraph + "\n";
        await import_obsidian2.MarkdownRenderer.renderMarkdown(paragraph, paragraphEl, "", tempComponent);
        const titleEl = createEl("span");
        titleEl.setAttribute("class", "tagsummary-item-title");
        titleEl.appendChild(paragraphEl.querySelector("strong").cloneNode(true));
        if (this.settings.tagSummaryBlockButtons)
          paragraphEl.appendChild(buttonContainer);
        paragraphEl.querySelector("strong").replaceWith(titleEl);
        paragraphEl.setAttribute("md-source", mdParagraph);
        summaryContainer.appendChild(paragraphEl);
      });
    });
    if (summary != "") {
      setTimeout(async () => {
        if (this.settings.showSummaryButtons) {
          summaryContainer.appendChild(this.makeSummaryRefreshButton(summaryContainer));
          summaryContainer.appendChild(this.makeCopySummaryButton(summary));
          summaryContainer.appendChild(this.makeSummaryNoteButton(summary, tags));
          summaryContainer.appendChild(this.makeBakeButton(summary, summaryContainer, activeFile.path));
          summaryContainer.appendChild(createEl("br"));
        }
        summaryContainer.appendChild(createEl("hr"));
      }, 0);
      summaryContainer.setAttribute("codeblock-tags", tags.join(","));
      summaryContainer.setAttribute("codeblock-tags-include", include.length > 0 ? include.join(",") : "");
      summaryContainer.setAttribute("codeblock-tags-exclude", exclude.length > 0 ? exclude.join(",") : "");
      summaryContainer.setAttribute("codeblock-sections", sections.length > 0 ? sections.join(",") : "");
      summaryContainer.setAttribute("codeblock-max", max);
      summaryContainer.setAttribute("codeblock-code", mdSource);
      element.replaceWith(summaryContainer);
    } else {
      this.createEmptySummary(element, tags ? tags : [], include ? include : [], exclude ? exclude : [], sections ? sections : [], max ? max : [], "", mdSource);
    }
  }
  /*makeSwitchToEditingButton (view){
  	const button = this.makeButton ('Edit code block in edit-mode', async(e) => { 
  		e.stopPropagation();
  		const view = await this.app.workspace.getActiveViewOfType(MarkdownView);
  		if (view.getMode() == 'preview') {
       			let curState = view.getState();
       			curState.mode = 'source';
       			view.setState(curState);
     		}
  	});
  	button.title = 'Switch to edit mode';
  	return button;
  }*/
  makeCopySummaryButton(summaryMd) {
    const button = this.makeButton(" \u274F  ", (e) => {
      e.stopPropagation();
      navigator.clipboard.writeText(summaryMd);
      new import_obsidian2.Notice("Summary copied to clipboard.");
    });
    button.title = "Copy summary";
    return button;
  }
  makeSummaryNoteButton(summaryMd, tags) {
    const button = this.makeButton("Note", (e) => {
      e.stopPropagation();
      const newNoteObj = this.fileObjFromTags(tags);
      let fileContent = "## " + newNoteObj.title + "\n\n" + summaryMd;
      const fileName = this.getActiveFileFolder() + newNoteObj.fileName;
      const file = this.app.vault.getAbstractFileByPath(fileName);
      let notice;
      tags.forEach((tag) => {
        fileContent = this.replaceTextInString(tag, fileContent, tag.substring(1), true);
      });
      if (file instanceof import_obsidian2.TFile) {
        notice = new import_obsidian2.Notice("\u26A0\uFE0F Note already exists.\nClick here to overwrite.", 5e3);
        this.registerDomEvent(notice.noticeEl, "click", (e2) => {
          this.app.vault.modify(file, fileContent);
          notice = new import_obsidian2.Notice("Note updated.\n\u{1F517} Open note.", 5e3);
          this.registerDomEvent(notice.noticeEl, "click", (e3) => {
            this.app.workspace.openLinkText(fileName, "");
          });
        });
      } else if (!file) {
        this.app.vault.create(fileName, fileContent);
        const notice2 = new import_obsidian2.Notice("Tag Buddy: Summary note created. \u{1F4DC}\n\u{1F517} Open note.");
        this.registerDomEvent(notice2.noticeEl, "click", (e2) => {
          this.app.workspace.openLinkText(newNoteObj.fileName, "");
        });
      }
    });
    button.title = "Create note from summary";
    return button;
  }
  fileObjFromTags(tags) {
    let tagsArray = tags.map((tag) => tag.replace(/#/g, "").toLowerCase());
    tagsArray = tagsArray.filter((tag, index, self) => self.indexOf(tag) === index);
    const tagsPart = tagsArray.join("+");
    const currentDate = new Date();
    const datePart = currentDate.getDate().toString().padStart(2, "0") + "-" + (currentDate.getMonth() + 1).toString().padStart(2, "0") + "-" + currentDate.getFullYear().toString().slice(-2);
    const fileName = `Tag Summary (${tagsPart}) (${datePart}).md`;
    const titleTagsPart = tagsArray.map((tag) => tag.charAt(0).toUpperCase() + tag.slice(1)).join(" + ");
    const title = `${titleTagsPart} Tag Summary`;
    return {
      fileName,
      title
    };
  }
  getActiveFileFolder() {
    const activeFile = app.workspace.activeLeaf.view.file;
    if (!activeFile)
      return null;
    const pathSeparator = activeFile.path.includes("\\") ? "\\" : "/";
    const pathParts = activeFile.path.split(pathSeparator);
    pathParts.pop();
    let folderPath = pathParts.join(pathSeparator);
    if (!folderPath.endsWith(pathSeparator)) {
      folderPath += pathSeparator;
    }
    return folderPath;
  }
  makeSummaryRefreshButton(summaryEl) {
    const button = this.makeButton(" \u21BA  ", (e) => {
      e.stopPropagation();
      this.updateSummary(summaryEl);
      new import_obsidian2.Notice("Tag Summary updated");
      setTimeout(async () => {
        this.processTags();
      }, 10);
    });
    button.title = "Refresh Tag Summary";
    return button;
  }
  makeCopyToButton(content, section, paragraph, tags, filePath, paragraphEl, summaryEl) {
    const buttonLabel = " \u274F   " + this.truncateStringAtWord(section, 16);
    const button = this.makeButton(buttonLabel, async (e) => {
      e.stopPropagation();
      let newContent = content;
      const prefix = this.settings.taggedParagraphCopyPrefix;
      if (this.ctrlCmdKey(e)) {
        tags.forEach((tag, i) => {
          newContent = this.removeTagFromString(newContent, tag).trim();
        });
      }
      const copySuccess = this.copyTextToSection(prefix + newContent, section, filePath);
      if (copySuccess) {
        if (this.ctrlCmdKey(e) && e.shiftKey) {
          const file = this.app.vault.getAbstractFileByPath(filePath);
          let fileContent = await this.app.vault.read(file);
          fileContent = fileContent.trim();
          const newFileContent = this.replaceTextInString(content.trim(), fileContent, newContent).trim();
          if (fileContent != newFileContent) {
            this.app.vault.modify(file, newFileContent);
            const notice = new import_obsidian2.Notice("Paragraph moved to " + section + ".\n\u{1F517} Open source note.", 5e3);
            this.removeElementWithAnimation(paragraphEl, () => {
              setTimeout(async () => {
                this.updateSummary(summaryEl);
                paragraphEl.remove();
              }, 500);
              setTimeout(async () => {
                this.processTags();
              }, 800);
            });
            this.registerDomEvent(notice.noticeEl, "click", (e2) => {
              this.app.workspace.openLinkText(filePath, "");
            });
          } else {
            new import_obsidian2.Notice("Tag Buddy: Paragraph copied to " + section + ".\nBut can't update source file.");
          }
        } else {
          new import_obsidian2.Notice("Tag Buddy: Paragraph copied to " + section + ".");
        }
      } else {
      }
    });
    button.title = "Copy paragraph to " + section + ".\n" + this.ctrlCmdStr() + "+CLICK to remove tag(s) then copy.\n";
    button.title += "SHIFT+" + this.ctrlCmdStr() + "+CLICK to remove tags from source note paragraph.";
    return button;
  }
  makeBakeButton(summaryMd, summaryEl, filePath) {
    const button = this.makeButton("Bake", async (e) => {
      e.stopPropagation();
      const mdSource = summaryEl.getAttribute("codeblock-code");
      if (mdSource) {
        const file = this.app.vault.getAbstractFileByPath(filePath);
        const fileContent = await this.app.vault.read(file);
        const newFileContent = this.replaceTextInString(mdSource, fileContent, summaryMd);
        this.app.vault.modify(file, newFileContent);
        const notice = new import_obsidian2.Notice("Tag summary flattened to active note.");
      } else {
        new import_obsidian2.Notice("\u26A0\uFE0F Tag Buddy: Can	 find code block source. This is a BUG.");
      }
    });
    button.title = "Flatten summary (replaces code block).";
    return button;
  }
  makeCopyButton(content) {
    const button = this.makeButton(" \u274F ", (e) => {
      e.stopPropagation();
      navigator.clipboard.writeText(content);
      const notice = new import_obsidian2.Notice("Tag Buddy: Copied to clipboard.");
    });
    button.title = "Copy paragraph";
    return button;
  }
  ctrlCmdStr() {
    const isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
    if (isMac)
      return "CMD";
    else
      return "CTRL";
  }
  /*tagsInString (string:string, tag:string=''):Array {
  	const regex = new RegExp(tag.replace(/\//g, '\\/') + "(?![\\w\\/\\#])", "g");
  	const matches = string.match(regex);
  	console.log(matches)
  	return matches || []; //matches ? matches.length : 0;
  }*/
  tagsInString(string, tag) {
    let regex;
    if (tag) {
      regex = new RegExp(tag.replace(/\//g, "\\/") + "(?![\\w\\/\\#])", "g");
    } else {
      regex = /#(\w+)(?![\w\/#])/g;
    }
    const matches = string.match(regex);
    return matches || [];
  }
  countOccurrences(summaryTags, contentTags) {
    let count = 0;
    for (let tag of summaryTags) {
      count += contentTags.filter((item) => item === tag).length;
    }
    return count;
  }
  makeRemoveTagButton(paragraphEl, tag, filePath) {
    const button = this.makeButton(" \u2317\u02E3 ", (e) => {
      e.stopPropagation();
      const tagEl = this.getTagElement(paragraphEl, tag);
      this.editTag(tagEl);
    });
    button.title = "Remove " + tag + " from paragraph (and from this summary).";
    return button;
  }
  removeElementWithAnimation(el, callback) {
    const height = el.offsetHeight;
    el.style.height = `${height}px`;
    setTimeout(() => {
      el.style.height = "0px";
      el.style.opacity = "0";
      el.style.margin = "0";
      el.style.padding = "0";
    }, 0);
    el.addEventListener("transitionend", function onEnd() {
      el.removeEventListener("transitionend", onEnd);
      callback();
    });
  }
  makeButton(lable, clickFn, classId = "tagsummary-button") {
    const button = document.createElement("button");
    button.innerText = lable;
    button.className = classId;
    this.registerDomEvent(button, "click", clickFn.bind(this));
    return button;
  }
  getMarkdownHeadings(bodyLines) {
    const headers = [];
    let accumulatedIndex = 0;
    bodyLines.forEach((line, index) => {
      const match = line.match(/^(#+)[\s]?(.*)$/);
      if (match) {
        headers.push({
          fullText: match[0],
          level: match[1].length,
          text: match[2],
          line: index,
          startIndex: accumulatedIndex,
          endIndex: accumulatedIndex + match[0].length - 1
        });
      }
      accumulatedIndex += line.length + 1;
    });
    return headers;
  }
  getLinesInString(input) {
    const lines = [];
    let tempString = input;
    while (tempString.includes("\n")) {
      const lineEndIndex = tempString.indexOf("\n");
      lines.push(tempString.slice(0, lineEndIndex));
      tempString = tempString.slice(lineEndIndex + 1);
    }
    lines.push(tempString);
    return lines;
  }
  insertTextAfterLine(text, body, line, filePath) {
    const splitContent = body.split("\n");
    const pre = splitContent.slice(0, line + 1).join("\n");
    const post = splitContent.slice(line + 1).join("\n");
    return `${pre}
${text}
${post}`;
  }
  async copyTextToSection(text, section, filePath) {
    const file = await this.app.workspace.getActiveFile();
    const fileContent = await this.app.vault.read(file);
    const fileContentLines = this.getLinesInString(fileContent);
    const mdHeadings = this.getMarkdownHeadings(fileContentLines);
    if (mdHeadings.length > 0) {
      const headingObj = mdHeadings.find((heading) => heading.text.trim() === section);
      if (headingObj) {
        const textWithLink = text + ` [[${filePath}|\u{1F517}]]`;
        let newContent = this.insertTextAfterLine(textWithLink, fileContent, headingObj.line);
        await this.app.vault.modify(file, newContent);
        return true;
      } else {
        new import_obsidian2.Notice(`Tag Buddy: ${section} not found.`);
        return false;
      }
    } else {
      new import_obsidian2.Notice("Tag Buddy: There are no header sections in this note.");
      return false;
    }
  }
  removeTagFromString(inputText, hashtagToRemove, all = true) {
    const regex = new RegExp("\\s?" + hashtagToRemove.replace(/#/g, "\\#") + "(?!\\w|\\/)", all ? "gi" : "i");
    return inputText.replace(regex, "").trim();
  }
  /*getSectionTitleWithHashes(sectionTitle) {
  	    const activeView = this.app.workspace.getActiveViewOfType(MarkdownView);
  	    if (!activeView) {
  	        console.log('No active markdown view found.');
  	        return null;
  	    }
  
  	    const contentEl = activeView.contentEl;
  
  	    // Get all heading elements
  	    // This doesn't work with super long notes. 
  	    const headings = contentEl.querySelectorAll('h1, h2, h3, h4, h5, h6');
  	    //const headings = await contentEl.getElementsByClassName('h1, h2, h3, h4, h5, h6');
  	    
  	    //console.log(headings)
  	    for (const heading of headings) {
  	        if (heading.textContent.trim() === sectionTitle.trim()) {
  	            // Determine the number of hashes based on the heading level
  	            const level = parseInt(heading.tagName.substr(1), 10);  // e.g., "H2" -> 2
  	            const hashes = '#'.repeat(level);
  	            //console.log(heading);
  	            return {md:`${hashes} ${sectionTitle}`, el:heading};
  	        }
  	    }
  
  	    console.log(`Section "${sectionTitle}" not found.`);
  	    return null;
  	}*/
  truncateStringAtWord(str, maxChars) {
    if (str.length <= maxChars)
      return str;
    let truncated = str.substr(0, maxChars);
    const lastSpace = truncated.lastIndexOf(" ");
    if (lastSpace > 0)
      truncated = truncated.substr(0, lastSpace);
    return truncated;
  }
  async readFiles(listFiles) {
    let list = [];
    for (let t = 0; t < listFiles.length; t += 1) {
      const file = listFiles[t];
      let content = await this.app.vault.cachedRead(file);
      list.push([file, content]);
    }
    return list;
  }
  isValidText(listTags, tags, include, exclude) {
    let valid = true;
    if (tags.length > 0) {
      valid = valid && tags.some((value) => listTags.includes(value));
    }
    if (include.length > 0) {
      valid = valid && include.every((value) => listTags.includes(value));
    }
    if (valid && exclude.length > 0) {
      valid = !exclude.some((value) => listTags.includes(value));
    }
    return valid;
  }
  async validateFilePath(filePath) {
    const matchingFiles = await app.vault.getFiles().filter((file) => file.name === filePath);
    if (matchingFiles.length === 1) {
      const filePath2 = matchingFiles[0].path;
      const file = await this.app.vault.getAbstractFileByPath(filePath2);
      return file;
    } else if (matchingFiles.length > 1) {
      new import_obsidian2.Notice("Tag Buddy: Multiple files found with the same name. Can't safely edit tag.");
      return null;
    } else {
      new import_obsidian2.Notice("Tag Buddy: No file found. Try again, or this tag might be in an unsupported embed type.");
      return null;
    }
  }
  contentChangedTooMuch(original, modified, tag, buffer = 5) {
    const expectedChange = tag.length;
    const threshold = expectedChange + buffer;
    const actualChange = Math.abs(original.length - modified.length);
    return actualChange > threshold;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  isTagValid(tag) {
    const tagPattern = /^#[\w]+$/;
    return tagPattern.test(tag);
  }
  saveRecentTag(tag) {
    if (this.isTagValid(tag)) {
      const recentTagsString = this.settings.recentlyAddedTags;
      let recentTags;
      if (recentTagsString == "") {
        recentTags = [];
      } else if (recentTagsString.indexOf(", ")) {
        recentTags = this.settings.recentlyAddedTags.split(", ");
      } else {
        recentTags = [this.settings.recentlyAddedTags];
      }
      if (recentTags.includes(tag)) {
        recentTags.splice(recentTags.indexOf(tag), 1);
      }
      recentTags.unshift(tag.trim());
      recentTags = recentTags.slice(0, 3);
      this.settings.recentlyAddedTags = recentTags.join(", ");
      this.saveSettings();
    }
  }
  getRecentTags() {
    const recentTags = this.settings.recentlyAddedTags == "" ? [] : this.settings.recentlyAddedTags.split(", ");
    return recentTags;
  }
  // fuck.this.function
  /*cleanString(input) {
  		let cleanedStr;
  
  		// Check if input is a DOM element
  		if (input instanceof Element) {
  			//console.log('input is: Element');
  			cleanedStr = input.outerHTML.trim();
  		} else {
  			//console.log('input is: String');
  			cleanedStr = input.trim();
  		}
  
  		// Whitespace normalization
  		//cleanedStr = cleanedStr.replace(/\s+/g, ' ');
  
  		// Remove <br> elements
  		//cleanedStr = cleanedStr.replace(/<br>/g, ' ');
  
  		// Remove blockquote tags but keep their content
  		//cleanedStr = cleanedStr.replace(/<\/?blockquote>/g, '');
  
  		// Remove blockquote tags but keep their content
  		//cleanedStr = cleanedStr.replace(/<\/?div>/g, '');
  
  		// Remove spaces between tags
  		//cleanedStr = cleanedStr.replace(/>\s+</g, '><');
  
  		// Whitespace normalization
  		cleanedStr = cleanedStr.replace(/\s+/g, ' ');
  
  		// HTML entity decoding
  		const textArea = document.createElement('textarea');
  		textArea.innerHTML = cleanedStr;
  		cleanedStr = textArea.value.trim();
  
  		// Optional: convert to lowercase
  		// cleanedStr = cleanedStr.toLowerCase();
  
  		return cleanedStr;
  	}*/
  /*async refreshView (){
  		//console.log('Refresh view.');
  		new Notice ('Refresh view.');
  		// if using rerender,
  		//const scrollState = this.app.workspace.getActiveViewOfType(MarkdownView)?.currentMode?.getScroll();
  		//await view.previewMode.rerender(true);
  
  		await app.workspace.activeLeaf.rebuildView();
  		// only needed if we use rerender above. do this on a timeout
  		//this.app.workspace.getActiveViewOfType(MarkdownView).previewMode.applyScroll(scrollState);
  	}*/
  injectStyles() {
    const styles = `
        .tagsummary-notags {
        	color: var(--link-color) !important;
        	font-weight: 500 !important;
        	border: 1px solid var(--link-color) !important; 
        	border-radius: 5px !important;
        	padding: 10px 10px;
        }

        .tagsummary-button {

            color: var(--text-primary) !important;
            /*border: .5px solid var(--text-quote) !important;*/
            border-radius: 6px !important;
            padding: 2.5px 5px !important;
            font-size: 65% !important;
            transition: background-color 0.3s !important;
            margin: 0px 3px 0px 0px !important;
            min-width: 40px !important;

	       color: var(--link-color) !important;
	       border: 1px solid var(--link-color) !important; 
		   background-color: var(--background-primary) !important;

        }

        .tagsummary-button:hover {
            background-color: var(--link-color) !important;
            color: var(--background-secondary) !important;
        }

        .tagsummary-item-title {
            margin: 5px 0px
        }

        .tagsummary-buttons {
            /*float: right;*/
            text-align: right !important;
        }

		blockquote.tag-summary-paragraph {
		  transition: height 0.3s, opacity 0.3s;
		  /*transition: height 0.3s ease, margin 0.3s ease, padding 0.3s ease, opacity 0.3s ease;*/
		  overflow: hidden;
		}

		.removing {
		  height: 0 !important; 
		  opacity: 0;
		  margin: 0;
		  padding: 0;
		}

	    @media only screen and (max-device-width: 480px), 
	       only screen and (max-width: 480px) and (orientation: landscape),
	       only screen and (max-device-width: 1024px), 
	       only screen and (min-width: 481px) and (max-width: 1024px) and (orientation: landscape) {
		   .tagsummary-button {
		       display: inline-block !important;
		       font-size: 12px !important;
		       padding: 5px 5px;
		       box-shadow: none;  /* remove shadows if they look off */
		       border-radius: 4px;
		       color: var(--link-color) !important;
		       border: 1px solid var(--link-color); 
		       width: auto !important;            /* auto adjusts width based on content */
    		   /*max-width: 60px !important;  */  
    		   max-height: 30px !important;
    		   min-width: 40px !important;
    		   white-space: nowrap;
    		   /*text-align: left !important;*/
    		   overflow: hidden;
    		   background-color: var(--background-primary) !important;
		   }
		}

		.addtag-menu {
			position: absolute !important;
		    background-color: var(--background-primary) !important;
		    /*color: white !important;*/
		    border: 2px solid var(--divider-color) !important;
		    z-index: 10000 !important;
		    overflow-y: auto !important;
		    /*max-height: 150px !important;*/
		    width: 150px !important;
		    box-shadow: 5px 5px 20px rgba(0, 0, 0, 0.5) !important;
	        border-radius: 8px !important;  
	        font-family: Arial, sans-serif;  
	        font-size: 12px !important;
	        overflow: hidden !important;  // Hide overflow
			padding-right: 10px !important;  // Adjust padding to make space for scrollbar
			box-sizing: border-box !important; 
			
    		border-radius: 10px !important;
    		
		}

		.tag-list {
			overflow-y: auto !important;
		    overflow-x: hidden !important; 
		    /*padding-right: 8px !important;  // Adjust padding to give space for scrollbar
		    /*margin-right: -8px !important;  // Adjust margin to move scrollbar into the padding*/
		    box-sizing: border-box !important; 
		}

		.tag-item {
			padding: 5px 10px 5px 10px !important;  
            cursor: pointer !important;
           /* border-bottom: 1px solid var(--divider-color) !important;  // Separator line*/
            font-size: 14px !important;
            /*width: 130px !important;*/
            width: 100% !important;
            /*height: 20px !important;*/
            text-overflow: ellipsis !important; 
			white-space: nowrap !important;  
			box-sizing: border-box !important; 

			
			transition: background-color 0.2s ease !important; 
			border-radius: 5px !important; 
		}

		.tag-item:hover {
	        background-color: var(--background-modifier-hover) !important; // Added ,1 for opacity
	        /*color: white !important;*/
	    }
		.tag-item.active {
	        background-color: var(--background-modifier-hover) !important;
	        /*background-color: var(--interactive-accent) !important;*/
	        /*color: white !important;*/
	    }

		#addtag-menu .disable-hover .tag-item:hover {
		    background-color: inherit !important;
		    color: inherit !important;
		}

	    .tag-search {
	     	width: 100% !important;
	        padding: 2.5px 5px !important;
	        border: none !important;
	        font-family: Arial, sans-serif;
	        font-size: 14px !important;
	    }

        .tag-search:focus {
        	outline: none !important;
        	border: none !important;
        	border-bottom: 0px !important;
        	box-shadow: none !important;
        	outline-style: none !important;
    		outline-width: 0px !important;


        } 

    `;
    const styleSheet = createEl("style");
    styleSheet.type = "text/css";
    styleSheet.innerText = styles;
    styleSheet.id = "tag-buddy-styles";
    document.head.appendChild(styleSheet);
  }
  async getEmbedFile(el) {
    let filePath = el.getAttribute("src");
    const linkArray = filePath.split("#");
    filePath = linkArray[0].trim() + ".md";
    const file = await this.validateFilePath(filePath);
    return file;
  }
  async getSummaryFile(el) {
    const filePath = el.getAttribute("file-source");
    const file = await this.app.vault.getAbstractFileByPath(filePath);
    return file;
  }
  showTagSelector(x, y) {
    const maxTagContainerHeight = 170;
    const tagItemHeight = 30;
    const existingMenu = document.getElementById("addtag-menu");
    if (existingMenu)
      existingMenu.remove();
    const menuEl = createEl("div");
    menuEl.setAttribute("id", "addtag-menu");
    menuEl.classList.add("addtag-menu");
    menuEl.style.left = `${x}px`;
    menuEl.style.top = `${y}px`;
    const searchEl = createEl("input");
    searchEl.setAttribute("type", "text");
    searchEl.setAttribute("id", "tag-search");
    searchEl.classList.add("tag-search");
    searchEl.setAttribute("placeholder", "Search tags...");
    menuEl.appendChild(searchEl);
    const tagContainer = createEl("div");
    tagContainer.classList.add("tag-list");
    tagContainer.style.setProperty("max-height", `${maxTagContainerHeight}px`, "important");
    menuEl.appendChild(tagContainer);
    const renderTags = (searchQuery) => {
      tagContainer.innerHTML = "";
      const filteredTags = this.getTagsFromApp().filter((tag) => tag.toLowerCase().includes(searchQuery.toLowerCase()));
      const dynamicHeight = Math.min(filteredTags.length * tagItemHeight, maxTagContainerHeight);
      filteredTags.forEach((tag, index) => {
        const itemEl = createEl("div");
        itemEl.innerText = `${tag}`;
        itemEl.classList.add("tag-item");
        itemEl.title = `#${tag}`;
        if (index === 0) {
          itemEl.classList.add("active");
        }
        itemEl.style.setProperty("max-height", `${dynamicHeight}px`, "important");
        this.registerDomEvent(itemEl, "click", (e) => {
          this.addTag("#" + tag, x, y);
          menuEl.remove();
        }, true);
        tagContainer.appendChild(itemEl);
      });
      if (filteredTags.length * tagItemHeight > maxTagContainerHeight) {
        tagContainer.style.overflowY = "auto !important";
      } else {
        tagContainer.style.overflowY = "hidden !important";
      }
    };
    this.registerDomEvent(searchEl, "keyup", (e) => {
      const searchQuery = e.target.value.trim();
      const pattern = /^[^\s\p{P}]+$/u;
      if (e.key === "Enter") {
        const activeTag = tagContainer.querySelector(".active");
        if (activeTag) {
          this.addTag("#" + activeTag.innerText, x, y);
        } else if (pattern.test(searchQuery)) {
          this.addTag("#" + searchQuery, x, y);
        }
        menuEl.remove();
      }
    });
    renderTags("");
    searchEl.addEventListener("input", (e) => {
      renderTags(e.target.value);
    });
    document.body.appendChild(menuEl);
    searchEl.focus();
    const closeMenu = (e) => {
      if (e instanceof MouseEvent && (e.button === 0 || e.button === 2)) {
        if (!menuEl.contains(e.target)) {
          menuEl.remove();
          document.body.removeEventListener("click", closeMenu);
          document.body.removeEventListener("contextmenu", closeMenu);
          document.body.removeEventListener("keyup", closeMenu);
        }
      } else if (e instanceof KeyboardEvent && e.key === "Escape") {
        menuEl.remove();
        document.body.removeEventListener("click", closeMenu);
        document.body.removeEventListener("contextmenu", closeMenu);
        document.body.removeEventListener("keyup", closeMenu);
      }
    };
    setTimeout(() => {
      this.registerDomEvent(document.body, "click", closeMenu);
      this.registerDomEvent(document.body, "contextmenu", closeMenu);
      this.registerDomEvent(document.body, "keyup", closeMenu);
    }, 0);
    this.registerDomEvent(tagContainer, "mousemove", () => {
      tagContainer.classList.remove("disable-hover");
      const activeTag = tagContainer.querySelector(".tag-item.active");
      if (activeTag) {
        activeTag.classList.remove("active");
      }
    });
    this.registerDomEvent(searchEl, "blur", () => {
      tagContainer.classList.remove("disable-hover");
    });
    this.registerDomEvent(searchEl, "keydown", (e) => {
      const activeTag = tagContainer.querySelector(".active");
      let nextActiveTag;
      if (["ArrowUp", "ArrowDown"].includes(e.key) || e.key.length === 1) {
        tagContainer.classList.add("disable-hover");
      }
      if (e.key === "ArrowDown") {
        if (activeTag && activeTag.nextElementSibling) {
          nextActiveTag = activeTag.nextElementSibling;
        } else {
          nextActiveTag = tagContainer.firstChild;
        }
      } else if (e.key === "ArrowUp") {
        if (activeTag && activeTag.previousElementSibling) {
          nextActiveTag = activeTag.previousElementSibling;
        } else {
          nextActiveTag = tagContainer.lastChild;
        }
      } else if (e.key === "Enter") {
      }
      if (nextActiveTag) {
        if (activeTag) {
          activeTag.classList.remove("active");
        }
        nextActiveTag.classList.add("active");
        nextActiveTag.scrollIntoView({ block: "nearest" });
        searchEl.value = nextActiveTag.innerText;
      }
    });
  }
  async addTag(tag, x, y) {
    if (this.settings.debugMode) {
      console.log("Tag Buddy add");
      console.log(x, y, tag);
    }
    let fileContent;
    let file;
    const clickedTextObj = this.getClickedTextObjFromDoc(x, y);
    const clickedText = clickedTextObj == null ? void 0 : clickedTextObj.text;
    const clickedTextIndex = clickedTextObj == null ? void 0 : clickedTextObj.index;
    const clickedTextEl = clickedTextObj == null ? void 0 : clickedTextObj.el;
    let contentSourceType = null;
    let summaryEl;
    let embedEl;
    if (clickedTextObj) {
      summaryEl = clickedTextEl.closest(".tag-summary-paragraph");
      embedEl = clickedTextEl.closest(".markdown-embed");
      if (summaryEl) {
        file = await this.getSummaryFile(summaryEl);
        fileContent = await this.app.vault.read(file);
        contentSourceType = "plugin-summary";
      } else if (embedEl) {
        file = await this.getEmbedFile(embedEl);
        fileContent = await this.app.vault.read(file);
        contentSourceType = "native-embed";
      } else {
        file = await this.app.workspace.getActiveFile();
        fileContent = await this.app.vault.read(file);
        contentSourceType = "active";
      }
    } else {
      new import_obsidian2.Notice("\u26A0\uFE0F Can't find text position or area too busy.\nTry a another text area.");
      return;
    }
    if (clickedText) {
    } else {
      new import_obsidian2.Notice("\u26A0\uFE0F Can't add tag.\nTry a different text area.");
      return;
    }
    const escapedClickedText = this.escapeRegExp(clickedText);
    const regex = new RegExp(escapedClickedText, "g");
    const matches = fileContent.match(regex);
    if (matches && matches.length > 1) {
      new import_obsidian2.Notice("\u26A0\uFE0F Can't add tag: Clicked text repeated in note. Try a another text block.");
      return;
    } else if (matches && matches.length === 0 || !matches) {
      new import_obsidian2.Notice("\u26A0\uFE0F Can't find text position or area too busy.\nTry a another text area.");
      return;
    }
    if (!this.settings.lockRecentTags)
      this.saveRecentTag(tag);
    const startIndex = regex.exec(fileContent).index;
    const endIndex = startIndex + clickedText.length - 1;
    const clickedWordObj = this.getWordObjFromString(clickedText, clickedTextIndex);
    const clickedWord = clickedWordObj.text;
    const clickedWordIndex = clickedWordObj.index;
    const newContent = this.insertTextInString(tag, fileContent, startIndex + clickedWordIndex);
    await this.app.vault.modify(file, newContent);
    if (contentSourceType == "plugin-summary") {
      const summaryContainer = summaryEl.closest(".tag-summary-block");
      this.updateSummary(summaryContainer);
    }
    setTimeout(async () => {
      this.processTags();
    }, 200);
  }
  replaceTextInString(replaceText, sourceText, newText, all = false) {
    const regex = new RegExp(this.escapeRegExp(replaceText), all ? "gi" : "i");
    return sourceText.replace(regex, newText).trim();
  }
  // I removed .trim() from the before and after to fix the add bug.
  insertTextInString(newText, sourceText, charPos) {
    return sourceText.substring(0, charPos) + " " + newText + " " + sourceText.substring(charPos);
  }
  removeTextFromString(removeText, sourceText, all = false) {
    const regex = new RegExp(this.escapeRegExp(removeText), all ? "gi" : "i");
    return sourceText.replace(regex, "").trim();
  }
  getWordObjFromString(sourceText, offset) {
    let wordRegex = /[^\s]+(?=[.,:!?]?(\s|$))/g;
    let match;
    let index;
    let word = null;
    while ((match = wordRegex.exec(sourceText)) !== null) {
      if (match.index <= offset && offset <= match.index + match[0].length) {
        word = match[0];
        index = match.index;
        break;
      }
    }
    return { text: word, index };
  }
  getClickedTextObjFromDoc(x, y, minNodeLength = 10) {
    let range, nodeText, offset;
    if (document.caretRangeFromPoint) {
      range = document.caretRangeFromPoint(x, y);
      if (range.startContainer.nodeType === Node.TEXT_NODE) {
        nodeText = range.startContainer.nodeValue.trim();
      } else {
        return null;
      }
      offset = range.startOffset;
    }
    if (nodeText.length < minNodeLength) {
      return null;
    }
    return { text: nodeText, index: offset, el: range.startContainer.parentNode };
  }
  /*async getClickedWord(e) {
  		//Get the click position
  	    let x = e.clientX, y = e.clientY;
  
  	    // Get the word under the click position
  	    let range, textNode, offset;
  
  	    // This method is better supported and gives us a range object
  	    if (document.caretRangeFromPoint) {
  	        range = document.caretRangeFromPoint(x, y);
  	        textNode = range.startContainer;
  	        offset = range.startOffset;
  	    }
  	    //console.log(textNode)
  
  	    // LATER, double check different notes types and around the interface
  
  	    // Check if we have a valid text node
  	    if (textNode && textNode.nodeType === Node.TEXT_NODE) {
  	        // Get the whole text of the clicked node
  	        let fullText = textNode.textContent;
  
  	        // LATER: if the word end in valid punctuation, add a space between word and punctuation it when adding the hash.
  	        // LATER, have predefined tags we can insert with different key modifiers on click
  	        // like, #todo or #inbox #later
  
  	        let wordRegex = /[^\s]+(?=[.,:!?]?(\s|$))/g;
  			let match;
  			let clickedWord = null;
  	        while ((match = wordRegex.exec(fullText)) !== null) {
  	            if (match.index <= offset && offset <= match.index + match[0].length) {
  	                // This is our word
  	                if (!/^[^\p{L}\p{N}]/u.test(match[0]) &&        // Not starting with any non-alphanumeric
  	                    !/[^\p{L}\p{N}\s.,:!?]/u.test(match[0]) &&	// Not containing other than allowed chars
  	                    !/[.,:!?](?=[^\s$])/u.test(match[0])) {     // If ends with punctuation, following character must be whitespace or end of string
  	                    clickedWord = match[0];
  	                    break;
  	                }
  	            }
  	        }
  
  
  			let activeView = await this.app.workspace.getActiveViewOfType(MarkdownView);
  
  			
  		    let editor = activeView.sourceMode.cmEditor;  // Get the CodeMirror instance
  		    let fullNote = editor.getValue(); 
  
  			const globalStartPosition = fullNote.indexOf(textNode.textContent);
  
  			if (globalStartPosition !== -1) {
  			    // Assuming the click was right at the end of the word
  			    let wordEndPosition = globalStartPosition + offset;
  
  			    // Traverse backward until a space or start
  			    while (wordEndPosition > 0 && fullNote[wordEndPosition] !== ' ' && fullNote[wordEndPosition] !== '\n') {
  			        wordEndPosition--;
  			    }
  
  			    wordEndPosition++;
  
  			    // Insert hash at wordEndPosition
  			    const updatedNote = [fullNote.slice(0, wordEndPosition), '#', fullNote.slice(wordEndPosition)].join('');
  			    console.log(updatedNote);
  			}
  
  
  		}
  
  		// LATER, to make this work in embeds and summaries
  		// and avoid adding when in the summary empty block. or other code blocks. maybe this check is earlier.
  	}*/
  escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
  getTagsFromApp() {
    const tagsObject = this.app.metadataCache.getTags();
    const tagsArray = Object.entries(tagsObject);
    tagsArray.sort((a, b) => b[1] - a[1]);
    const recentTags = this.getRecentTags();
    if (recentTags.length > 0) {
      const recentTagsAsTuples = recentTags.map((tag) => [tag, 0]);
      const recentAndAllTags = recentTagsAsTuples.concat(tagsArray);
      return recentAndAllTags.map(([tag, _]) => tag.replace(/^#/, ""));
    } else {
      return tagsArray.map(([tag, _]) => tag.replace(/^#/, ""));
    }
  }
  getTagElement(paragraphEl, tagText) {
    const els = paragraphEl.querySelectorAll(".tag");
    let tagElText = "";
    let tagElHasSub;
    for (let el of els) {
      tagElText = el.innerText.trim();
      if (tagElText === tagText) {
        return el;
      }
    }
    console.warn(`Element with text "${tagText}" not found`);
    return null;
  }
  ctrlCmdKey(event) {
    const isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
    if (isMac)
      return event.metaKey;
    else
      return event.ctrlKey;
  }
  debounce(func, wait) {
    let timeout;
    return function(...args) {
      const context = this;
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        func.apply(context, args);
      }, wait);
    };
  }
};
var TempComponent = class extends import_obsidian2.Component {
  onload() {
  }
  onunload() {
  }
};
var DoubleTapHandler = class {
  constructor(plugin, element, callback) {
    this.plugin = plugin;
    this.element = element;
    this.callback = callback;
    this.lastTap = 0;
    this.plugin.registerDomEvent(this.element, "touchend", this.handleTouchEnd.bind(this), true);
  }
  handleTouchEnd(event) {
    const currentTime = new Date().getTime();
    const tapLength = currentTime - this.lastTap;
    clearTimeout(this.timeout);
    if (tapLength < 500 && tapLength > 0) {
      this.callback(event);
    } else {
      this.timeout = setTimeout(() => {
        clearTimeout(this.timeout);
      }, 500);
    }
    this.lastTap = currentTime;
  }
};
var PressAndHoldHandler = class {
  constructor(plugin, element, callback, duration = 600) {
    this.plugin = plugin;
    this.element = element;
    this.callback = callback;
    this.duration = duration;
    this.timeout = null;
    this.plugin.registerDomEvent(this.element, "touchstart", this.handleTouchStart.bind(this), true);
    this.plugin.registerDomEvent(this.element, "touchend", this.handleTouchEnd.bind(this), true);
  }
  handleTouchStart(event) {
    this.timeout = setTimeout(() => {
      this.callback(event);
      this.timeout = null;
    }, this.duration);
  }
  handleTouchEnd(event) {
    if (this.timeout) {
      clearTimeout(this.timeout);
      this.timeout = null;
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
