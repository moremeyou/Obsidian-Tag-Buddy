/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TagBuddy
});
module.exports = __toCommonJS(main_exports);

// settings.ts
var import_obsidian = require("obsidian");
var TBSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Override native tag search on click").setDesc("Toggle off to use cmd+click to remove tag.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.removeOnClick).onChange(async (value) => {
        this.plugin.settings.removeOnClick = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Convert to tag text with opt+click (removes #)").setDesc("Toggle off to use opt+click to perform native tag search.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.optToConvert).onChange(async (value) => {
        this.plugin.settings.optToConvert = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Remove child tags first").setDesc("Toggle off to use shift+click to remove child tags fitst.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.removeChildTagsFirst).onChange(async (value) => {
        this.plugin.settings.removeChildTagsFirst = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Mobile tag search").setDesc("Toggle on to restore mobile native tag search on tap. Tag removal will then use press+hold.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.mobileTagSearch).onChange(async (value) => {
        this.plugin.settings.mobileTagSearch = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show mobile notices").setDesc("Toggle off to hide notices when editing or removing a tag.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.mobileNotices).onChange(async (value) => {
        this.plugin.settings.mobileNotices = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Debug mode").setDesc("Output to console.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.debugMode).onChange(async (value) => {
        this.plugin.settings.debugMode = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// main.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  removeOnClick: true,
  // when true, cmd is needed when clicking to remove the tag
  removeChildTagsFirst: true,
  // use shift when false
  optToConvert: true,
  // when false, clicking tag will do nothing
  mobileTagSearch: false,
  // toggle on use double tap for search. press+hold will then remove.
  mobileNotices: true,
  debugMode: false
};
var TagBuddy = class extends import_obsidian2.Plugin {
  onunload() {
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new TBSettingsTab(this.app, this));
    console.log("Tag Buddy Plugin loaded on " + (this.app.isMobile ? "mobile at " : "desktop at ") + new Date().toUTCString().substring(17));
    this.app.workspace.onLayoutReady(async () => {
      setTimeout(async () => {
        this.processTags();
      }, 1e3);
      this.registerEvent(this.app.on("layout-change", (event) => {
        setTimeout(async () => {
          this.processTags();
        }, 300);
      }));
      this.registerEvent(this.app.on("file-open", async (event) => {
        setTimeout(async () => {
          this.processTags();
        }, 1e3);
      }));
      this.injectStyles();
      if (!this.app.isMobile) {
        this.registerDomEvent(document, "click", this.onClickEvent.bind(this), true);
      } else {
        this.registerDomEvent(document, "click", (e) => {
          const isTag = e.target.classList.contains("tag");
          if (isTag && !this.settings.mobileTagSearch) {
            e.stopPropagation();
          }
        }, true);
        new PressAndHoldHandler(this, document, this.onClickEvent.bind(this));
        new DoubleTapHandler(this, document, this.onClickEvent.bind(this));
      }
    });
    this.registerMarkdownCodeBlockProcessor("tag-summary", this.summaryCodeBlockProcessor.bind(this));
  }
  async getClickedWord(e) {
    let x = e.clientX, y = e.clientY;
    let range, textNode, offset;
    if (document.caretRangeFromPoint) {
      range = document.caretRangeFromPoint(x, y);
      textNode = range.startContainer;
      offset = range.startOffset;
    }
    if (textNode && textNode.nodeType === Node.TEXT_NODE) {
      let fullText = textNode.textContent;
      let wordRegex = /[^\s]+(?=[.,:!?]?(\s|$))/g;
      let match;
      let clickedWord = null;
      while ((match = wordRegex.exec(fullText)) !== null) {
        if (match.index <= offset && offset <= match.index + match[0].length) {
          if (!/^[^\p{L}\p{N}]/u.test(match[0]) && // Not starting with any non-alphanumeric
          !/[^\p{L}\p{N}\s.,:!?]/u.test(match[0]) && // Not containing other than allowed chars
          !/[.,:!?](?=[^\s$])/u.test(match[0])) {
            clickedWord = match[0];
            break;
          }
        }
      }
      let activeView = await this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      let editor = activeView.sourceMode.cmEditor;
      let fullNote = editor.getValue();
      const globalStartPosition = fullNote.indexOf(textNode.textContent);
      if (globalStartPosition !== -1) {
        let wordEndPosition = globalStartPosition + offset;
        while (wordEndPosition > 0 && fullNote[wordEndPosition] !== " " && fullNote[wordEndPosition] !== "\n") {
          wordEndPosition--;
        }
        wordEndPosition++;
        const updatedNote = [fullNote.slice(0, wordEndPosition), "#", fullNote.slice(wordEndPosition)].join("");
        console.log(updatedNote);
      }
    }
  }
  async onClickEvent(event) {
    const target = event.target;
    const view = await this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (!view && target.matches(".tag")) {
      new import_obsidian2.Notice("Tag Buddy: Can't edit tag. Unsupported view type. Try again within that note.");
      return;
    }
    if (view) {
      if (view.getMode() != "preview")
        return;
    } else {
    }
    if (!this.app.isMobile) {
      if (this.settings.removeOnClick && this.ctrlCmdKey(event) || !this.settings.removeOnClick && !this.ctrlCmdKey(event)) {
        return;
      } else if (event.altKey && !this.settings.optToConvert) {
        return;
      }
    } else {
      if (this.settings.mobileTagSearch && event.type == "touchend") {
        return;
      }
    }
    if (target && target.matches(".tag")) {
      if (this.settings.removeOnClick || !this.settings.removeOnClick && this.ctrlCmdKey(event)) {
        event.stopPropagation();
        event.preventDefault();
      }
      const clickedTag = target.closest(".tag");
      const tag = clickedTag.innerText;
      let tagIndex = clickedTag.getAttribute("md-index");
      let tagFile = clickedTag.getAttribute("file-source");
      if (tagFile) {
        this.editTag(target, event);
      } else {
        setTimeout(async () => {
          tagIndex = clickedTag.getAttribute("md-index");
          tagFile = clickedTag.getAttribute("file-source");
          this.editTag(target, event);
        }, 300);
      }
    } else if (!view && target.matches(".tag")) {
      new import_obsidian2.Notice("Tag Buddy: Can't edit tag. Might be in an unsupported view type.");
    }
  }
  async editTag(tagEl, event) {
    const index = tagEl.getAttribute("md-index");
    const filePath = tagEl.getAttribute("file-source");
    if (this.settings.debugMode)
      console.log("Tag Buddy edit tag: " + tagEl.innerText + "\nIn file: " + filePath);
    if (filePath) {
      const file = await this.validateFilePath(filePath);
      let fileContent;
      let fileContentBackup;
      const tag = tagEl.innerText.trim();
      try {
        fileContent = await this.app.vault.read(file);
        fileContentBackup = fileContent;
      } catch (error) {
        new import_obsidian2.Notice("Tag Buddy file read error:\n" + error.message);
        return;
      }
      let safeToEmptyFile = false;
      const tagRegex = /^\s*#(\w+)\s*$/;
      if (tagRegex.test(fileContent.trim())) {
        safeToEmptyFile = true;
      }
      let beforeTag = fileContent.substring(0, index);
      let afterTag = fileContent.substring(Number(index) + Number(tag.length) + 1);
      if (fileContent[index] === "\n") {
        beforeTag += "\n";
      }
      let newContent = "";
      if (!event) {
        newContent = beforeTag + afterTag;
      } else if (event.altKey || event.type == "touchstart" && !this.settings.mobileTagSearch) {
        const noHash = tag.substring(1);
        newContent = beforeTag + (!beforeTag.endsWith(" ") ? " " : "") + noHash + afterTag;
        if (this.app.isMobile && this.settings.mobileNotices) {
          new import_obsidian2.Notice("Tag Buddy: " + tag + " converted to text.");
        }
      } else if (event.type == "touchend" || this.settings.mobileTagSearch || this.ctrlCmdKey(event) && !this.settings.removeOnClick || !this.ctrlCmdKey(event) && this.settings.removeOnClick) {
        let parentTag = "";
        if (tag.includes("/") && (this.settings.removeChildTagsFirst || event.shiftKey && !this.settings.removeChildTagsFirst)) {
          let parts = tag.split("/");
          const removedChild = parts.pop();
          parentTag = parts.join("/");
          newContent = beforeTag + (!beforeTag.endsWith(" ") ? " " : "") + parentTag + afterTag;
          if (this.app.isMobile && this.settings.mobileNotices) {
            new import_obsidian2.Notice("Tag Buddy: '" + removedChild + "' removed from parent tag.");
          }
        } else {
          newContent = beforeTag + afterTag;
          if (this.app.isMobile && this.settings.mobileNotices) {
            new import_obsidian2.Notice("Tag Buddy: " + tag + " removed.");
          }
        }
      }
      if (newContent == "" && !safeToEmptyFile || this.contentChangedTooMuch(fileContentBackup, newContent, tag, 2)) {
        new import_obsidian2.Notice("Tag Buddy: File change error.");
        newContent = fileContentBackup;
      } else if (newContent == "" && safeToEmptyFile) {
        new import_obsidian2.Notice("Tag Buddy: Tag removed. The note is empty.");
      }
      try {
        await this.app.vault.modify(file, newContent);
        if (tagEl.getAttribute("type") == "plugin-summary") {
          setTimeout(async () => {
            this.updateSummaryParagraph(tagEl);
            setTimeout(async () => {
              this.processTags();
            }, 200);
          }, 150);
        } else {
          setTimeout(async () => {
            this.processTags();
          }, 50);
        }
      } catch (error) {
        try {
          const backupFileName = String(file.name.substring(0, file.name.indexOf(".md")) + " BACKUP.md");
          vault.create("", backupFileName, fileContentBackup);
          new import_obsidian2.Notice("Tag Buddy note editing error: " + error.message + "\n" + backupFileName + " saved to vault root.");
        } catch (error2) {
          navigator.clipboard.writeText(fileContentBackup);
          new import_obsidian2.Notice("Tag Buddy note editing error: " + error2.message + "\nNote content copied to clipboard.");
        }
      }
    } else {
      new import_obsidian2.Notice("Tag Buddy error: Can't identify tag location.");
    }
  }
  updateSummaryParagraph(tagEl) {
    const summaryContainer = tagEl.closest(".summary");
    const tagsStr = summaryContainer.getAttribute("codeblock-tags");
    const tags = tagsStr ? tagsStr.split(",") : [];
    const tagsIncludeStr = summaryContainer.getAttribute("codeblock-tags-include");
    const tagsInclude = tagsIncludeStr ? tagsIncludeStr.split(",") : [];
    const tagsExcludeStr = summaryContainer.getAttribute("codeblock-tags-exclude");
    const tagsExclude = tagsExcludeStr ? tagsExcludeStr.split(",") : [];
    const sectionsStr = summaryContainer.getAttribute("codeblock-sections");
    const sections = sectionsStr ? sectionsStr.split(",") : [];
    this.createSummary(summaryContainer, tags, tagsInclude, tagsExclude, sections);
  }
  async processTags() {
    if (this.settings.debugMode)
      console.log("Tag Buddy: Processing tags.");
    const view = await this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    const activeNoteContainer = await this.app.workspace.activeLeaf.containerEl;
    const activeFile = await this.app.workspace.getActiveFile();
    const fileContent = await app.vault.read(activeFile);
    const activeFileTagElements = await activeNoteContainer.querySelectorAll(".mod-active .tag:not(.markdown-embed .tag):not(.summary .tag)");
    const activeFileTags = await this.getMarkdownTags(activeFile, fileContent);
    if (activeFileTags.length > 0)
      this.assignMarkdownTags(activeFileTags, activeFileTagElements, 0, "active");
    this.processEmbeds(activeNoteContainer);
  }
  async getMarkdownTags(file, fileContent) {
    const tagPositions = [];
    let match;
    const regex = /(?:^|\s)#[^\s#]+|```/g;
    let insideCodeBlock = false;
    while ((match = regex.exec(fileContent)) !== null) {
      if (match[0].trim() === "```") {
        insideCodeBlock = !insideCodeBlock;
        continue;
      }
      if (insideCodeBlock)
        continue;
      const tag = match[0].trim();
      if (fileContent.slice(match.index, match.index + tag.length + 2).endsWith("]]")) {
        continue;
      }
      tagPositions.push({ tag, index: match.index, source: file.name });
    }
    return tagPositions;
  }
  assignMarkdownTags(tagPositions, tagElements, startIndex, type) {
    let tagEl;
    const tagElArray = Array.from(tagElements);
    let tagElIndex = 0;
    tagPositions.forEach((tagPos, index) => {
      if (tagPositions[index].index >= startIndex) {
        tagEl = tagElArray[tagElIndex];
        if (tagEl) {
          tagEl.setAttribute("md-index", tagPositions[index].index);
          tagEl.setAttribute("file-source", tagPositions[index].source);
          tagEl.setAttribute("type", type);
          tagElIndex++;
        }
      }
    });
    return tagElArray;
  }
  async processEmbeds(element) {
    const embeds = await element.querySelectorAll(".summary, .markdown-embed");
    embeds.forEach(async (embed) => {
      if (embed.classList.contains("summary")) {
        this.processTagSummary(embed);
      } else if (embed.classList.contains("markdown-embed")) {
        this.processNativeEmbed(embed);
        if (Array.from(embed.querySelectorAll(".summary")).length > 0) {
          this.processTagSummary(embed);
        }
      } else {
      }
    });
  }
  async processNativeEmbed(embed) {
    const linkElement = embed.getAttribute("src");
    let filePath = embed.getAttribute("src");
    const linkArray = filePath.split("#");
    filePath = linkArray[0].trim() + ".md";
    const file = await this.validateFilePath(filePath);
    if (file) {
      const fileContent = await app.vault.read(file);
      const embededTagFile = await this.getMarkdownTags(file, fileContent);
      const tempComponent = new TempComponent();
      const tempContainerHTML = createEl("div");
      await import_obsidian2.MarkdownRenderer.renderMarkdown(fileContent, tempContainerHTML, file.path, tempComponent);
      const innerText = embed.querySelector(".markdown-embed-content").innerText;
      const startIndex = tempContainerHTML.innerText.indexOf(innerText);
      this.assignMarkdownTags(embededTagFile, embed.querySelectorAll(".tag"), startIndex, "native-embed");
    }
  }
  async processTagSummary(embed) {
    let summaryBlocks = embed.querySelectorAll("blockquote");
    summaryBlocks.forEach(async (block, index) => {
      var _a, _b;
      const filePath = block.getAttribute("file-source");
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file) {
        const fileContent = await app.vault.read(file);
        const embededTagFile = await this.getMarkdownTags(file, fileContent);
        const tempBlock = block.cloneNode(true);
        (_a = tempBlock.querySelector(".tagsummary-item-title")) == null ? void 0 : _a.remove();
        (_b = tempBlock.querySelector(".tagsummary-buttons")) == null ? void 0 : _b.remove();
        const blockText = tempBlock.innerText;
        const startIndex = fileContent.indexOf(blockText);
        this.assignMarkdownTags(embededTagFile, block.querySelectorAll(".tag"), startIndex, "plugin-summary");
      }
    });
  }
  //////////////// CUSTOM TAG-SUMMARY IMPLEMENTATION //////////////
  // ORIGINAL CODE BY https://github.com/macrojd/tag-summary //////
  /////////////////////////////////////////////////////////////////
  async summaryCodeBlockProcessor(source, el, ctx) {
    let tags = Array();
    let include = Array();
    let exclude = Array();
    let sections = Array();
    const rows = source.split("\n").filter((row) => row.length > 0);
    rows.forEach((line) => {
      if (line.match(/^\s*tags:[\p{L}0-9_\-/# ]+$/gu)) {
        const content = line.replace(/^\s*tags:/, "").trim();
        let list = content.split(/\s+/).map((tag) => tag.trim());
        list = list.filter((tag) => {
          if (tag.match(/^#[\p{L}]+[^#]*$/u)) {
            return true;
          } else {
            return false;
          }
        });
        tags = list;
      }
      if (line.match(/^\s*include:[\p{L}0-9_\-/# ]+$/gu)) {
        const content = line.replace(/^\s*include:/, "").trim();
        let list = content.split(/\s+/).map((tag) => tag.trim());
        list = list.filter((tag) => {
          if (tag.match(/^#[\p{L}]+[^#]*$/u)) {
            return true;
          } else {
            return false;
          }
        });
        include = list;
      }
      if (line.match(/^\s*exclude:[\p{L}0-9_\-/# ]+$/gu)) {
        const content = line.replace(/^\s*exclude:/, "").trim();
        let list = content.split(/\s+/).map((tag) => tag.trim());
        list = list.filter((tag) => {
          if (tag.match(/^#[\p{L}]+[^#]*$/u)) {
            return true;
          } else {
            return false;
          }
        });
        exclude = list;
      }
      if (line.match(/^\s*sections:[\p{L}0-9_\-/#, ]+$/gu)) {
        const content = line.replace(/^\s*sections:/, "").trim();
        let list = content.split(",").map((sec) => sec.trim());
        sections = list;
      }
    });
    if (tags.length > 0 || include.length > 0) {
      await this.createSummary(el, tags, include, exclude, sections, ctx.sourcePath);
    } else {
      this.createEmptySummary(el);
    }
  }
  createEmptySummary(element) {
    const container = createEl("div");
    container.setAttribute("class", "summary");
    container.createEl("span", {
      attr: { style: "color: var(--text-error) !important;" },
      text: "There are no files with blocks that match the specified tags."
    });
    element.replaceWith(container);
  }
  async createSummary(element, tags, include, exclude, sections, filePath) {
    const activeFile = await this.app.workspace.getActiveFile();
    const validTags = tags.concat(include);
    const tempComponent = new TempComponent();
    const summaryContainer = createEl("div");
    summaryContainer.setAttribute("class", "summary");
    let listFiles = this.app.vault.getMarkdownFiles();
    listFiles = listFiles.filter((file) => {
      const cache = app.metadataCache.getFileCache(file);
      const tagsInFile = (0, import_obsidian2.getAllTags)(cache);
      if (validTags.some((value) => tagsInFile.includes(value))) {
        return true;
      }
      return false;
    });
    listFiles = listFiles.sort((file1, file2) => {
      if (file1.path < file2.path) {
        return -1;
      } else if (file1.path > file2.path) {
        return 1;
      } else {
        return 0;
      }
    });
    let listContents = await this.readFiles(listFiles);
    let summary = "";
    listContents.forEach((item) => {
      const fileName = item[0].name.replace(/.md$/g, "");
      const filePath2 = item[0].path;
      if (activeFile.name == item[0].name) {
        return;
      }
      let listParagraphs = Array();
      const blocks = item[1].split(/\n\s*\n/).filter((row) => row.trim().length > 0);
      blocks.forEach((paragraph) => {
        let valid = false;
        let listTags = paragraph.match(/#[\p{L}0-9_\-/#]+/gu);
        if (listTags != null && listTags.length > 0) {
          if (!paragraph.contains("```")) {
            valid = this.isValidText(listTags, tags, include, exclude);
          }
        }
        if (valid) {
          let listItems = Array();
          let itemText = "";
          paragraph.split("\ns*\n").forEach((line) => {
            let isList = false;
            isList = line.search(/(\s*[\-\+\*]){1}|([0-9]\.){1}\s+/) != -1;
            if (!isList) {
              listParagraphs.push(line);
              itemText = "";
            } else {
              line.split("\n").forEach((itemLine) => {
                let level = 0;
                const endIndex = itemLine.search(/[\-\+\*]{1}|([0-9]\.){1}\s+/);
                const tabText = itemLine.slice(0, endIndex);
                const tabs = tabText.match(/\t/g);
                if (tabs) {
                  level = tabs.length;
                }
                if (level == 0) {
                  if (itemText != "") {
                    listItems.push(itemText);
                    itemText = "";
                  }
                  itemText = "" + itemText.concat(itemLine + "\n");
                } else if (level > 0 && itemText != "") {
                  itemText = itemText.concat(itemLine + "\n");
                }
              });
            }
          });
          if (itemText != "") {
            listItems.push(itemText);
            itemText = "";
          }
          listItems.forEach((line) => {
            listTags = line.match(/#[\p{L}0-9_\-/#]+/gu);
            if (listTags != null && listTags.length > 0) {
              if (this.isValidText(listTags, tags, include, exclude)) {
                listParagraphs.push(line);
              }
            }
          });
        }
      });
      listParagraphs.forEach(async (paragraph) => {
        var _a;
        paragraph += "\n";
        var regex = new RegExp();
        var tagText = new String();
        var tagSection = null;
        tags.forEach((tag) => {
          tagText = tag.replace("#", "\\#");
          regex = new RegExp(`${tagText}(\\W|$)`, "g");
          if (paragraph.match(regex) != null) {
            tagSection = tag;
          }
        });
        const buttonContainer = createEl("div");
        buttonContainer.setAttribute("class", "tagsummary-buttons");
        const paragraphContent = createEl("blockquote");
        paragraphContent.setAttribute("file-source", filePath2);
        const blockLink = paragraph.match(/\^[\p{L}0-9_\-/^]+/gu);
        let link;
        if (blockLink) {
          link = "[[" + filePath2 + "#" + blockLink + "|" + fileName + "]]";
          if (this.app.plugins.getPlugin("quickadd")) {
            let count = 0;
            sections.forEach((sec) => {
              if (count++ > 3)
                return;
              buttonContainer.appendChild(this.makeCopyToButton(paragraph, sec, paragraphContent, tagSection, filePath2 + "#" + blockLink));
            });
          }
          buttonContainer.appendChild(this.makeCopyButton(paragraph.trim()));
          buttonContainer.appendChild(this.makeRemoveTagButton(paragraphContent, tagSection, filePath2 + "#" + blockLink));
        } else {
          link = "[[" + filePath2 + "|" + fileName + "]]";
          if (this.app.plugins.getPlugin("quickadd")) {
            let count = 0;
            sections.forEach((sec) => {
              if (count++ > 3)
                return;
              buttonContainer.appendChild(this.makeCopyToButton(paragraph, sec, paragraphContent, tagSection, filePath2));
            });
          }
          buttonContainer.appendChild(this.makeCopyButton(paragraph.trim()));
          buttonContainer.appendChild(this.makeRemoveTagButton(paragraphContent, tagSection, filePath2));
        }
        paragraph = "**" + link + "**" + paragraph;
        paragraph += "\n\n";
        summary += paragraph;
        await import_obsidian2.MarkdownRenderer.renderMarkdown(paragraph, paragraphContent, (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path, tempComponent);
        const titleEl = createEl("div");
        titleEl.setAttribute("class", "tagsummary-item-title");
        titleEl.appendChild(paragraphContent.querySelector("strong").cloneNode(true));
        paragraphContent.appendChild(buttonContainer);
        paragraphContent.querySelector("strong").replaceWith(titleEl);
        summaryContainer.appendChild(paragraphContent);
      });
    });
    if (summary != "") {
      summaryContainer.setAttribute("codeblock-tags", tags.join(","));
      summaryContainer.setAttribute("codeblock-tags-include", include.length > 0 ? include.join(",") : "");
      summaryContainer.setAttribute("codeblock-tags-exclude", exclude.length > 0 ? exclude.join(",") : "");
      summaryContainer.setAttribute("codeblock-sections", sections.length > 0 ? sections.join(",") : "");
      element.replaceWith(summaryContainer);
    } else {
      this.createEmptySummary(element);
    }
  }
  /////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////
  makeCopyToButton(content, section, paragraph, tag, filePath) {
    const quickAddPlugin = this.app.plugins.plugins.quickadd.api;
    const button = this.makeButton(" \u274F   " + section, (e) => {
      e.stopPropagation();
      const sectionElObj = this.getSectionTitleWithHashes(section);
      const contentAsList = "- " + content.trim() + "\n";
      if (sectionElObj) {
        if (e.metaKey) {
          quickAddPlugin.executeChoice("Copy To Section", { section: sectionElObj.md, content: this.removeTagFromString(contentAsList, tag) + "\n" });
          this.editTag(this.getTagElement(paragraph, tag));
          const notice = new import_obsidian2.Notice("Copied to " + section + " and " + tag + " removed.\n\u{1F517} Open source note.", 5e3);
          this.registerDomEvent(notice.noticeEl, "click", (e2) => {
            this.app.workspace.openLinkText(filePath, "");
          });
        } else {
          quickAddPlugin.executeChoice("Copy To Section", { section: sectionElObj.md, content: contentAsList });
          new import_obsidian2.Notice("Copied to " + section + ".");
        }
      } else {
        new import_obsidian2.Notice("Tag Buddy can't find " + section + ". Might not be rendered. Use \u274F to copy paragraph.");
      }
    });
    button.title = "Copy paragraph to " + section + ".\n(CTRL+CLICK to remove tag and copy.";
    return button;
  }
  makeCopyButton(content) {
    const button = this.makeButton(" \u274F ", (e) => {
      e.stopPropagation();
      navigator.clipboard.writeText(content);
      new import_obsidian2.Notice("Copied to clipboard.");
    });
    button.title = "Copy paragraph to clipboard.";
    return button;
  }
  makeRemoveTagButton(paragraph, tag, filePath) {
    const button = this.makeButton(" \u2317\u02E3 ", (e) => {
      e.stopPropagation();
      const notice = new import_obsidian2.Notice("\u{1F516} " + tag + " removed from paragraph.\n\u{1F517} Open source note.", 5e3);
      this.editTag(this.getTagElement(paragraph, tag));
      this.registerDomEvent(notice.noticeEl, "click", (e2) => {
        this.app.workspace.openLinkText(filePath, "");
      });
    });
    button.title = "Remove " + tag + " from paragraph.";
    return button;
  }
  makeButton(lable, clickFn, classId = "tagsummary-button") {
    const button = document.createElement("button");
    button.innerText = lable;
    button.className = classId;
    this.registerDomEvent(button, "click", clickFn.bind(this));
    return button;
  }
  removeTagFromString(inputText, hashtagToRemove) {
    const regex = new RegExp("\\s?" + hashtagToRemove + "\\b", "gi");
    return inputText.replace(regex, "").trim();
  }
  getSectionTitleWithHashes(sectionTitle) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (!activeView) {
      console.log("No active markdown view found.");
      return null;
    }
    const contentEl = activeView.contentEl;
    const headings = contentEl.querySelectorAll("h1, h2, h3, h4, h5, h6");
    for (const heading of headings) {
      if (heading.textContent.trim() === sectionTitle.trim()) {
        const level = parseInt(heading.tagName.substr(1), 10);
        const hashes = "#".repeat(level);
        return { md: `${hashes} ${sectionTitle}`, el: heading };
      }
    }
    console.log(`Section "${sectionTitle}" not found.`);
    return null;
  }
  async readFiles(listFiles) {
    let list = [];
    for (let t = 0; t < listFiles.length; t += 1) {
      const file = listFiles[t];
      let content = await this.app.vault.cachedRead(file);
      list.push([file, content]);
    }
    return list;
  }
  isValidText(listTags, tags, include, exclude) {
    let valid = true;
    if (tags.length > 0) {
      valid = valid && tags.some((value) => listTags.includes(value));
    }
    if (include.length > 0) {
      valid = valid && include.every((value) => listTags.includes(value));
    }
    if (valid && exclude.length > 0) {
      valid = !exclude.some((value) => listTags.includes(value));
    }
    return valid;
  }
  async validateFilePath(filePath) {
    const matchingFiles = await app.vault.getFiles().filter((file) => file.name === filePath);
    if (matchingFiles.length === 1) {
      const filePath2 = matchingFiles[0].path;
      const file = await this.app.vault.getAbstractFileByPath(filePath2);
      return file;
    } else if (matchingFiles.length > 1) {
      new import_obsidian2.Notice("Tag Buddy: Multiple files found with the same name. Can't safely edit tag.");
      return null;
    } else {
      new import_obsidian2.Notice("Tag Buddy: No file found. Try again, or this tag might be in an unsupported embed type.");
      return null;
    }
  }
  contentChangedTooMuch(original, modified, tag, buffer = 5) {
    const expectedChange = tag.length;
    const threshold = expectedChange + buffer;
    const actualChange = Math.abs(original.length - modified.length);
    return actualChange > threshold;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // fuck.this.function
  /*cleanString(input) {
  		let cleanedStr;
  
  		// Check if input is a DOM element
  		if (input instanceof Element) {
  			//console.log('input is: Element');
  			cleanedStr = input.outerHTML.trim();
  		} else {
  			//console.log('input is: String');
  			cleanedStr = input.trim();
  		}
  
  		// Whitespace normalization
  		//cleanedStr = cleanedStr.replace(/\s+/g, ' ');
  
  		// Remove <br> elements
  		//cleanedStr = cleanedStr.replace(/<br>/g, ' ');
  
  		// Remove blockquote tags but keep their content
  		//cleanedStr = cleanedStr.replace(/<\/?blockquote>/g, '');
  
  		// Remove blockquote tags but keep their content
  		//cleanedStr = cleanedStr.replace(/<\/?div>/g, '');
  
  		// Remove spaces between tags
  		//cleanedStr = cleanedStr.replace(/>\s+</g, '><');
  
  		// Whitespace normalization
  		cleanedStr = cleanedStr.replace(/\s+/g, ' ');
  
  		// HTML entity decoding
  		const textArea = document.createElement('textarea');
  		textArea.innerHTML = cleanedStr;
  		cleanedStr = textArea.value.trim();
  
  		// Optional: convert to lowercase
  		// cleanedStr = cleanedStr.toLowerCase();
  
  		return cleanedStr;
  	}*/
  async refreshView() {
    new import_obsidian2.Notice("Refresh view.");
    await app.workspace.activeLeaf.rebuildView();
  }
  injectStyles() {
    const styles = `
        .tagsummary-button {

            color: var(--text-primary);
            border: 1px solid var(--text-quote);  // Assuming this is the block quote color
            border-radius: var(--border-radius);
            padding: 2.5px 5px;  // Reduced padding
            font-size: 50%;  // Reduced font size
            transition: background-color 0.3s;
            margin: 0px 3px 0px 0px;
            min-width: 40px !important;

	       color: var(--link-color) !important;
	       border: 1px solid var(--link-color) !important; 
		   background-color: var(--background-primary) !important;
        }

        .tagsummary-button:hover {
            background-color: var(--link-color) !important;
            color: var(--background-secondary) !important;
        }

        .tagsummary-item-title {
            margin: 5px 0px
        }

        .tagsummary-buttons {
            /*float: right;*/
            text-align: right;
        }

	   @media only screen and (max-device-width: 480px), 
	       only screen and (max-width: 480px) and (orientation: landscape),
	       only screen and (max-device-width: 1024px), 
	       only screen and (min-width: 481px) and (max-width: 1024px) and (orientation: landscape) {
		   .tagsummary-button {
		       display: inline-block !important;
		       font-size: 12px !important;
		       padding: 5px 5px;
		       box-shadow: none;  /* remove shadows if they look off */
		       border-radius: 4px;
		       color: var(--link-color) !important;
		       border: 1px solid var(--link-color); 
		       width: auto !important;            /* auto adjusts width based on content */
    		   /*max-width: 60px !important;  */  
    		   max-height: 30px !important;
    		   min-width: 40px !important;
    		   white-space: nowrap;
    		   /*text-align: left !important;*/
    		   overflow: hidden;
    		   background-color: var(--background-primary) !important;
		   }
		}

    `;
    const styleSheet = document.createElement("style");
    styleSheet.type = "text/css";
    styleSheet.innerText = styles;
    styleSheet.id = "my-plugin-styles";
    document.head.appendChild(styleSheet);
  }
  getTagElement(paragraph, tagText) {
    const elements = paragraph.querySelectorAll(".tag");
    for (let element of elements) {
      if (element.innerText.trim() === tagText) {
        return element;
      }
    }
    console.warn(`Element with text "${tagText}" not found`);
    return null;
  }
  ctrlCmdKey(event) {
    const isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
    if (isMac)
      return event.metaKey;
    else
      return event.ctrlKey;
  }
};
var TempComponent = class extends import_obsidian2.Component {
  onload() {
  }
  onunload() {
  }
};
var DoubleTapHandler = class {
  constructor(plugin, element, callback) {
    this.plugin = plugin;
    this.element = element;
    this.callback = callback;
    this.lastTap = 0;
    this.plugin.registerDomEvent(this.element, "touchend", this.handleTouchEnd.bind(this), true);
  }
  handleTouchEnd(event) {
    const currentTime = new Date().getTime();
    const tapLength = currentTime - this.lastTap;
    clearTimeout(this.timeout);
    if (tapLength < 500 && tapLength > 0) {
      this.callback(event);
    } else {
      this.timeout = setTimeout(() => {
        clearTimeout(this.timeout);
      }, 500);
    }
    this.lastTap = currentTime;
  }
};
var PressAndHoldHandler = class {
  constructor(plugin, element, callback, duration = 600) {
    this.plugin = plugin;
    this.element = element;
    this.callback = callback;
    this.duration = duration;
    this.timeout = null;
    this.plugin.registerDomEvent(this.element, "touchstart", this.handleTouchStart.bind(this), true);
    this.plugin.registerDomEvent(this.element, "touchend", this.handleTouchEnd.bind(this), true);
  }
  handleTouchStart(event) {
    this.timeout = setTimeout(() => {
      this.callback(event);
      this.timeout = null;
    }, this.duration);
  }
  handleTouchEnd(event) {
    if (this.timeout) {
      clearTimeout(this.timeout);
      this.timeout = null;
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
