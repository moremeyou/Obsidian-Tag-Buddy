/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TagBuddy
});
module.exports = __toCommonJS(main_exports);

// settings.ts
var import_obsidian = require("obsidian");
var TBSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Override native tag search on click").setDesc("Toggle off to use cmd+click to remove tag.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.removeOnClick).onChange(async (value) => {
        this.plugin.settings.removeOnClick = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Convert to tag text with opt+click (removes #)").setDesc("Toggle off to use opt+click to perform native tag search.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.optToConvert).onChange(async (value) => {
        this.plugin.settings.optToConvert = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Remove child tags first").setDesc("Toggle off to use shift+click to remove child tags fitst.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.removeChildTagsFirst).onChange(async (value) => {
        this.plugin.settings.removeChildTagsFirst = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Mobile tag search").setDesc("Toggle on to restore mobile native tag search on tap. Tag removal will then use press+hold.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.mobileTagSearch).onChange(async (value) => {
        this.plugin.settings.mobileTagSearch = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show mobile notices").setDesc("Toggle off to hide notices when editing or removing a tag.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.mobileNotices).onChange(async (value) => {
        this.plugin.settings.mobileNotices = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Debug mode").setDesc("Output to console.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.debugMode).onChange(async (value) => {
        this.plugin.settings.debugMode = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// main.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  removeOnClick: true,
  // when true, cmd is needed when clicking to remove the tag
  removeChildTagsFirst: true,
  // use shift when false
  optToConvert: true,
  // when false, clicking tag will do nothing
  mobileTagSearch: false,
  // toggle on use double tap for search. press+hold will then remove.
  mobileNotices: true,
  debugMode: false
};
var TagBuddy = class extends import_obsidian2.Plugin {
  onunload() {
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new TBSettingsTab(this.app, this));
    console.log("Tag Buddy Plugin loaded on " + (this.app.isMobile ? "mobile at " : "desktop at ") + new Date().toUTCString().substring(17));
    this.app.workspace.onLayoutReady(async () => {
      setTimeout(async () => {
        this.processTags();
      }, 1e3);
      this.registerEvent(this.app.on("layout-change", (event) => {
        setTimeout(async () => {
          this.processTags();
        }, 300);
      }));
      this.registerEvent(this.app.on("file-open", async (event) => {
        setTimeout(async () => {
          this.processTags();
        }, 1e3);
      }));
      if (!this.app.isMobile) {
        this.registerDomEvent(document, "click", this.onClickEvent.bind(this), true);
      } else {
        this.registerDomEvent(document, "click", (e) => {
          const isTag = e.target.classList.contains("tag");
          if (isTag && !this.settings.mobileTagSearch) {
            e.stopPropagation();
          }
        }, true);
        new PressAndHoldHandler(this, document, this.onClickEvent.bind(this));
        new DoubleTapHandler(this, document, this.onClickEvent.bind(this));
      }
    });
    this.registerMarkdownCodeBlockProcessor("tag-summary", this.summaryCodeBlockProcessor.bind(this));
  }
  async onClickEvent(event) {
    const target = event.target;
    const view = await this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (!view && target.matches(".tag")) {
      new import_obsidian2.Notice("Tag Buddy: Can't edit tag. Unsupported view type. Try again within that note.");
      return;
    }
    if (view) {
      if (view.getMode() != "preview")
        return;
    } else {
    }
    if (!this.app.isMobile) {
      if (this.settings.removeOnClick && event.metaKey || !this.settings.removeOnClick && !event.metaKey) {
        return;
      } else if (event.altKey && !this.settings.optToConvert) {
        return;
      }
    } else {
      if (this.settings.mobileTagSearch && event.type == "touchend") {
        return;
      }
    }
    if (target && target.matches(".tag")) {
      if (this.settings.removeOnClick || !this.settings.removeOnClick && event.metaKey) {
        event.stopPropagation();
        event.preventDefault();
      }
      const clickedTag = target.closest(".tag");
      const tag = clickedTag.innerText;
      let tagIndex = clickedTag.getAttribute("md-index");
      let tagFile = clickedTag.getAttribute("file-source");
      if (tagFile) {
        this.editTag(event, tagIndex, tagFile);
      } else {
        setTimeout(async () => {
          tagIndex = clickedTag.getAttribute("md-index");
          tagFile = clickedTag.getAttribute("file-source");
          this.editTag(event, tagIndex, tagFile);
        }, 100);
      }
      if (clickedTag.getAttribute("type") == "plugin-summary") {
        setTimeout(async () => {
          const summaryContainer = clickedTag.closest(".summary");
          const tagsStr = summaryContainer.getAttribute("codeblock-tags");
          const tags = tagsStr ? tagsStr.split(",") : [];
          const tagsIncludeStr = summaryContainer.getAttribute("codeblock-tags-include");
          const tagsInclude = tagsIncludeStr ? tagsIncludeStr.split(",") : [];
          const tagsExcludeStr = summaryContainer.getAttribute("codeblock-tags-exclude");
          const tagsExclude = tagsExcludeStr ? tagsExcludeStr.split(",") : [];
          this.createSummary(summaryContainer, tags, tagsInclude, tagsExclude);
          setTimeout(async () => {
            this.processTags();
          }, 200);
        }, 150);
      } else {
        setTimeout(async () => {
          this.processTags();
        }, 50);
      }
    } else if (!view && target.matches(".tag")) {
      new import_obsidian2.Notice("Tag Buddy: Can't edit tag. Might be in an unsupported view type.");
    }
  }
  async processTags() {
    if (this.settings.debugMode)
      console.log("Tag Buddy: Processing tags.");
    const view = await this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    const activeNoteContainer = await this.app.workspace.activeLeaf.containerEl;
    const activeFile = await this.app.workspace.getActiveFile();
    const fileContent = await app.vault.read(activeFile);
    const activeFileTagElements = await activeNoteContainer.querySelectorAll(".mod-active .tag:not(.markdown-embed .tag):not(.summary .tag)");
    const activeFileTags = await this.getMarkdownTags(activeFile, fileContent);
    this.assignMarkdownTags(activeFileTags, activeFileTagElements, 0, "active");
    this.processEmbeds(activeNoteContainer);
  }
  async getMarkdownTags(file, fileContent) {
    const tagPositions = [];
    let match;
    const regex = /(?:^|\s)#[^\s#]+|```/g;
    let insideCodeBlock = false;
    while ((match = regex.exec(fileContent)) !== null) {
      if (match[0].trim() === "```") {
        insideCodeBlock = !insideCodeBlock;
        continue;
      }
      if (insideCodeBlock)
        continue;
      const tag = match[0].trim();
      if (fileContent.slice(match.index, match.index + tag.length + 2).endsWith("]]")) {
        continue;
      }
      tagPositions.push({ tag, index: match.index, source: file.name });
    }
    return tagPositions;
  }
  assignMarkdownTags(tagPositions, tagElements, startIndex, type) {
    let tagEl;
    const tagElArray = Array.from(tagElements);
    let tagElIndex = 0;
    tagPositions.forEach((tagPos, index) => {
      if (tagPositions[index].index >= startIndex) {
        tagEl = tagElArray[tagElIndex];
        if (tagEl) {
          tagEl.setAttribute("md-index", tagPositions[index].index);
          tagEl.setAttribute("file-source", tagPositions[index].source);
          tagEl.setAttribute("type", type);
          tagElIndex++;
        }
      }
    });
    return tagElArray;
  }
  async processEmbeds(element) {
    const embeds = await element.querySelectorAll(".summary, .markdown-embed");
    embeds.forEach(async (embed) => {
      if (embed.classList.contains("summary")) {
        this.processTagSummary(embed);
      } else if (embed.classList.contains("markdown-embed")) {
        this.processNativeEmbed(embed);
        if (Array.from(embed.querySelectorAll(".summary")).length > 0) {
          this.processTagSummary(embed);
        }
      } else {
      }
    });
  }
  async processNativeEmbed(embed) {
    const linkElement = embed.getAttribute("src");
    let filePath = embed.getAttribute("src");
    const linkArray = filePath.split("#");
    filePath = linkArray[0].trim() + ".md";
    const file = await this.validateFilePath(filePath);
    if (file) {
      const fileContent = await app.vault.read(file);
      const embededTagFile = await this.getMarkdownTags(file, fileContent);
      const tempComponent = new TempComponent();
      const tempContainerHTML = createEl("div");
      await import_obsidian2.MarkdownRenderer.renderMarkdown(fileContent, tempContainerHTML, file.path, tempComponent);
      const innerText = this.cleanString(embed.querySelector(".markdown-embed-content").innerText);
      const startIndex = this.cleanString(tempContainerHTML.innerText).indexOf(innerText);
      this.assignMarkdownTags(embededTagFile, embed.querySelectorAll(".tag"), startIndex, "native-embed");
    }
  }
  async processTagSummary(embed) {
    let summaryBlocks = embed.querySelectorAll("blockquote");
    summaryBlocks.forEach(async (block, index) => {
      var _a, _b;
      const filePath = block.getAttribute("file-source");
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file) {
        const fileContent = await app.vault.read(file);
        const embededTagFile = await this.getMarkdownTags(file, fileContent);
        const tempBlock = block.cloneNode(true);
        (_a = tempBlock.querySelector("br")) == null ? void 0 : _a.remove();
        (_b = tempBlock.querySelector("strong")) == null ? void 0 : _b.remove();
        const blockText = this.cleanString(tempBlock.innerText);
        const startIndex = this.cleanString(fileContent).indexOf(blockText);
        this.assignMarkdownTags(embededTagFile, block.querySelectorAll(".tag"), startIndex, "plugin-summary");
      }
    });
  }
  async editTag(event, index, filePath) {
    if (this.settings.debugMode)
      console.log("Tag Buddy edit tag: " + event.target.innerText + "\nIn file: " + filePath);
    if (filePath) {
      const file = await this.validateFilePath(filePath);
      let fileContent;
      let fileContentBackup;
      const tag = event.target.innerText.trim();
      try {
        fileContent = await this.app.vault.read(file);
        fileContentBackup = fileContent;
      } catch (error) {
        new import_obsidian2.Notice("Tag Buddy file read error:\n" + error.message);
        return;
      }
      let safeToEmptyFile = false;
      const tagRegex = /^\s*#(\w+)\s*$/;
      if (tagRegex.test(fileContent.trim())) {
        safeToEmptyFile = true;
      }
      let beforeTag = fileContent.substring(0, index);
      let afterTag = fileContent.substring(Number(index) + Number(tag.length) + 1);
      if (fileContent[index] === "\n") {
        beforeTag += "\n";
      }
      let newContent = "";
      if (event.altKey || event.type == "touchstart" && !this.settings.mobileTagSearch) {
        const noHash = tag.substring(1);
        newContent = beforeTag + (!beforeTag.endsWith(" ") ? " " : "") + noHash + afterTag;
        if (this.app.isMobile && this.settings.mobileNotices) {
          new import_obsidian2.Notice("Tag Buddy: " + tag + " converted to text.");
        }
      } else if (event.type == "touchend" || this.settings.mobileTagSearch || event.metaKey && !this.settings.removeOnClick || !event.metaKey && this.settings.removeOnClick) {
        let parentTag = "";
        if (tag.includes("/") && (this.settings.removeChildTagsFirst || event.shiftKey && !this.settings.removeChildTagsFirst)) {
          let parts = tag.split("/");
          const removedChild = parts.pop();
          parentTag = parts.join("/");
          newContent = beforeTag + (!beforeTag.endsWith(" ") ? " " : "") + parentTag + afterTag;
          if (this.app.isMobile && this.settings.mobileNotices) {
            new import_obsidian2.Notice("Tag Buddy: '" + removedChild + "' removed from parent tag.");
          }
        } else {
          newContent = beforeTag + afterTag;
          if (this.app.isMobile && this.settings.mobileNotices) {
            new import_obsidian2.Notice("Tag Buddy: " + tag + " removed.");
          }
        }
      }
      if (newContent == "" && !safeToEmptyFile || this.contentChangedTooMuch(fileContentBackup, newContent, tag, 2)) {
        new import_obsidian2.Notice("Tag Buddy: File change error.");
        newContent = fileContentBackup;
      } else if (newContent == "" && safeToEmptyFile) {
        new import_obsidian2.Notice("Tag Buddy: Tag removed. The file is empty.");
      }
      try {
        await this.app.vault.modify(file, newContent);
      } catch (error) {
        try {
          const backupFileName = String(file.name.substring(0, file.name.indexOf(".md")) + " BACKUP.md");
          vault.create("", backupFileName, fileContentBackup);
          new import_obsidian2.Notice("Tag Buddy note editing error: " + error.message + "\n" + backupFileName + " saved to vault root.");
        } catch (error2) {
          navigator.clipboard.writeText(fileContentBackup);
          new import_obsidian2.Notice("Tag Buddy note editing error: " + error2.message + "\nNote content copied to clipboard.");
        }
      }
    } else {
      new import_obsidian2.Notice("Tag Buddy error: Can't identify tag location.");
    }
  }
  async readFiles(listFiles) {
    let list = [];
    for (let t = 0; t < listFiles.length; t += 1) {
      const file = listFiles[t];
      let content = await this.app.vault.cachedRead(file);
      list.push([file, content]);
    }
    return list;
  }
  isValidText(listTags, tags, include, exclude) {
    let valid = true;
    if (tags.length > 0) {
      valid = valid && tags.some((value) => listTags.includes(value));
    }
    if (include.length > 0) {
      valid = valid && include.every((value) => listTags.includes(value));
    }
    if (valid && exclude.length > 0) {
      valid = !exclude.some((value) => listTags.includes(value));
    }
    return valid;
  }
  async validateFilePath(filePath) {
    const matchingFiles = await app.vault.getFiles().filter((file) => file.name === filePath);
    if (matchingFiles.length === 1) {
      const filePath2 = matchingFiles[0].path;
      const file = await this.app.vault.getAbstractFileByPath(filePath2);
      return file;
    } else if (matchingFiles.length > 1) {
      new import_obsidian2.Notice("Tag Buddy: Multiple files found with the same name. Can't safely edit tag.");
      return null;
    } else {
      new import_obsidian2.Notice("Tag Buddy: No file found. Try again, or this tag might be in an unsupported embed type.");
      return null;
    }
  }
  contentChangedTooMuch(original, modified, tag, buffer = 5) {
    const expectedChange = tag.length;
    const threshold = expectedChange + buffer;
    const actualChange = Math.abs(original.length - modified.length);
    return actualChange > threshold;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  cleanString(input) {
    let cleanedStr;
    if (input instanceof Element) {
      cleanedStr = input.outerHTML.trim();
    } else {
      cleanedStr = input.trim();
    }
    cleanedStr = cleanedStr.replace(/\s+/g, " ");
    const textArea = document.createElement("textarea");
    textArea.innerHTML = cleanedStr;
    cleanedStr = textArea.value.trim();
    return cleanedStr;
  }
  async refreshView() {
    new import_obsidian2.Notice("Refresh view.");
    await app.workspace.activeLeaf.rebuildView();
  }
  //////////////// CUSTOM TAG-SUMMARY IMPLEMENTATION //////////////
  // ORIGINAL CODE BY https://github.com/macrojd/tag-summary //////
  /////////////////////////////////////////////////////////////////
  async summaryCodeBlockProcessor(source, el, ctx) {
    let tags = Array();
    let include = Array();
    let exclude = Array();
    const rows = source.split("\n").filter((row) => row.length > 0);
    rows.forEach((line) => {
      if (line.match(/^\s*tags:[\p{L}0-9_\-/# ]+$/gu)) {
        const content = line.replace(/^\s*tags:/, "").trim();
        let list = content.split(/\s+/).map((tag) => tag.trim());
        list = list.filter((tag) => {
          if (tag.match(/^#[\p{L}]+[^#]*$/u)) {
            return true;
          } else {
            return false;
          }
        });
        tags = list;
      }
      if (line.match(/^\s*include:[\p{L}0-9_\-/# ]+$/gu)) {
        const content = line.replace(/^\s*include:/, "").trim();
        let list = content.split(/\s+/).map((tag) => tag.trim());
        list = list.filter((tag) => {
          if (tag.match(/^#[\p{L}]+[^#]*$/u)) {
            return true;
          } else {
            return false;
          }
        });
        include = list;
      }
      if (line.match(/^\s*exclude:[\p{L}0-9_\-/# ]+$/gu)) {
        const content = line.replace(/^\s*exclude:/, "").trim();
        let list = content.split(/\s+/).map((tag) => tag.trim());
        list = list.filter((tag) => {
          if (tag.match(/^#[\p{L}]+[^#]*$/u)) {
            return true;
          } else {
            return false;
          }
        });
        exclude = list;
      }
    });
    if (tags.length > 0 || include.length > 0) {
      await this.createSummary(el, tags, include, exclude, ctx.sourcePath);
    } else {
      this.createEmptySummary(el);
    }
  }
  createEmptySummary(element) {
    const container = createEl("div");
    container.setAttribute("class", "summary");
    container.createEl("span", {
      attr: { style: "color: var(--text-error) !important;" },
      text: "There are no files with blocks that match the specified tags."
    });
    element.replaceWith(container);
  }
  async createSummary(element, tags, include, exclude, filePath) {
    const activeFile = await this.app.workspace.getActiveFile();
    const validTags = tags.concat(include);
    const tempComponent = new TempComponent();
    const summaryContainer = createEl("div");
    summaryContainer.setAttribute("class", "summary");
    let listFiles = this.app.vault.getMarkdownFiles();
    listFiles = listFiles.filter((file) => {
      const cache = app.metadataCache.getFileCache(file);
      const tagsInFile = (0, import_obsidian2.getAllTags)(cache);
      if (validTags.some((value) => tagsInFile.includes(value))) {
        return true;
      }
      return false;
    });
    listFiles = listFiles.sort((file1, file2) => {
      if (file1.path < file2.path) {
        return -1;
      } else if (file1.path > file2.path) {
        return 1;
      } else {
        return 0;
      }
    });
    let listContents = await this.readFiles(listFiles);
    let summary = "";
    listContents.forEach((item) => {
      const fileName = item[0].name.replace(/.md$/g, "");
      const filePath2 = item[0].path;
      if (activeFile.name == item[0].name) {
        return;
      }
      let listParagraphs = Array();
      const blocks = item[1].split(/\n\s*\n/).filter((row) => row.trim().length > 0);
      blocks.forEach((paragraph) => {
        let valid = false;
        let listTags = paragraph.match(/#[\p{L}0-9_\-/#]+/gu);
        if (listTags != null && listTags.length > 0) {
          if (!paragraph.contains("```")) {
            valid = this.isValidText(listTags, tags, include, exclude);
          }
        }
        if (valid) {
          let listItems = Array();
          let itemText = "";
          paragraph.split("\ns*\n").forEach((line) => {
            let isList = false;
            isList = line.search(/(\s*[\-\+\*]){1}|([0-9]\.){1}\s+/) != -1;
            if (!isList) {
              listParagraphs.push(line);
              itemText = "";
            } else {
              line.split("\n").forEach((itemLine) => {
                let level = 0;
                const endIndex = itemLine.search(/[\-\+\*]{1}|([0-9]\.){1}\s+/);
                const tabText = itemLine.slice(0, endIndex);
                const tabs = tabText.match(/\t/g);
                if (tabs) {
                  level = tabs.length;
                }
                if (level == 0) {
                  if (itemText != "") {
                    listItems.push(itemText);
                    itemText = "";
                  }
                  itemText = "" + itemText.concat(itemLine + "\n");
                } else if (level > 0 && itemText != "") {
                  itemText = itemText.concat(itemLine + "\n");
                }
              });
            }
          });
          if (itemText != "") {
            listItems.push(itemText);
            itemText = "";
          }
          listItems.forEach((line) => {
            listTags = line.match(/#[\p{L}0-9_\-/#]+/gu);
            if (listTags != null && listTags.length > 0) {
              if (this.isValidText(listTags, tags, include, exclude)) {
                listParagraphs.push(line);
              }
            }
          });
        }
      });
      listParagraphs.forEach(async (paragraph) => {
        var _a;
        paragraph += "\n";
        var regex = new RegExp();
        var tagText = new String();
        var tagSection = null;
        tags.forEach((tag) => {
          tagText = tag.replace("#", "\\#");
          regex = new RegExp(`${tagText}(\\W|$)`, "g");
          if (paragraph.match(regex) != null) {
            tagSection = tag;
          }
        });
        let blockLink = paragraph.match(/\^[\p{L}0-9_\-/^]+/gu);
        if (blockLink) {
          paragraph = "**[[" + filePath2 + "#" + blockLink + "|" + fileName + "]]**\n" + paragraph;
        } else {
          paragraph = "**[[" + filePath2 + "|" + fileName + "]]**\n" + paragraph;
        }
        paragraph += "\n\n";
        summary += paragraph;
        const paragraphContent = createEl("blockquote");
        paragraphContent.setAttribute("file-source", filePath2);
        await import_obsidian2.MarkdownRenderer.renderMarkdown(paragraph, paragraphContent, (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path, tempComponent);
        summaryContainer.appendChild(paragraphContent);
      });
    });
    if (summary != "") {
      summaryContainer.setAttribute("codeblock-tags", tags.join(","));
      summaryContainer.setAttribute("codeblock-tags-include", include.length > 0 ? include.join(",") : "");
      summaryContainer.setAttribute("codeblock-tags-exclude", exclude.length > 0 ? exclude.join(",") : "");
      element.replaceWith(summaryContainer);
    } else {
      this.createEmptySummary(element);
    }
  }
  /////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////
};
var TempComponent = class extends import_obsidian2.Component {
  onload() {
  }
  onunload() {
  }
};
var DoubleTapHandler = class {
  constructor(plugin, element, callback) {
    this.plugin = plugin;
    this.element = element;
    this.callback = callback;
    this.lastTap = 0;
    this.plugin.registerDomEvent(this.element, "touchend", this.handleTouchEnd.bind(this), true);
  }
  handleTouchEnd(event) {
    const currentTime = new Date().getTime();
    const tapLength = currentTime - this.lastTap;
    clearTimeout(this.timeout);
    if (tapLength < 500 && tapLength > 0) {
      this.callback(event);
    } else {
      this.timeout = setTimeout(() => {
        clearTimeout(this.timeout);
      }, 500);
    }
    this.lastTap = currentTime;
  }
};
var PressAndHoldHandler = class {
  constructor(plugin, element, callback, duration = 600) {
    this.plugin = plugin;
    this.element = element;
    this.callback = callback;
    this.duration = duration;
    this.timeout = null;
    this.plugin.registerDomEvent(this.element, "touchstart", this.handleTouchStart.bind(this), true);
    this.plugin.registerDomEvent(this.element, "touchend", this.handleTouchEnd.bind(this), true);
  }
  handleTouchStart(event) {
    this.timeout = setTimeout(() => {
      this.callback(event);
      this.timeout = null;
    }, this.duration);
  }
  handleTouchEnd(event) {
    if (this.timeout) {
      clearTimeout(this.timeout);
      this.timeout = null;
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
