/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TagBuddy
});
module.exports = __toCommonJS(main_exports);

// settings.ts
var import_obsidian = require("obsidian");
var TBSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Override native tag search on click").setDesc("Toggle off to use cmd+click to remove tag.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.removeOnClick).onChange(async (value) => {
        this.plugin.settings.removeOnClick = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Convert to tag text with opt+click (removes #)").setDesc("Toggle off to use opt+click to perform native tag search.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.optToConvert).onChange(async (value) => {
        this.plugin.settings.optToConvert = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Remove child tags first").setDesc("Toggle off to use shift+click to remove child tags fitst.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.removeChildTagsFirst).onChange(async (value) => {
        this.plugin.settings.removeChildTagsFirst = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Mobile tag search").setDesc("Toggle on to restore mobile native tag search on tap. Tag removal will then use press+hold.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.mobileTagSearch).onChange(async (value) => {
        this.plugin.settings.mobileTagSearch = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show mobile notices").setDesc("Toggle off to hide notices when editing or removing a tag.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.mobileNotices).onChange(async (value) => {
        this.plugin.settings.mobileNotices = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Debug mode").setDesc("Output to console.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.debugMode).onChange(async (value) => {
        this.plugin.settings.debugMode = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// main.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  removeOnClick: true,
  // when true, cmd is needed when clicking to remove the tag
  removeChildTagsFirst: true,
  // use shift when false
  optToConvert: true,
  // when false, clicking tag will do nothing
  mobileTagSearch: false,
  // toggle on use double tap for search. press+hold will then remove.
  mobileNotices: true,
  debugMode: false
};
var TagBuddy = class extends import_obsidian2.Plugin {
  onunload() {
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new TBSettingsTab(this.app, this));
    console.log("Tag Buddy Plugin loaded on " + (this.app.isMobile ? "mobile at " : "desktop at ") + new Date().toUTCString().substring(17));
    this.app.workspace.onLayoutReady(async () => {
      setTimeout(async () => {
        this.processTags();
      }, 1e3);
      this.registerEvent(this.app.on("layout-change", (event) => {
        setTimeout(async () => {
          this.processTags();
        }, 300);
      }));
      this.registerEvent(this.app.on("file-open", async (event) => {
        setTimeout(async () => {
          this.processTags();
        }, 1e3);
      }));
      if (!this.app.isMobile) {
        this.registerDomEvent(document, "click", this.onClickEvent.bind(this), true);
      } else {
        this.registerDomEvent(document, "click", (e) => {
          const isTag = e.target.classList.contains("tag");
          if (isTag && !this.settings.mobileTagSearch) {
            e.stopPropagation();
          }
        }, true);
        new PressAndHoldHandler(this, document, this.onClickEvent.bind(this));
        new DoubleTapHandler(this, document, this.onClickEvent.bind(this));
      }
    });
    this.registerMarkdownCodeBlockProcessor("tag-summary", this.summaryCodeBlockProcessor.bind(this));
  }
  async onClickEvent(event) {
    const target = event.target;
    const view = await this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (!view && target.matches(".tag")) {
      new import_obsidian2.Notice("Tag Buddy: Can't edit tag. Unsupported view type. Try again within that note.");
      return;
    }
    if (view) {
      if (view.getMode() != "preview")
        return;
    } else {
    }
    if (!this.app.isMobile) {
      if (this.settings.removeOnClick && event.metaKey || !this.settings.removeOnClick && !event.metaKey) {
        return;
      } else if (event.altKey && !this.settings.optToConvert) {
        return;
      }
    } else {
      if (this.settings.mobileTagSearch && event.type == "touchend") {
        return;
      }
    }
    if (target && target.matches(".tag")) {
      if (this.settings.removeOnClick || !this.settings.removeOnClick && event.metaKey) {
        event.stopPropagation();
        event.preventDefault();
      }
      const clickedTag = target.closest(".tag");
      const tag = clickedTag.innerText;
      let tagIndex = clickedTag.getAttribute("md-index");
      let tagFile = clickedTag.getAttribute("file-source");
      if (tagFile) {
        this.editTag(event, tagIndex, tagFile);
      } else {
        setTimeout(async () => {
          tagIndex = clickedTag.getAttribute("md-index");
          tagFile = clickedTag.getAttribute("file-source");
          this.editTag(event, tagIndex, tagFile);
        }, 100);
      }
      if (clickedTag.getAttribute("type") == "plugin-summary") {
        setTimeout(async () => {
          const summaryContainer = clickedTag.closest(".summary");
          const tagsStr = summaryContainer.getAttribute("codeblock-tags");
          const tags = tagsStr ? tagsStr.split(",") : [];
          const tagsIncludeStr = summaryContainer.getAttribute("codeblock-tags-include");
          const tagsInclude = tagsIncludeStr ? tagsIncludeStr.split(",") : [];
          const tagsExcludeStr = summaryContainer.getAttribute("codeblock-tags-exclude");
          const tagsExclude = tagsExcludeStr ? tagsExcludeStr.split(",") : [];
          this.createSummary(summaryContainer, tags, tagsInclude, tagsExclude);
          setTimeout(async () => {
            this.processTags();
          }, 200);
        }, 150);
      } else {
        setTimeout(async () => {
          this.processTags();
        }, 50);
      }
    } else if (!view && target.matches(".tag")) {
      new import_obsidian2.Notice("Tag Buddy: Can't edit tag. Might be in an unsupported view type.");
    }
  }
  async processTags() {
    if (this.settings.debugMode)
      console.log("Tag Buddy: Processing tags.");
    const view = await this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    const activeNoteContainer = await this.app.workspace.activeLeaf.containerEl;
    const activeFile = await this.app.workspace.getActiveFile();
    const fileContent = await app.vault.read(activeFile);
    const activeFileTagElements = await activeNoteContainer.querySelectorAll(".mod-active .tag:not(.markdown-embed .tag):not(.summary .tag)");
    const activeFileTags = await this.getMarkdownTags(activeFile, fileContent);
    this.assignMarkdownTags(activeFileTags, activeFileTagElements, 0, "active");
    this.processEmbeds(activeNoteContainer);
  }
  async getMarkdownTags(file, fileContent) {
    const tagPositions = [];
    let match;
    const regex = /(?:^|\s)#[^\s#]+|```/g;
    let insideCodeBlock = false;
    while ((match = regex.exec(fileContent)) !== null) {
      if (match[0].trim() === "```") {
        insideCodeBlock = !insideCodeBlock;
        continue;
      }
      if (insideCodeBlock)
        continue;
      const tag = match[0].trim();
      if (fileContent.slice(match.index, match.index + tag.length + 2).endsWith("]]")) {
        continue;
      }
      tagPositions.push({ tag, index: match.index, source: file.name });
    }
    return tagPositions;
  }
  assignMarkdownTags(tagPositions, tagElements, startIndex, type) {
    let tagEl;
    const tagElArray = Array.from(tagElements);
    let tagElIndex = 0;
    tagPositions.forEach((tagPos, index) => {
      if (tagPositions[index].index >= startIndex) {
        tagEl = tagElArray[tagElIndex];
        if (tagEl) {
          tagEl.setAttribute("md-index", tagPositions[index].index);
          tagEl.setAttribute("file-source", tagPositions[index].source);
          tagEl.setAttribute("type", type);
          tagElIndex++;
        }
      }
    });
    return tagElArray;
  }
  async processEmbeds(element) {
    const embeds = await element.querySelectorAll(".summary, .markdown-embed");
    embeds.forEach(async (embed) => {
      if (embed.classList.contains("summary")) {
        this.processTagSummary(embed);
      } else if (embed.classList.contains("markdown-embed")) {
        this.processNativeEmbed(embed);
        if (Array.from(embed.querySelectorAll(".summary")).length > 0) {
          this.processTagSummary(embed);
        }
      } else {
      }
    });
  }
  async processNativeEmbed(embed) {
    const linkElement = embed.getAttribute("src");
    let filePath = embed.getAttribute("src");
    const linkArray = filePath.split("#");
    filePath = linkArray[0].trim() + ".md";
    const file = await this.validateFilePath(filePath);
    if (file) {
      const fileContent = await app.vault.read(file);
      const embededTagFile = await this.getMarkdownTags(file, fileContent);
      const tempComponent = new TempComponent();
      const tempContainerHTML = createEl("div");
      await import_obsidian2.MarkdownRenderer.renderMarkdown(fileContent, tempContainerHTML, file.path, tempComponent);
      const innerText = this.cleanString(embed.querySelector(".markdown-embed-content").innerText);
      const startIndex = this.cleanString(tempContainerHTML.innerText).indexOf(innerText);
      this.assignMarkdownTags(embededTagFile, embed.querySelectorAll(".tag"), startIndex, "native-embed");
    }
  }
  async processTagSummary(embed) {
    let summaryBlocks = embed.querySelectorAll("blockquote");
    summaryBlocks.forEach(async (block, index) => {
      var _a, _b;
      const filePath = block.getAttribute("file-source");
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file) {
        const fileContent = await app.vault.read(file);
        const embededTagFile = await this.getMarkdownTags(file, fileContent);
        const tempBlock = block.cloneNode(true);
        (_a = tempBlock.querySelector("br")) == null ? void 0 : _a.remove();
        (_b = tempBlock.querySelector("strong")) == null ? void 0 : _b.remove();
        const blockText = this.cleanString(tempBlock.innerText);
        const startIndex = this.cleanString(fileContent).indexOf(blockText);
        this.assignMarkdownTags(embededTagFile, block.querySelectorAll(".tag"), startIndex, "plugin-summary");
      }
    });
  }
  async editTag(event, index, filePath) {
    if (this.settings.debugMode)
      console.log("Tag Buddy edit tag: " + event.target.innerText + "\nIn file: " + filePath);
    if (filePath) {
      const file = await this.validateFilePath(filePath);
      let fileContent;
      let fileContentBackup;
      const tag = event.target.innerText.trim();
      try {
        fileContent = await this.app.vault.read(file);
        fileContentBackup = fileContent;
      } catch (error) {
        new import_obsidian2.Notice("Tag Buddy file read error:\n" + error.message);
        return;
      }
      let safeToEmptyFile = false;
      const tagRegex = /^\s*#(\w+)\s*$/;
      if (tagRegex.test(fileContent.trim())) {
        safeToEmptyFile = true;
      }
      let beforeTag = fileContent.substring(0, index);
      let afterTag = fileContent.substring(Number(index) + Number(tag.length) + 1);
      if (fileContent[index] === "\n") {
        beforeTag += "\n";
      }
      let newContent = "";
      if (event.altKey || event.type == "touchstart" && !this.settings.mobileTagSearch) {
        const noHash = tag.substring(1);
        newContent = beforeTag + (!beforeTag.endsWith(" ") ? " " : "") + noHash + afterTag;
        if (this.app.isMobile && this.settings.mobileNotices) {
          new import_obsidian2.Notice("Tag Buddy: " + tag + " converted to text.");
        }
      } else if (event.type == "touchend" || this.settings.mobileTagSearch || event.metaKey && !this.settings.removeOnClick || !event.metaKey && this.settings.removeOnClick) {
        let parentTag = "";
        if (tag.includes("/") && (this.settings.removeChildTagsFirst || event.shiftKey && !this.settings.removeChildTagsFirst)) {
          let parts = tag.split("/");
          const removedChild = parts.pop();
          parentTag = parts.join("/");
          newContent = beforeTag + (!beforeTag.endsWith(" ") ? " " : "") + parentTag + afterTag;
          if (this.app.isMobile && this.settings.mobileNotices) {
            new import_obsidian2.Notice("Tag Buddy: '" + removedChild + "' removed from parent tag.");
          }
        } else {
          newContent = beforeTag + afterTag;
          if (this.app.isMobile && this.settings.mobileNotices) {
            new import_obsidian2.Notice("Tag Buddy: " + tag + " removed.");
          }
        }
      }
      if (newContent == "" && !safeToEmptyFile || this.contentChangedTooMuch(fileContentBackup, newContent, tag, 2)) {
        new import_obsidian2.Notice("Tag Buddy: File change error.");
        newContent = fileContentBackup;
      } else if (newContent == "" && safeToEmptyFile) {
        new import_obsidian2.Notice("Tag Buddy: Tag removed. The file is empty.");
      }
      try {
        await this.app.vault.modify(file, newContent);
      } catch (error) {
        try {
          const backupFileName = String(file.name.substring(0, file.name.indexOf(".md")) + " BACKUP.md");
          vault.create("", backupFileName, fileContentBackup);
          new import_obsidian2.Notice("Tag Buddy note editing error: " + error.message + "\n" + backupFileName + " saved to vault root.");
        } catch (error2) {
          navigator.clipboard.writeText(fileContentBackup);
          new import_obsidian2.Notice("Tag Buddy note editing error: " + error2.message + "\nNote content copied to clipboard.");
        }
      }
    } else {
      new import_obsidian2.Notice("Tag Buddy error: Can't identify tag location.");
    }
  }
  async readFiles(listFiles) {
    let list = [];
    for (let t = 0; t < listFiles.length; t += 1) {
      const file = listFiles[t];
      let content = await this.app.vault.cachedRead(file);
      list.push([file, content]);
    }
    return list;
  }
  isValidText(listTags, tags, include, exclude) {
    let valid = true;
    if (tags.length > 0) {
      valid = valid && tags.some((value) => listTags.includes(value));
    }
    if (include.length > 0) {
      valid = valid && include.every((value) => listTags.includes(value));
    }
    if (valid && exclude.length > 0) {
      valid = !exclude.some((value) => listTags.includes(value));
    }
    return valid;
  }
  async validateFilePath(filePath) {
    const matchingFiles = await app.vault.getFiles().filter((file) => file.name === filePath);
    if (matchingFiles.length === 1) {
      const filePath2 = matchingFiles[0].path;
      const file = await this.app.vault.getAbstractFileByPath(filePath2);
      return file;
    } else if (matchingFiles.length > 1) {
      new import_obsidian2.Notice("Tag Buddy: Multiple files found with the same name. Can't safely edit tag.");
      return null;
    } else {
      new import_obsidian2.Notice("Tag Buddy: No file found. Try again, or this tag might be in an unsupported embed type.");
      return null;
    }
  }
  contentChangedTooMuch(original, modified, tag, buffer = 5) {
    const expectedChange = tag.length;
    const threshold = expectedChange + buffer;
    const actualChange = Math.abs(original.length - modified.length);
    return actualChange > threshold;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  cleanString(input) {
    let cleanedStr;
    if (input instanceof Element) {
      cleanedStr = input.outerHTML.trim();
    } else {
      cleanedStr = input.trim();
    }
    cleanedStr = cleanedStr.replace(/\s+/g, " ");
    const textArea = document.createElement("textarea");
    textArea.innerHTML = cleanedStr;
    cleanedStr = textArea.value.trim();
    return cleanedStr;
  }
  async refreshView() {
    new import_obsidian2.Notice("Refresh view.");
    await app.workspace.activeLeaf.rebuildView();
  }
  //////////////// CUSTOM TAG-SUMMARY IMPLEMENTATION //////////////
  // ORIGINAL CODE BY https://github.com/macrojd/tag-summary //////
  /////////////////////////////////////////////////////////////////
  async summaryCodeBlockProcessor(source, el, ctx) {
    let tags = Array();
    let include = Array();
    let exclude = Array();
    const rows = source.split("\n").filter((row) => row.length > 0);
    rows.forEach((line) => {
      if (line.match(/^\s*tags:[\p{L}0-9_\-/# ]+$/gu)) {
        const content = line.replace(/^\s*tags:/, "").trim();
        let list = content.split(/\s+/).map((tag) => tag.trim());
        list = list.filter((tag) => {
          if (tag.match(/^#[\p{L}]+[^#]*$/u)) {
            return true;
          } else {
            return false;
          }
        });
        tags = list;
      }
      if (line.match(/^\s*include:[\p{L}0-9_\-/# ]+$/gu)) {
        const content = line.replace(/^\s*include:/, "").trim();
        let list = content.split(/\s+/).map((tag) => tag.trim());
        list = list.filter((tag) => {
          if (tag.match(/^#[\p{L}]+[^#]*$/u)) {
            return true;
          } else {
            return false;
          }
        });
        include = list;
      }
      if (line.match(/^\s*exclude:[\p{L}0-9_\-/# ]+$/gu)) {
        const content = line.replace(/^\s*exclude:/, "").trim();
        let list = content.split(/\s+/).map((tag) => tag.trim());
        list = list.filter((tag) => {
          if (tag.match(/^#[\p{L}]+[^#]*$/u)) {
            return true;
          } else {
            return false;
          }
        });
        exclude = list;
      }
    });
    if (tags.length > 0 || include.length > 0) {
      await this.createSummary(el, tags, include, exclude, ctx.sourcePath);
    } else {
      this.createEmptySummary(el);
    }
  }
  createEmptySummary(element) {
    const container = createEl("div");
    container.setAttribute("class", "summary");
    container.createEl("span", {
      attr: { style: "color: var(--text-error) !important;" },
      text: "There are no files with blocks that match the specified tags."
    });
    element.replaceWith(container);
  }
  async createSummary(element, tags, include, exclude, filePath) {
    const activeFile = await this.app.workspace.getActiveFile();
    const validTags = tags.concat(include);
    const tempComponent = new TempComponent();
    const summaryContainer = createEl("div");
    summaryContainer.setAttribute("class", "summary");
    let listFiles = this.app.vault.getMarkdownFiles();
    listFiles = listFiles.filter((file) => {
      const cache = app.metadataCache.getFileCache(file);
      const tagsInFile = (0, import_obsidian2.getAllTags)(cache);
      if (validTags.some((value) => tagsInFile.includes(value))) {
        return true;
      }
      return false;
    });
    listFiles = listFiles.sort((file1, file2) => {
      if (file1.path < file2.path) {
        return -1;
      } else if (file1.path > file2.path) {
        return 1;
      } else {
        return 0;
      }
    });
    let listContents = await this.readFiles(listFiles);
    let summary = "";
    listContents.forEach((item) => {
      const fileName = item[0].name.replace(/.md$/g, "");
      const filePath2 = item[0].path;
      if (activeFile.name == item[0].name) {
        return;
      }
      let listParagraphs = Array();
      const blocks = item[1].split(/\n\s*\n/).filter((row) => row.trim().length > 0);
      blocks.forEach((paragraph) => {
        let valid = false;
        let listTags = paragraph.match(/#[\p{L}0-9_\-/#]+/gu);
        if (listTags != null && listTags.length > 0) {
          if (!paragraph.contains("```")) {
            valid = this.isValidText(listTags, tags, include, exclude);
          }
        }
        if (valid) {
          let listItems = Array();
          let itemText = "";
          paragraph.split("\ns*\n").forEach((line) => {
            let isList = false;
            isList = line.search(/(\s*[\-\+\*]){1}|([0-9]\.){1}\s+/) != -1;
            if (!isList) {
              listParagraphs.push(line);
              itemText = "";
            } else {
              line.split("\n").forEach((itemLine) => {
                let level = 0;
                const endIndex = itemLine.search(/[\-\+\*]{1}|([0-9]\.){1}\s+/);
                const tabText = itemLine.slice(0, endIndex);
                const tabs = tabText.match(/\t/g);
                if (tabs) {
                  level = tabs.length;
                }
                if (level == 0) {
                  if (itemText != "") {
                    listItems.push(itemText);
                    itemText = "";
                  }
                  itemText = "" + itemText.concat(itemLine + "\n");
                } else if (level > 0 && itemText != "") {
                  itemText = itemText.concat(itemLine + "\n");
                }
              });
            }
          });
          if (itemText != "") {
            listItems.push(itemText);
            itemText = "";
          }
          listItems.forEach((line) => {
            listTags = line.match(/#[\p{L}0-9_\-/#]+/gu);
            if (listTags != null && listTags.length > 0) {
              if (this.isValidText(listTags, tags, include, exclude)) {
                listParagraphs.push(line);
              }
            }
          });
        }
      });
      listParagraphs.forEach(async (paragraph) => {
        var _a;
        paragraph += "\n";
        var regex = new RegExp();
        var tagText = new String();
        var tagSection = null;
        tags.forEach((tag) => {
          tagText = tag.replace("#", "\\#");
          regex = new RegExp(`${tagText}(\\W|$)`, "g");
          if (paragraph.match(regex) != null) {
            tagSection = tag;
          }
        });
        let blockLink = paragraph.match(/\^[\p{L}0-9_\-/^]+/gu);
        if (blockLink) {
          paragraph = "**[[" + filePath2 + "#" + blockLink + "|" + fileName + "]]**\n" + paragraph;
        } else {
          paragraph = "**[[" + filePath2 + "|" + fileName + "]]**\n" + paragraph;
        }
        paragraph += "\n\n";
        summary += paragraph;
        const paragraphContent = createEl("blockquote");
        paragraphContent.setAttribute("file-source", filePath2);
        await import_obsidian2.MarkdownRenderer.renderMarkdown(paragraph, paragraphContent, (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path, tempComponent);
        summaryContainer.appendChild(paragraphContent);
      });
    });
    if (summary != "") {
      summaryContainer.setAttribute("codeblock-tags", tags.join(","));
      summaryContainer.setAttribute("codeblock-tags-include", include.length > 0 ? include.join(",") : "");
      summaryContainer.setAttribute("codeblock-tags-exclude", exclude.length > 0 ? exclude.join(",") : "");
      element.replaceWith(summaryContainer);
    } else {
      this.createEmptySummary(element);
    }
  }
  /////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////
};
var TempComponent = class extends import_obsidian2.Component {
  onload() {
  }
  onunload() {
  }
};
var DoubleTapHandler = class {
  constructor(plugin, element, callback) {
    this.plugin = plugin;
    this.element = element;
    this.callback = callback;
    this.lastTap = 0;
    this.plugin.registerDomEvent(this.element, "touchend", this.handleTouchEnd.bind(this), true);
  }
  handleTouchEnd(event) {
    const currentTime = new Date().getTime();
    const tapLength = currentTime - this.lastTap;
    clearTimeout(this.timeout);
    if (tapLength < 500 && tapLength > 0) {
      this.callback(event);
    } else {
      this.timeout = setTimeout(() => {
        clearTimeout(this.timeout);
      }, 500);
    }
    this.lastTap = currentTime;
  }
};
var PressAndHoldHandler = class {
  constructor(plugin, element, callback, duration = 600) {
    this.plugin = plugin;
    this.element = element;
    this.callback = callback;
    this.duration = duration;
    this.timeout = null;
    this.plugin.registerDomEvent(this.element, "touchstart", this.handleTouchStart.bind(this), true);
    this.plugin.registerDomEvent(this.element, "touchend", this.handleTouchEnd.bind(this), true);
  }
  handleTouchStart(event) {
    this.timeout = setTimeout(() => {
      this.callback(event);
      this.timeout = null;
    }, this.duration);
  }
  handleTouchEnd(event) {
    if (this.timeout) {
      clearTimeout(this.timeout);
      this.timeout = null;
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzZXR0aW5ncy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgVEJTZXR0aW5nc1RhYiB9IGZyb20gXCIuL3NldHRpbmdzXCI7XG5pbXBvcnQgeyBBcHAsIGRlYm91bmNlLCBFZGl0b3IsIE1hcmtkb3duUmVuZGVyZXIsIENvbXBvbmVudCwgVEZpbGUsIGdldEFsbFRhZ3MsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5cbmludGVyZmFjZSBUQlNldHRpbmdzIHtcblx0cmVtb3ZlT25DbGljazogYm9vbGVhbjsgLy8gY3RybFxuXHRyZW1vdmVDaGlsZFRhZ3NGaXJzdDsgLy8gXG5cdG9wdFRvQ29udmVydDogYm9vbGVhbjsgLy9hbHRcblx0bW9iaWxlVGFnU2VhcmNoOiBib29sZWFuOyBcblx0bW9iaWxlTm90aWNlczogYm9vbGVhbjsgXG5cdGRlYnVnTW9kZTogYm9vbGVhbjtcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogUGFydGlhbDxUQlNldHRpbmdzPiA9IHtcblx0cmVtb3ZlT25DbGljazogdHJ1ZSwgLy8gd2hlbiB0cnVlLCBjbWQgaXMgbmVlZGVkIHdoZW4gY2xpY2tpbmcgdG8gcmVtb3ZlIHRoZSB0YWdcblx0cmVtb3ZlQ2hpbGRUYWdzRmlyc3Q6IHRydWUsIC8vIHVzZSBzaGlmdCB3aGVuIGZhbHNlXG5cdG9wdFRvQ29udmVydDogdHJ1ZSwgLy8gd2hlbiBmYWxzZSwgY2xpY2tpbmcgdGFnIHdpbGwgZG8gbm90aGluZ1xuXHRtb2JpbGVUYWdTZWFyY2g6IGZhbHNlLCAvLyB0b2dnbGUgb24gdXNlIGRvdWJsZSB0YXAgZm9yIHNlYXJjaC4gcHJlc3MraG9sZCB3aWxsIHRoZW4gcmVtb3ZlLlxuXHRtb2JpbGVOb3RpY2VzOiB0cnVlLFxuXHRkZWJ1Z01vZGU6IGZhbHNlLFxufTsgXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhZ0J1ZGR5IGV4dGVuZHMgUGx1Z2luIHsgIFxuXHRzZXR0aW5nczogVEJTZXR0aW5ncztcblxuXHRvbnVubG9hZCgpIHt9XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBUQlNldHRpbmdzVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHRcblx0XHRcblx0XHRjb25zb2xlLmxvZygnVGFnIEJ1ZGR5IFBsdWdpbiBsb2FkZWQgb24gJyArICh0aGlzLmFwcC5pc01vYmlsZT8nbW9iaWxlIGF0ICc6J2Rlc2t0b3AgYXQgJykgKyBuZXcgRGF0ZSgpLnRvVVRDU3RyaW5nKCkuc3Vic3RyaW5nKDE3KSk7XG5cblx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub25MYXlvdXRSZWFkeShhc3luYyAoKSA9PiB7XG5cdFx0XHRcblx0XHRcdC8vIHRoaXMucmVsb2FkKCk7IC8vIG5vIG5lZWQgZm9yIHRoaXMgYXRtLlxuXHRcdFx0c2V0VGltZW91dChhc3luYyAoKSA9PiB7IHRoaXMucHJvY2Vzc1RhZ3MoKTsgfSwgMTAwMClcblx0XHRcdFxuXHRcdFx0Ly8gRG9uJ3QgbmVlZCB0aGlzIGV2ZW50IGJlY2F1c2Ugd2UnbGwgYWx3YXlzIG5lZWQgdG8gc3dpdGNoIGJldHdlZW4gdmlld3MgdG8gZWRpdCBub3RlIGFuZCBhZmZlY3QgdGhlIHRhZyBpbmRpY2VzLlxuXHRcdFx0Ly8gdGhpcy5yZWdpc3RlckV2ZW50KHRoaXMuYXBwLndvcmtzcGFjZS5vbignZWRpdG9yLWNoYW5nZScsIGRlYm91bmNlKGFzeW5jICgpID0+IHsgY29uc29sZS5sb2coJ2VkaXRvciBjaGFuZ2UnKTsgdGhpcy5wcm9jZXNzVGFncygpOyB9LCAzMDAwLCB0cnVlKSkpO1xuXHRcdFx0Ly8gRG9uJ3QgbmVlZCB0aGlzIGV2ZW50IGJlY2F1c2UgbGVhZiBjaGFuZ2VzIGRvbid0IGVmZmVjdCB0aGUgcmF3IGNvbnRlbnQuXG5cdFx0XHQvLyB0aGlzLnJlZ2lzdGVyRXZlbnQoIHRoaXMuYXBwLndvcmtzcGFjZS5vbignYWN0aXZlLWxlYWYtY2hhbmdlJywgZGVib3VuY2UoYXN5bmMgKCkgPT4geyBjb25zb2xlLmxvZygnYWN0aXZlIGxlYWYgY2hhbmdlJyk7IHRoaXMucHJvY2Vzc1RhZ3MoKTsgfSwgMzAwLCB0cnVlKSkgKTtcblx0XHRcdC8vIEJ1dCBvbmUgb2YgdGhlc2UgbWlnaHQgYmUgdXNlZnVsIHdoZW4gd2UgY2xpY2sgdGFncyBpbiBvdGhlciBwbHVnaW5zIGxpa2UgcmVwZWF0IG9yIGNoZWNrbGlzdFxuXHRcdFx0Ly8gVGhpcyBldmVudCBpcyBiZXN0IGJlY2F1c2Ugd2UgYWx3YXlzIG5lZWQgdG8gc3dpdGNoIG1vZGVzIHRvIGVkaXQgbm90ZSBvciBpbnRlcmFjdCB3aXRoIHRhZyAocmVhZGluZyBtb2RlKS5cblx0XHRcdFxuXHRcdFx0dGhpcy5yZWdpc3RlckV2ZW50KCB0aGlzLmFwcC5vbignbGF5b3V0LWNoYW5nZScsIChldmVudDogRWRpdG9yRXZlbnQpID0+IHsgXG5cdFx0XHRcdHNldFRpbWVvdXQoYXN5bmMgKCkgPT4geyBcblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZygnbGF5b3V0IGNoYW5nZScpOyBcblx0XHRcdFx0XHR0aGlzLnByb2Nlc3NUYWdzKCk7IFxuXHRcdFx0XHR9LCAzMDApOyBcblx0XHRcdH0pKTtcblx0XHRcdFxuXHRcdFx0Ly8gVGhlcmUgaXMgYSBsaXR0bGUgcmVkdW5kYW5jeSBoZXJlIGJlY2F1c2Ugd2UgYWxzbyBnZXQgbGF5b3V0IGV2ZW50cyB3aGVuIHN3aXRjaGluZyBmaWxlc1xuXHRcdFx0dGhpcy5yZWdpc3RlckV2ZW50KHRoaXMuYXBwLm9uKCdmaWxlLW9wZW4nLCBhc3luYyAoZXZlbnQ6IEVkaXRvckV2ZW50KSA9PiB7IFxuXHRcdFx0XHRzZXRUaW1lb3V0KGFzeW5jICgpID0+IHsgXG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ2ZpbGUgb3BlbicpOyBcblx0XHRcdFx0XHR0aGlzLnByb2Nlc3NUYWdzKCk7IFxuXHRcdFx0XHR9LCAxMDAwKTsgXG5cdFx0XHR9KSk7XG5cblx0XHRcdGlmICghdGhpcy5hcHAuaXNNb2JpbGUpIHtcblxuXHRcdFx0XHQvLyBUaGlzIGV2ZW50IGhhbmRsZXMgYWxsIHRoZSBpbnRlcmFjdGlvbnMgb24gZGVza3RvcFxuXHRcdFx0XHR0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycsIHRoaXMub25DbGlja0V2ZW50LmJpbmQodGhpcyksIHRydWUpO1xuXG5cdFx0XHR9IGVsc2UgeyAvLyBNb2JpbGUgaW50ZXJhY3Rpb25cblxuXHRcdFx0XHQvLyBUaGlzIGV2ZW50IGNhdGNoZXMgYWxsIHRhcHMgb24gbW9iaWxlIGJlY2F1c2Ugd2UgaGF2ZSBjdXN0b20gZG91YmxlLXRhcCBhbmQgcHJlc3MtaG9sZCBldmVudHMuXG5cdFx0XHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJywgKGUpID0+IHsgXG5cdFx0XHRcdFx0Y29uc3QgaXNUYWcgPSBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3RhZycpO1xuXHRcdFx0XHRcdGlmIChpc1RhZyAmJiAhdGhpcy5zZXR0aW5ncy5tb2JpbGVUYWdTZWFyY2gpIHtcblx0XHRcdFx0XHRcdC8vbmV3IE5vdGljZSAoJ3N0b3AgcHJvcCcpXG5cdFx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgdHJ1ZSk7XG5cblx0XHRcdFx0bmV3IFByZXNzQW5kSG9sZEhhbmRsZXIodGhpcywgZG9jdW1lbnQsIHRoaXMub25DbGlja0V2ZW50LmJpbmQodGhpcykpO1xuXHRcdFx0XHRuZXcgRG91YmxlVGFwSGFuZGxlcih0aGlzLCBkb2N1bWVudCwgdGhpcy5vbkNsaWNrRXZlbnQuYmluZCh0aGlzKSk7XG5cdFx0XHR9XHRcblx0XHRcdFxuXHRcdH0pO1xuXG5cdFx0Ly8gVGFnIHN1bW1hcnkgY29kZSBibG9ja1xuXHRcdHRoaXMucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcihcInRhZy1zdW1tYXJ5XCIsIHRoaXMuc3VtbWFyeUNvZGVCbG9ja1Byb2Nlc3Nvci5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdGFzeW5jIG9uQ2xpY2tFdmVudCAoZXZlbnQpIHtcblx0XHRcblx0XHQvLyBJZiB0YWcgaGFzIG5vIGNvbnRleHQgcHJvcGVydGllcywgdGhlbiB0cnkgdG8gZmlndXJlIG91dCB3aGVyZSBpdCBpcz9cblx0XHQvLyBPciBtYXliZSB0aGVyZSdzIGEgd2F5IHRvIGhhdmUgb2JzaWRpYW4gYWRkIHRoZSBwcm9wZXJ0aWVzIGdsb2JhbGx5LlxuXHRcdC8vbmV3IE5vdGljZSAoJ1RhZyBCdWRkeSBldmVudCB0eXBlOiAnICsgZXZlbnQudHlwZSk7XG5cblx0XHRjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG5cdFx0Y29uc3QgdmlldyA9IGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG5cblx0XHQvLyBUaGlzIGNvbmRpdGlvbiBpdCBpbiBjYXNlIHdlIGNsaWNrIG9uIGEgdGFnIGluIGFub3RoZXIgcGx1Z2luIGxpa2UgcmVwZWF0IG9yIGNoZWNrbGlzdFxuXHRcdC8vIGNhbid0IGVkaXQgdGFncyBpbiB0aGVzZSBjYXNlcy4gRm9yIG5vdy5cblx0XHRpZiAoIXZpZXcgJiYgdGFyZ2V0Lm1hdGNoZXMoJy50YWcnKSkgeyBcblx0XHRcdG5ldyBOb3RpY2UoJ1RhZyBCdWRkeTogQ2FuXFwndCBlZGl0IHRhZy4gVW5zdXBwb3J0ZWQgdmlldyB0eXBlLiBUcnkgYWdhaW4gd2l0aGluIHRoYXQgbm90ZS4nKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAodmlldykgeyBcblx0XHRcdGlmICh2aWV3LmdldE1vZGUoKSAhPSAncHJldmlldycpIHJldHVybjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly9pZiAoZG9jdW1lbnQuY29udGFpbnMoJ3JlcGVhdC1lbWJlZGRlZF9ub3RlJykpXG5cdFx0fVxuXHRcdFx0XHQvL3x8IChBcnJheS5mcm9tKGVtYmVkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5yZXBlYXQtZW1iZWRkZWRfbm90ZScpKS5sZW5ndGggPD0gMCkpIHJldHVybjtcblx0XHRcdC8vcmVwZWF0LWVtYmVkZGVkX25vdGUgbWFya2Rvd24tZW1iZWRcblx0XHQvL30gZWxzZSB7XG5cdFx0Ly9cdHJldHVybjtcblx0XHQvL31cblx0XHRcblx0XHRpZiAoIXRoaXMuYXBwLmlzTW9iaWxlKSB7XG5cdFx0XHRpZiAoKHRoaXMuc2V0dGluZ3MucmVtb3ZlT25DbGljayAmJiBldmVudC5tZXRhS2V5KSB8fCAoIXRoaXMuc2V0dGluZ3MucmVtb3ZlT25DbGljayAmJiAhZXZlbnQubWV0YUtleSkpIHsgXG5cdFx0XHRcdHJldHVybjsgXG5cdFx0XHR9IGVsc2UgaWYgKGV2ZW50LmFsdEtleSAmJiAhdGhpcy5zZXR0aW5ncy5vcHRUb0NvbnZlcnQpIHsgIFxuXHRcdFx0XHRyZXR1cm47IFxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBuZXcgTm90aWNlKCdtb2JpbGUgdGFnIHNlYXJjaCBpcyAnICsgdGhpcy5zZXR0aW5ncy5tb2JpbGVUYWdTZWFyY2gpXG5cdFx0XHQvLyBuZXcgTm90aWNlICgnVGFnIEJ1ZGR5IGV2ZW50IHR5cGU6ICcgKyBldmVudC50eXBlKTtcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLm1vYmlsZVRhZ1NlYXJjaCAmJiBldmVudC50eXBlID09ICd0b3VjaGVuZCcpIHtcblx0XHRcdFx0Ly8gaWYgd2UgZ2V0IHRoaXMgZmFyLCB0aGlzIGlzIGEgZG91YmxlIHRhcFxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIG1heWJlIGFmdGVyIG1vYmlsZSBzZXR0aW5nczogbG9uZyBwcmVzcyBjYW4gZG8gY29udmVydCBvciByZW1vdmUvZWRpdFxuXHRcdFx0Ly8gZG91YmxlIHRhcCBjYW4gZG8gcmVtb3ZlL2VkaXQgb3Igc2VhcmNoICh2aWEgbmF0aXZlIGNsaWNrLCB3aXRob3V0IHByb3Agc3RvcCkuIGlmIGRvdWJsZS10YXAgZGlzYWJsZWQsIHRoZW4gbmF0aXZlIGhhcHBlbnMuXG5cdFx0fVxuXHRcdFxuXG5cdFx0Ly9pZiAodmlldyAmJiB0YXJnZXQgJiYgdGFyZ2V0Lm1hdGNoZXMoJy50YWcnKSkge1x0XG5cdFx0aWYgKHRhcmdldCAmJiB0YXJnZXQubWF0Y2hlcygnLnRhZycpKSB7XHRcblx0XHRcdC8vIGNvbnN0IHNjcm9sbFN0YXRlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KT8uY3VycmVudE1vZGU/LmdldFNjcm9sbCgpO1xuXG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5yZW1vdmVPbkNsaWNrIHx8ICghdGhpcy5zZXR0aW5ncy5yZW1vdmVPbkNsaWNrICYmIGV2ZW50Lm1ldGFLZXkpKSB7XG5cdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBjbGlja2VkVGFnID0gdGFyZ2V0LmNsb3Nlc3QoJy50YWcnKTsgLy9ldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG5cdFx0XHRjb25zdCB0YWcgPSBjbGlja2VkVGFnLmlubmVyVGV4dDtcblxuXHRcdFx0bGV0IHRhZ0luZGV4ID0gY2xpY2tlZFRhZy5nZXRBdHRyaWJ1dGUoJ21kLWluZGV4Jyk7XG5cdFx0XHRsZXQgdGFnRmlsZSA9IGNsaWNrZWRUYWcuZ2V0QXR0cmlidXRlKCdmaWxlLXNvdXJjZScpO1xuXG5cdFx0XHRpZiAodGFnRmlsZSkge1xuXHRcdFx0XHQvLyBUcnlcblx0XHRcdFx0dGhpcy5lZGl0VGFnIChldmVudCwgdGFnSW5kZXgsIHRhZ0ZpbGUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gVHJ5IGFnYWluXG5cdFx0XHRcdHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdHRhZ0luZGV4ID0gY2xpY2tlZFRhZy5nZXRBdHRyaWJ1dGUoJ21kLWluZGV4Jyk7XG5cdFx0XHRcdFx0dGFnRmlsZSA9IGNsaWNrZWRUYWcuZ2V0QXR0cmlidXRlKCdmaWxlLXNvdXJjZScpO1xuXHRcdFx0XHRcdHRoaXMuZWRpdFRhZyAoZXZlbnQsIHRhZ0luZGV4LCB0YWdGaWxlKTtcblx0XHRcdFx0fSwgMTAwKTtcblx0XHRcdH1cblx0XHRcdC8vY29uc29sZS5sb2coY2xpY2tlZFRhZy5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSlcblxuXHRcdFx0aWYgKGNsaWNrZWRUYWcuZ2V0QXR0cmlidXRlKCd0eXBlJykgPT0gJ3BsdWdpbi1zdW1tYXJ5Jykge1xuXHRcdFx0XHRzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjb25zdCBzdW1tYXJ5Q29udGFpbmVyID0gY2xpY2tlZFRhZy5jbG9zZXN0KCcuc3VtbWFyeScpO1xuXHRcdFx0XHRcdGNvbnN0IHRhZ3NTdHIgPSBzdW1tYXJ5Q29udGFpbmVyLmdldEF0dHJpYnV0ZSgnY29kZWJsb2NrLXRhZ3MnKTtcblx0XHRcdFx0XHRjb25zdCB0YWdzID0gdGFnc1N0ciA/IHRhZ3NTdHIuc3BsaXQoJywnKSA6IFtdO1xuXG5cdFx0XHRcdFx0Y29uc3QgdGFnc0luY2x1ZGVTdHIgPSBzdW1tYXJ5Q29udGFpbmVyLmdldEF0dHJpYnV0ZSgnY29kZWJsb2NrLXRhZ3MtaW5jbHVkZScpO1xuXHRcdFx0XHRcdGNvbnN0IHRhZ3NJbmNsdWRlID0gdGFnc0luY2x1ZGVTdHIgPyB0YWdzSW5jbHVkZVN0ci5zcGxpdCgnLCcpIDogW107XG5cblx0XHRcdFx0XHRjb25zdCB0YWdzRXhjbHVkZVN0ciA9IHN1bW1hcnlDb250YWluZXIuZ2V0QXR0cmlidXRlKCdjb2RlYmxvY2stdGFncy1leGNsdWRlJyk7XG5cdFx0XHRcdFx0Y29uc3QgdGFnc0V4Y2x1ZGUgPSB0YWdzRXhjbHVkZVN0ciA/IHRhZ3NFeGNsdWRlU3RyLnNwbGl0KCcsJykgOiBbXTtcblxuXHRcdFx0XHRcdC8vIFJlY3JlYXRlIHN1bW1hcnkgYWZ0ZXIgd2UndmUgZWRpdGVkIHRoZSBmaWxlXG5cdFx0XHRcdFx0dGhpcy5jcmVhdGVTdW1tYXJ5KHN1bW1hcnlDb250YWluZXIsIHRhZ3MsIHRhZ3NJbmNsdWRlLCB0YWdzRXhjbHVkZSk7XG5cblx0XHRcdFx0XHRzZXRUaW1lb3V0KGFzeW5jICgpID0+IHsgdGhpcy5wcm9jZXNzVGFncygpOyB9LCAyMDApO1xuXG5cdFx0XHRcdFx0Ly8gdGhpcy5yZWZyZXNoVmlldygpOyAvLyBubyBuZWVkIGZvciB0aGlzIGF0bVxuXG5cdFx0XHRcdH0sIDE1MCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZXRUaW1lb3V0KGFzeW5jICgpID0+IHsgdGhpcy5wcm9jZXNzVGFncygpOyB9LCA1MClcblx0XHRcdH1cdFxuXHRcdC8vfSBlbHNlIGlmICh2aWV3ID09IG51bGwgJiYgdGFyZ2V0ICYmIHRhcmdldC5tYXRjaGVzKCcudGFnJykpIHtcblx0XHR9IGVsc2UgaWYgKCF2aWV3ICYmIHRhcmdldC5tYXRjaGVzKCcudGFnJykpIHtcblx0XHRcdG5ldyBOb3RpY2UoJ1RhZyBCdWRkeTogQ2FuXFwndCBlZGl0IHRhZy4gTWlnaHQgYmUgaW4gYW4gdW5zdXBwb3J0ZWQgdmlldyB0eXBlLicpO1xuXHRcdH1cblx0fVxuXG5cdGFzeW5jIHByb2Nlc3NUYWdzICgpIHtcblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmRlYnVnTW9kZSkgY29uc29sZS5sb2coJ1RhZyBCdWRkeTogUHJvY2Vzc2luZyB0YWdzLicpO1xuXG5cdFx0Y29uc3QgdmlldyA9IGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG5cdFx0Ly9zZXRUaW1lb3V0KGFzeW5jICgpID0+IHsgXG5cdFx0Y29uc3QgYWN0aXZlTm90ZUNvbnRhaW5lciA9IGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmLmNvbnRhaW5lckVsO1xuXHRcdC8vY29uc3QgYWN0aXZlTm90ZUNvbnRhaW5lciA9IGF3YWl0IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy52aWV3LWNvbnRlbnQnKTtcblx0XHQvL2NvbnN0IGFjdGl2ZU5vdGVDb250YWluZXIgPSBhd2FpdCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFya2Rvd24tcmVhZGluZy12aWV3Jyk7Ly8gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWYuY29udGFpbmVyRWw7XG5cdFx0Ly99LCAyMDApXG5cdFx0Ly9zZXRUaW1lb3V0KGFzeW5jICgpID0+IHsgLy8gQWxsIHRoZXNlIHRpbWVvdXRzIHdlcmUgZm9yIHRlc3RpbmcuIElzc3VlcyBzZWVtcyB0byBiZSByZXNvbHZlZCBub3cuXG5cdFx0Y29uc3QgYWN0aXZlRmlsZSA9IGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0Y29uc3QgZmlsZUNvbnRlbnQgPSBhd2FpdCBhcHAudmF1bHQucmVhZChhY3RpdmVGaWxlKTtcblx0XHRjb25zdCBhY3RpdmVGaWxlVGFnRWxlbWVudHMgPSBhd2FpdCBhY3RpdmVOb3RlQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2QtYWN0aXZlIC50YWc6bm90KC5tYXJrZG93bi1lbWJlZCAudGFnKTpub3QoLnN1bW1hcnkgLnRhZyknKTtcblx0XHQvL2NvbnN0IGFjdGl2ZUZpbGVUYWdFbGVtZW50cyA9IGF3YWl0IGFjdGl2ZU5vdGVDb250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY20taGFzaHRhZycpXG5cdFx0Ly9jb25zb2xlLmxvZyhBcnJheS5mcm9tKGFjdGl2ZUZpbGVUYWdFbGVtZW50cykubGVuZ3RoKVxuXHRcdC8vY29uc29sZS5sb2coQXJyYXkuZnJvbShhY3RpdmVGaWxlVGFnRWxlbWVudHMpLm1hcChlbGVtZW50ID0+IGVsZW1lbnQuaW5uZXJUZXh0KSk7XG5cblxuXHRcdC8vc2V0VGltZW91dChhc3luYyAoKSA9PiB7IGNvbnNvbGUubG9nKGFjdGl2ZUZpbGVUYWdFbGVtZW50cyl9LCAxMDAwKVxuXHRcdGNvbnN0IGFjdGl2ZUZpbGVUYWdzID0gYXdhaXQgdGhpcy5nZXRNYXJrZG93blRhZ3MoYWN0aXZlRmlsZSwgZmlsZUNvbnRlbnQpO1xuXHRcdHRoaXMuYXNzaWduTWFya2Rvd25UYWdzKGFjdGl2ZUZpbGVUYWdzLCBhY3RpdmVGaWxlVGFnRWxlbWVudHMsIDAsICdhY3RpdmUnKTtcblx0XHR0aGlzLnByb2Nlc3NFbWJlZHMoYWN0aXZlTm90ZUNvbnRhaW5lcik7XG5cdFx0Ly99LCA1MDApXG5cdH1cblxuXHRhc3luYyBnZXRNYXJrZG93blRhZ3MgKGZpbGUsIGZpbGVDb250ZW50KSB7XG5cdFx0Y29uc3QgdGFnUG9zaXRpb25zID0gW107XG5cdFx0bGV0IG1hdGNoO1xuXG5cdFx0Y29uc3QgcmVnZXggPSAvKD86XnxcXHMpI1teXFxzI10rfGBgYC9nOyAvLyBBZGp1c3RlZCB0aGUgcmVnZXggdG8gYWxzbyBtYXRjaCBjb2RlIGJsb2NrIGRlbGltaXRlcnNcblx0XHRsZXQgaW5zaWRlQ29kZUJsb2NrID0gZmFsc2U7XG5cblx0XHR3aGlsZSAoKG1hdGNoID0gcmVnZXguZXhlYyhmaWxlQ29udGVudCkpICE9PSBudWxsKSB7XG5cdFx0ICAgIGlmIChtYXRjaFswXS50cmltKCkgPT09IFwiYGBgXCIpIHtcblx0XHQgICAgICAgIGluc2lkZUNvZGVCbG9jayA9ICFpbnNpZGVDb2RlQmxvY2s7IFxuXHRcdCAgICAgICAgY29udGludWU7XG5cdFx0ICAgIH1cblx0XHQgICAgXG5cdFx0ICAgIGlmIChpbnNpZGVDb2RlQmxvY2spIGNvbnRpbnVlO1xuXG5cdFx0ICAgIGNvbnN0IHRhZyA9IG1hdGNoWzBdLnRyaW0oKTtcblx0XHQgICAgLy8gTG9vayBhaGVhZCBmcm9tIHRoZSBjdXJyZW50IG1hdGNoIGFuZCBzZWUgaWYgaXQncyBmb2xsb3dlZCBieSBdXVxuXHRcdCAgICBpZiAoZmlsZUNvbnRlbnQuc2xpY2UobWF0Y2guaW5kZXgsIG1hdGNoLmluZGV4ICsgdGFnLmxlbmd0aCArIDIpLmVuZHNXaXRoKFwiXV1cIikpIHtcblx0XHQgICAgICAgIGNvbnRpbnVlOyAvLyBTa2lwIHRoaXMgbWF0Y2ggYXMgaXQncyBwYXJ0IG9mIGEgd2lraWxpbmtcblx0XHQgICAgfVxuXHRcdCAgICAvL2NvbnNvbGUubG9nKG1hdGNoLmluZGV4KVxuXHRcdCAgICB0YWdQb3NpdGlvbnMucHVzaCh7dGFnOnRhZywgaW5kZXg6bWF0Y2guaW5kZXgsIHNvdXJjZTpmaWxlLm5hbWV9KTsgXG5cdFx0fVxuXHRcdC8vY29uc29sZS5sb2coJ21hcmtkb3duIHRhZyBjb3VudDogJyArIHRhZ1Bvc2l0aW9ucy5sZW5ndGgpXG5cblx0XHRyZXR1cm4gdGFnUG9zaXRpb25zO1xuXHR9XG5cblx0YXNzaWduTWFya2Rvd25UYWdzICh0YWdQb3NpdGlvbnMsIHRhZ0VsZW1lbnRzLCBzdGFydEluZGV4LCB0eXBlKSB7XG5cdFx0bGV0IHRhZ0VsO1xuXHRcdGNvbnN0IHRhZ0VsQXJyYXkgPSBBcnJheS5mcm9tKHRhZ0VsZW1lbnRzKTtcblx0XHRsZXQgdGFnRWxJbmRleCA9IDA7XG5cdFx0dGFnUG9zaXRpb25zLmZvckVhY2goKHRhZ1BvcywgaW5kZXgpID0+IHtcblxuXHRcdFx0aWYgKHRhZ1Bvc2l0aW9uc1tpbmRleF0uaW5kZXggPj0gc3RhcnRJbmRleCkge1xuXHRcdFx0XHR0YWdFbCA9IHRhZ0VsQXJyYXlbdGFnRWxJbmRleF0gYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIFx0XHRpZiAodGFnRWwpIHtcbiAgICAgICAgXHRcdFx0dGFnRWwuc2V0QXR0cmlidXRlKCdtZC1pbmRleCcsIHRhZ1Bvc2l0aW9uc1tpbmRleF0uaW5kZXgpO1xuICAgICAgICBcdFx0XHR0YWdFbC5zZXRBdHRyaWJ1dGUoJ2ZpbGUtc291cmNlJywgdGFnUG9zaXRpb25zW2luZGV4XS5zb3VyY2UpO1xuICAgICAgICBcdFx0XHR0YWdFbC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCB0eXBlKTtcbiAgICAgICAgXHRcdFx0dGFnRWxJbmRleCsrO1xuICAgICAgICBcdFx0fSBcbiAgICBcdFx0fSBcblx0XHR9KTsgXG5cdFx0Ly9jb25zb2xlLmxvZygndGFnIGVsZW1lbnQgYXJyYXkgbGVuZ3RoOiAnICsgdGFnRWxBcnJheS5sZW5ndGgpO1xuXHRcdHJldHVybiB0YWdFbEFycmF5OyAvL0FycmF5LmZyb20odGFnRWxlbWVudHMpOyBcblx0fVxuXG5cdGFzeW5jIHByb2Nlc3NFbWJlZHMgKGVsZW1lbnQpIHtcbiBcdFx0Ly9jb25zdCBhY3RpdmVGaWxlVGFnRWxlbWVudHMgPSBhd2FpdCBhY3RpdmVOb3RlQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2QtYWN0aXZlIC50YWc6bm90KC5tYXJrZG93bi1lbWJlZCAudGFnKTpub3QoLnN1bW1hcnkgLnRhZyknKTtcblx0XHRcblx0XHRjb25zdCBlbWJlZHMgPSBhd2FpdCBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zdW1tYXJ5LCAubWFya2Rvd24tZW1iZWQnKTtcblx0XHQvL2xldCBlbWJlZGVkVGFnRmlsZXMgPSBbXTtcblxuXHRcdGVtYmVkcy5mb3JFYWNoKGFzeW5jIChlbWJlZCkgPT4ge1xuXHRcdFx0aWYgKGVtYmVkLmNsYXNzTGlzdC5jb250YWlucygnc3VtbWFyeScpKSB7XG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ3RoaXMgaXMgYSBzdW1tYXJ5JylcblxuXHRcdFx0XHQvLyBNb3ZlZCB0aGlzIGNvZGUgdG8gc2VwYXJhdGUgbWV0aG9kcyB0byBwcm9jZXNzIG5lc3RlZCBjb250ZW50XG5cdFx0XHRcdC8qbGV0IHN1bW1hcnlCbG9ja3MgPSBlbWJlZC5xdWVyeVNlbGVjdG9yQWxsKCdibG9ja3F1b3RlJyk7IFxuXG5cdFx0XHRcdHN1bW1hcnlCbG9ja3MuZm9yRWFjaChhc3luYyAoYmxvY2ssIGluZGV4KSA9PiB7XG5cdFx0XHRcdFx0Ly9jb25zdCBsaW5rRWxlbWVudCA9IGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJ2FbZGF0YS1ocmVmJD1cIi5tZFwiXScpO1xuXHRcdFx0XHRcdGNvbnN0IGZpbGVQYXRoID0gYmxvY2suZ2V0QXR0cmlidXRlKCdmaWxlLXNvdXJjZScpOyAvLyBsaW5rRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaHJlZicpXG5cdFx0XHRcdFx0Y29uc3QgZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlUGF0aCk7XG5cblx0XHRcdFx0XHRpZiAoZmlsZSkge1xuXHRcdFx0XHRcdFx0Y29uc3QgZmlsZUNvbnRlbnQgPSBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKTtcblx0XHRcdFx0XHRcdGNvbnN0IGVtYmVkZWRUYWdGaWxlID0gYXdhaXQgdGhpcy5nZXRNYXJrZG93blRhZ3MoZmlsZSwgZmlsZUNvbnRlbnQpXG5cdFx0XHRcdFx0XHQvL2VtYmVkZWRUYWdGaWxlcy5wdXNoKGVtYmVkZWRUYWdGaWxlKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Ly8gQ3JlYXRlIGEgdGVtcG9ydHkgZWxlbWVudCBibG9jayBzbyB3ZSBjYW4gbWF0Y2ggbWF0Y2ggdGV4dCBvbmx5IGNvbnRlbnQgb2YgdGhpcyBlbGVtZW50IHdpdGggaXQncyBzb3VyY2Ugbm90ZVxuXHRcdFx0XHRcdFx0Y29uc3QgdGVtcEJsb2NrID0gYmxvY2suY2xvbmVOb2RlKHRydWUpO1xuXHRcdFx0XHRcdFx0dGVtcEJsb2NrLnF1ZXJ5U2VsZWN0b3IoJ2JyJyk/LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0dGVtcEJsb2NrLnF1ZXJ5U2VsZWN0b3IoJ3N0cm9uZycpPy5yZW1vdmUoKTsgXG5cdFx0XHRcdFx0XHRjb25zdCBibG9ja1RleHQgPSB0aGlzLmNsZWFuU3RyaW5nKHRlbXBCbG9jay5pbm5lclRleHQpO1xuXG5cdFx0XHRcdFx0XHRjb25zdCBzdGFydEluZGV4ID0gdGhpcy5jbGVhblN0cmluZyhmaWxlQ29udGVudCkuaW5kZXhPZihibG9ja1RleHQpO1xuXG5cdFx0XHRcdFx0XHR0aGlzLmFzc2lnbk1hcmtkb3duVGFncyhlbWJlZGVkVGFnRmlsZSwgYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLnRhZycpLCBzdGFydEluZGV4LCAncGx1Z2luLXN1bW1hcnknKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1x0Ki9cblxuXHRcdFx0XHR0aGlzLnByb2Nlc3NUYWdTdW1tYXJ5KGVtYmVkKTtcdFxuXG5cdFx0XHR9IGVsc2UgaWYgKGVtYmVkLmNsYXNzTGlzdC5jb250YWlucygnbWFya2Rvd24tZW1iZWQnKSkge1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCd0aGlzIGlzIGFuIGVtYmVkJylcblxuXHRcdFx0XHQvLyBNb3ZlZCB0aGlzIGNvZGUgdG8gc2VwYXJhdGUgbWV0aG9kcyB0byBwcm9jZXNzIG5lc3RlZCBjb250ZW50XG5cblx0XHRcdFx0Lypjb25zdCBsaW5rRWxlbWVudCA9IGVtYmVkLmdldEF0dHJpYnV0ZSgnc3JjJyk7IC8vdGhpcy5maW5kQW5jZXN0b3IoY2xpY2tlZFRhZywgJ3NwYW4nKVxuXHRcdFx0XHRsZXQgZmlsZVBhdGggPSBlbWJlZC5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuXHRcdFx0XHRjb25zdCBsaW5rQXJyYXkgPSBmaWxlUGF0aC5zcGxpdCgnIycpO1xuXHRcdFx0XHRmaWxlUGF0aCA9IGxpbmtBcnJheVswXS50cmltKCkgKyAnLm1kJztcblx0XHRcdFx0Y29uc3QgZmlsZSA9IGF3YWl0IHRoaXMudmFsaWRhdGVGaWxlUGF0aChmaWxlUGF0aClcblx0XHRcdFx0aWYgKGZpbGUpIHtcblx0XHRcdFx0XHRjb25zdCBmaWxlQ29udGVudCA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGZpbGUpO1xuXHRcdFx0XHRcdGNvbnN0IGVtYmVkZWRUYWdGaWxlID0gYXdhaXQgdGhpcy5nZXRNYXJrZG93blRhZ3MoZmlsZSwgZmlsZUNvbnRlbnQpXG5cdFx0XHRcdFx0Ly9lbWJlZGVkVGFnRmlsZXMucHVzaChlbWJlZGVkVGFnRmlsZSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y29uc3QgdGVtcENvbXBvbmVudCA9IG5ldyBUZW1wQ29tcG9uZW50KCk7XG5cdFx0XHRcdFx0Y29uc3QgdGVtcENvbnRhaW5lckhUTUwgPSBjcmVhdGVFbChcImRpdlwiKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRhd2FpdCBNYXJrZG93blJlbmRlcmVyLnJlbmRlck1hcmtkb3duKGZpbGVDb250ZW50LCB0ZW1wQ29udGFpbmVySFRNTCwgZmlsZS5wYXRoLCB0ZW1wQ29tcG9uZW50KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjb25zdCBpbm5lclRleHQgPSB0aGlzLmNsZWFuU3RyaW5nKGVtYmVkLnF1ZXJ5U2VsZWN0b3IoJy5tYXJrZG93bi1lbWJlZC1jb250ZW50JykuaW5uZXJUZXh0KTtcblx0XHRcdFx0XHRjb25zdCBzdGFydEluZGV4ID0gdGhpcy5jbGVhblN0cmluZyh0ZW1wQ29udGFpbmVySFRNTC5pbm5lclRleHQpLmluZGV4T2YoaW5uZXJUZXh0KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmFzc2lnbk1hcmtkb3duVGFncyhlbWJlZGVkVGFnRmlsZSwgZW1iZWQucXVlcnlTZWxlY3RvckFsbCgnLnRhZycpLCBzdGFydEluZGV4LCAnbmF0aXZlLWVtYmVkJyk7XG5cdFx0XHRcdH0qL1xuXG5cdFx0XHRcdHRoaXMucHJvY2Vzc05hdGl2ZUVtYmVkKGVtYmVkKTtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnZm91bmQgc3VtbWFyeSBpbiBlbWJlZCwgY291bnQ6ICcgKyBBcnJheS5mcm9tKGVtYmVkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zdW1tYXJ5JykpLmxlbmd0aClcblx0XHRcdFx0aWYgKEFycmF5LmZyb20oZW1iZWQucXVlcnlTZWxlY3RvckFsbCgnLnN1bW1hcnknKSkubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ2ZvdW5kIGEgbmVzdGVkIHN1bW1hcnknKVxuXHRcdFx0XHRcdHRoaXMucHJvY2Vzc1RhZ1N1bW1hcnkoZW1iZWQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vfSBlbHNlIHtcblx0XHRcdFx0Ly9cdHRoaXMucHJvY2Vzc05hdGl2ZUVtYmVkKGVtYmVkKTtcblx0XHRcdFx0Ly99XG5cdFx0XHRcdC8vaWYgKGVtYmVkLmNsYXNzTGlzdC5xdWVyeVNlbGVjdG9yQWxsKCdzdW1tYXJ5JykpIHtcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdlbWJlZCBjb250YWlucyBzdW1tYXJ5Jylcblx0XHRcdFx0Ly99XG5cdFx0XHRcdC8vdGhpcy5wcm9jZXNzTmF0aXZlRW1iZWQoZW1iZWQpXG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vbmV3IE5vdGljZSgnVGFnIEJ1ZGR5OiBUYWcgZW1iZWQgaW4gdW5zdXBwb3J0ZWQgZWxlbWVudC4nKTtcblx0XHRcdFx0Ly8gSGFuZGxlIHRoaXMgaXNzdWUgb24gY2xpY2suXG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9KTtcblx0XHQvL3JldHVybiBlbWJlZGVkVGFnRmlsZXM7XG5cdH1cblxuXHRhc3luYyBwcm9jZXNzTmF0aXZlRW1iZWQgKGVtYmVkKSB7XG5cblx0XHRjb25zdCBsaW5rRWxlbWVudCA9IGVtYmVkLmdldEF0dHJpYnV0ZSgnc3JjJyk7IC8vdGhpcy5maW5kQW5jZXN0b3IoY2xpY2tlZFRhZywgJ3NwYW4nKVxuXHRcdGxldCBmaWxlUGF0aCA9IGVtYmVkLmdldEF0dHJpYnV0ZSgnc3JjJyk7XG5cdFx0Y29uc3QgbGlua0FycmF5ID0gZmlsZVBhdGguc3BsaXQoJyMnKTtcblx0XHRmaWxlUGF0aCA9IGxpbmtBcnJheVswXS50cmltKCkgKyAnLm1kJztcblx0XHRjb25zdCBmaWxlID0gYXdhaXQgdGhpcy52YWxpZGF0ZUZpbGVQYXRoKGZpbGVQYXRoKVxuXHRcdGlmIChmaWxlKSB7XG5cdFx0XHRjb25zdCBmaWxlQ29udGVudCA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGZpbGUpO1xuXHRcdFx0Y29uc3QgZW1iZWRlZFRhZ0ZpbGUgPSBhd2FpdCB0aGlzLmdldE1hcmtkb3duVGFncyhmaWxlLCBmaWxlQ29udGVudClcblx0XHRcdC8vZW1iZWRlZFRhZ0ZpbGVzLnB1c2goZW1iZWRlZFRhZ0ZpbGUpO1xuXHRcdFx0XG5cdFx0XHRjb25zdCB0ZW1wQ29tcG9uZW50ID0gbmV3IFRlbXBDb21wb25lbnQoKTtcblx0XHRcdGNvbnN0IHRlbXBDb250YWluZXJIVE1MID0gY3JlYXRlRWwoXCJkaXZcIik7XG5cdFx0XHRcblx0XHRcdGF3YWl0IE1hcmtkb3duUmVuZGVyZXIucmVuZGVyTWFya2Rvd24oZmlsZUNvbnRlbnQsIHRlbXBDb250YWluZXJIVE1MLCBmaWxlLnBhdGgsIHRlbXBDb21wb25lbnQpO1xuXHRcdFx0XG5cdFx0XHRjb25zdCBpbm5lclRleHQgPSB0aGlzLmNsZWFuU3RyaW5nKGVtYmVkLnF1ZXJ5U2VsZWN0b3IoJy5tYXJrZG93bi1lbWJlZC1jb250ZW50JykuaW5uZXJUZXh0KTtcblx0XHRcdGNvbnN0IHN0YXJ0SW5kZXggPSB0aGlzLmNsZWFuU3RyaW5nKHRlbXBDb250YWluZXJIVE1MLmlubmVyVGV4dCkuaW5kZXhPZihpbm5lclRleHQpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmFzc2lnbk1hcmtkb3duVGFncyhlbWJlZGVkVGFnRmlsZSwgZW1iZWQucXVlcnlTZWxlY3RvckFsbCgnLnRhZycpLCBzdGFydEluZGV4LCAnbmF0aXZlLWVtYmVkJyk7XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgcHJvY2Vzc1RhZ1N1bW1hcnkgKGVtYmVkKSB7XG5cblxuXHRcdGxldCBzdW1tYXJ5QmxvY2tzID0gZW1iZWQucXVlcnlTZWxlY3RvckFsbCgnYmxvY2txdW90ZScpOyBcblx0XHQvL2NvbnNvbGUubG9nKHN1bW1hcnlCbG9ja3MpXG5cdFx0c3VtbWFyeUJsb2Nrcy5mb3JFYWNoKGFzeW5jIChibG9jaywgaW5kZXgpID0+IHtcblx0XHRcdC8vY29uc3QgbGlua0VsZW1lbnQgPSBibG9jay5xdWVyeVNlbGVjdG9yKCdhW2RhdGEtaHJlZiQ9XCIubWRcIl0nKTtcblx0XHRcdC8vY29uc29sZS5sb2coYmxvY2spXG5cdFx0XHRjb25zdCBmaWxlUGF0aCA9IGJsb2NrLmdldEF0dHJpYnV0ZSgnZmlsZS1zb3VyY2UnKTsgLy8gbGlua0VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWhyZWYnKVxuXHRcdFx0Y29uc3QgZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlUGF0aCk7XG5cblx0XHRcdGlmIChmaWxlKSB7XG5cdFx0XHRcdGNvbnN0IGZpbGVDb250ZW50ID0gYXdhaXQgYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG5cdFx0XHRcdGNvbnN0IGVtYmVkZWRUYWdGaWxlID0gYXdhaXQgdGhpcy5nZXRNYXJrZG93blRhZ3MoZmlsZSwgZmlsZUNvbnRlbnQpXG5cdFx0XHRcdC8vZW1iZWRlZFRhZ0ZpbGVzLnB1c2goZW1iZWRlZFRhZ0ZpbGUpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8gQ3JlYXRlIGEgdGVtcG9ydHkgZWxlbWVudCBibG9jayBzbyB3ZSBjYW4gbWF0Y2ggbWF0Y2ggdGV4dCBvbmx5IGNvbnRlbnQgb2YgdGhpcyBlbGVtZW50IHdpdGggaXQncyBzb3VyY2Ugbm90ZVxuXHRcdFx0XHRjb25zdCB0ZW1wQmxvY2sgPSBibG9jay5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0XHRcdHRlbXBCbG9jay5xdWVyeVNlbGVjdG9yKCdicicpPy5yZW1vdmUoKTtcblx0XHRcdFx0dGVtcEJsb2NrLnF1ZXJ5U2VsZWN0b3IoJ3N0cm9uZycpPy5yZW1vdmUoKTsgXG5cdFx0XHRcdGNvbnN0IGJsb2NrVGV4dCA9IHRoaXMuY2xlYW5TdHJpbmcodGVtcEJsb2NrLmlubmVyVGV4dCk7XG5cblx0XHRcdFx0Y29uc3Qgc3RhcnRJbmRleCA9IHRoaXMuY2xlYW5TdHJpbmcoZmlsZUNvbnRlbnQpLmluZGV4T2YoYmxvY2tUZXh0KTtcblxuXHRcdFx0XHR0aGlzLmFzc2lnbk1hcmtkb3duVGFncyhlbWJlZGVkVGFnRmlsZSwgYmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLnRhZycpLCBzdGFydEluZGV4LCAncGx1Z2luLXN1bW1hcnknKTtcblx0XHRcdH1cblx0XHR9KTtcdFx0XG5cdH1cblxuXHRhc3luYyBlZGl0VGFnIChldmVudCwgaW5kZXgsIGZpbGVQYXRoKSB7XG5cdFx0Ly9jb25zb2xlLmxvZyhldmVudC50YXJnZXQpXG5cdFx0Ly9jb25zb2xlLmxvZyhpbmRleCk7XG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MuZGVidWdNb2RlKSBjb25zb2xlLmxvZygnVGFnIEJ1ZGR5IGVkaXQgdGFnOiAnICsgZXZlbnQudGFyZ2V0LmlubmVyVGV4dCArICdcXG5JbiBmaWxlOiAnICsgZmlsZVBhdGgpO1xuXG5cdFx0aWYgKGZpbGVQYXRoKSB7XG5cblx0XHRcdGNvbnN0IGZpbGU6IFRGaWxlID0gYXdhaXQgdGhpcy52YWxpZGF0ZUZpbGVQYXRoKGZpbGVQYXRoKTsgLy9hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVQYXRoKTtcblx0XHRcdGxldCBmaWxlQ29udGVudDogU3RyaW5nO1xuXHRcdFx0bGV0IGZpbGVDb250ZW50QmFja3VwOiBTdHJpbmc7XG5cdFx0XHRjb25zdCB0YWc6IFN0cmluZyA9IGV2ZW50LnRhcmdldC5pbm5lclRleHQudHJpbSgpO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRcblx0XHRcdFx0ZmlsZUNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGZpbGUpO1xuXHRcdFx0XHRmaWxlQ29udGVudEJhY2t1cCA9IGZpbGVDb250ZW50O1xuXG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXG5cdFx0XHRcdG5ldyBOb3RpY2UoJ1RhZyBCdWRkeSBmaWxlIHJlYWQgZXJyb3I6XFxuJyArIGVycm9yLm1lc3NhZ2UpO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gY2hlY2sgaWYgdGhlIGZpbGUgaGFzIG9ubHkgb25lIHRhZyBsZWZ0IChhbmQgdGhhdCdzIGFsbCB0aGF0cyBsZWZ0IGluIHRoZSBmaWxlKVxuXHRcdFx0bGV0IHNhZmVUb0VtcHR5RmlsZSA9IGZhbHNlO1xuXHRcdFx0Y29uc3QgdGFnUmVnZXggPSAvXlxccyojKFxcdyspXFxzKiQvO1xuXHRcdFx0aWYgKHRhZ1JlZ2V4LnRlc3QoZmlsZUNvbnRlbnQudHJpbSgpKSkge1xuXHRcdCAgICBcdHNhZmVUb0VtcHR5RmlsZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGxldCBiZWZvcmVUYWcgPSBmaWxlQ29udGVudC5zdWJzdHJpbmcoMCwgaW5kZXgpO1xuXHRcdFx0bGV0IGFmdGVyVGFnID0gZmlsZUNvbnRlbnQuc3Vic3RyaW5nKChOdW1iZXIoaW5kZXgpK051bWJlcih0YWcubGVuZ3RoKSsxKSk7XG5cblx0XHRcdGlmIChmaWxlQ29udGVudFtpbmRleF0gPT09ICdcXG4nKSB7XG4gICAgXHRcdFx0YmVmb3JlVGFnICs9ICdcXG4nOyAvLyBhcHBlbmRpbmcgdGhlIG5ld2xpbmUgY2hhcmFjdGVyIHRvIGJlZm9yZVRhZ1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvL2NvbnNvbGUubG9nKCdGaWxlIGNvbnRlbnQ6ICcsIEpTT04uc3RyaW5naWZ5KGZpbGVDb250ZW50KSk7XG5cdFx0XHQvL2NvbnNvbGUubG9nICgnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7XG5cdFx0XHQvL2NvbnNvbGUubG9nKCdCZWZvcmUgVGFnOiAnLCBKU09OLnN0cmluZ2lmeShiZWZvcmVUYWcpKTtcblx0XHRcdC8vY29uc29sZS5sb2cgKCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcblx0XHRcdC8vY29uc29sZS5sb2coJ1RoZSBUYWc6ICcsIEpTT04uc3RyaW5naWZ5KHRhZykpO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyAoJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xuXHRcdFx0Ly9jb25zb2xlLmxvZygnQWZ0ZXIgVGFnOiAnLCBKU09OLnN0cmluZ2lmeShhZnRlclRhZykpO1xuXHRcblx0XHRcdGxldCBuZXdDb250ZW50ID0gJyc7XG5cblx0XHRcdC8vaWYgKHRoaXMuc2V0dGluZ3MuZGVidWdNb2RlKSB7XG5cblx0XHRcdFx0Ly8gbmV3Q29udGVudCA9IGJlZm9yZVRhZyArICcgXHUyNkEwXHVGRTBGLS0tXHVEODNFXHVERUY4JyArIHRhZyArICdcdUQ4M0VcdURFRjctLS1cdTI2QTBcdUZFMEYgJyArIGFmdGVyVGFnO1xuXHRcdFx0XHQvL25ld0NvbnRlbnQgPSBiZWZvcmVUYWcgKyAnIFx1MjZBMFx1RkUwRi0tLVx1MjdBMVx1RkUwRicgKyB0YWcgKyBhZnRlclRhZztcblxuXHRcdFx0Ly99IGVsc2Vcblx0XHRcdC8vbmV3IE5vdGljZSgnY29udmVydCB0byB0ZXh0OiAnICsgKChldmVudC50eXBlID09ICd0b3VjaHN0YXJ0JykgJiYgdGhpcy5zZXR0aW5ncy5tb2JpbGVUYWdTZWFyY2gpKVxuXHRcdFx0Ly9uZXcgTm90aWNlIChldmVudC50eXBlKVxuXHRcdFx0aWYgKGV2ZW50LmFsdEtleSB8fCAoKGV2ZW50LnR5cGUgPT0gJ3RvdWNoc3RhcnQnKSAmJiAhdGhpcy5zZXR0aW5ncy5tb2JpbGVUYWdTZWFyY2gpKSB7IFxuXG5cdFx0XHRcdC8vIFJlbW92ZSB0aGUgaGFzaCBvbmx5XG5cblx0XHRcdFx0Y29uc3Qgbm9IYXNoID0gdGFnLnN1YnN0cmluZygxKTtcblx0XHRcdFx0bmV3Q29udGVudCA9IGJlZm9yZVRhZyArICghYmVmb3JlVGFnLmVuZHNXaXRoKCcgJyk/JyAnOicnKSArIG5vSGFzaCArIGFmdGVyVGFnO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYgKHRoaXMuYXBwLmlzTW9iaWxlICYmIHRoaXMuc2V0dGluZ3MubW9iaWxlTm90aWNlcykgeyBuZXcgTm90aWNlICgnVGFnIEJ1ZGR5OiAnICsgdGFnICsgJyBjb252ZXJ0ZWQgdG8gdGV4dC4nKTsgfVxuXHRcdFx0XHQvLyBTZXR0aW5nOiBtYWtlIHRoaXMgYSBzZXR0aW5nIHRvIHNob3cgbm90aWNlcyBvbiBtb2JpbGVcblx0XHRcdFxuXHRcdFx0fSBlbHNlIGlmICgoKGV2ZW50LnR5cGUgPT0gJ3RvdWNoZW5kJykgfHwgdGhpcy5zZXR0aW5ncy5tb2JpbGVUYWdTZWFyY2gpIHx8IChldmVudC5tZXRhS2V5ICYmICF0aGlzLnNldHRpbmdzLnJlbW92ZU9uQ2xpY2spIHx8ICghZXZlbnQubWV0YUtleSAmJiB0aGlzLnNldHRpbmdzLnJlbW92ZU9uQ2xpY2spKSB7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIHRhZyAob3IgY2hpbGQgZmlyc3QsIGlmIGV4aXN0cylcblxuXHRcdFx0XHRsZXQgcGFyZW50VGFnID0gJyc7XG5cblx0XHRcdFx0aWYgKHRhZy5pbmNsdWRlcygnLycpICYmICh0aGlzLnNldHRpbmdzLnJlbW92ZUNoaWxkVGFnc0ZpcnN0IHx8IChldmVudC5zaGlmdEtleSAmJiAhdGhpcy5zZXR0aW5ncy5yZW1vdmVDaGlsZFRhZ3NGaXJzdCkpKSB7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0bGV0IHBhcnRzID0gdGFnLnNwbGl0KCcvJyk7XG5cdFx0XHRcdFx0Y29uc3QgcmVtb3ZlZENoaWxkID0gcGFydHMucG9wKCk7XG5cdFx0XHRcdFx0cGFyZW50VGFnID0gcGFydHMuam9pbignLycpO1xuXHRcdFx0XHRcdG5ld0NvbnRlbnQgPSBiZWZvcmVUYWcgKyAoIWJlZm9yZVRhZy5lbmRzV2l0aCgnICcpPycgJzonJykgKyBwYXJlbnRUYWcgKyBhZnRlclRhZztcblxuXHRcdFx0XHRcdGlmICh0aGlzLmFwcC5pc01vYmlsZSAmJiB0aGlzLnNldHRpbmdzLm1vYmlsZU5vdGljZXMpIHsgbmV3IE5vdGljZSAoJ1RhZyBCdWRkeTogXFwnJyArIHJlbW92ZWRDaGlsZCArICdcXCcgcmVtb3ZlZCBmcm9tIHBhcmVudCB0YWcuJyk7IH1cblx0XHRcdFx0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bmV3Q29udGVudCA9IGJlZm9yZVRhZyArIGFmdGVyVGFnO1xuXHRcdFx0XHRcdGlmICh0aGlzLmFwcC5pc01vYmlsZSAmJiB0aGlzLnNldHRpbmdzLm1vYmlsZU5vdGljZXMpIHsgbmV3IE5vdGljZSAoJ1RhZyBCdWRkeTogJyArIHRhZyArICcgcmVtb3ZlZC4nKTsgfVxuXHRcdFx0XHR9XG5cdFx0XHR9IFxuXHRcdFx0Ly8gRmlsZSBzYWZldHkgY2hlY2tzXG5cdFx0XHRpZiAoKG5ld0NvbnRlbnQgPT0gJycgJiYgIXNhZmVUb0VtcHR5RmlsZSkgfHwgdGhpcy5jb250ZW50Q2hhbmdlZFRvb011Y2goZmlsZUNvbnRlbnRCYWNrdXAsIG5ld0NvbnRlbnQsIHRhZywgMikpIHtcblx0XHRcdFx0Ly8gQ2hlY2sgaWYgdGhlcmUgd2FzIG9ubHkgb25lIHRhZyBpbiB0aGUgZmlsZSwgaWYgc28sIGRvbid0IHJlc3RvcmUgYmFja3VwO1xuXHRcdFx0XHRuZXcgTm90aWNlKCdUYWcgQnVkZHk6IEZpbGUgY2hhbmdlIGVycm9yLicpO1xuXHRcdFx0XHRuZXdDb250ZW50ID0gZmlsZUNvbnRlbnRCYWNrdXA7XG5cdFx0XHR9IGVsc2UgaWYgKG5ld0NvbnRlbnQgPT0gJycgJiYgc2FmZVRvRW1wdHlGaWxlKSB7XG5cdFx0XHRcdG5ldyBOb3RpY2UoJ1RhZyBCdWRkeTogVGFnIHJlbW92ZWQuIFRoZSBmaWxlIGlzIGVtcHR5LicpO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XG5cdFx0XHRcdGF3YWl0IHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShmaWxlLCBuZXdDb250ZW50KTtcblxuXHRcdFx0XHQvLyBXaGVuIGVkaXRpbmcgY29udGVudCBpbiB0aGUgYWN0aXZlIG5vdGUsIGl0J3MgcmVjb21tZW5kZWQgdG8gbm90IHVzZSB0aGUgbW9kaWZ5IGJlY2F1c2UgdGhlIGZvbGRzIGFuZCBvdGhlciBzdGF0ZSBzdHVmZiBpcyBsb3N0XG5cdFx0XHRcdC8vIHNlZSB0aGlzIGxpbms6IGh0dHBzOi8vZG9jcy5vYnNpZGlhbi5tZC9QbHVnaW5zL0VkaXRvci9FZGl0b3JcblxuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Y29uc3QgYmFja3VwRmlsZU5hbWUgPSBTdHJpbmcoZmlsZS5uYW1lLnN1YnN0cmluZygwLCBmaWxlLm5hbWUuaW5kZXhPZignLm1kJykpICsgJyBCQUNLVVAubWQnKTtcblx0XHRcdFx0XHR2YXVsdC5jcmVhdGUoJycsIGJhY2t1cEZpbGVOYW1lLCBmaWxlQ29udGVudEJhY2t1cCk7XG5cblx0XHRcdFx0XHRuZXcgTm90aWNlKCdUYWcgQnVkZHkgbm90ZSBlZGl0aW5nIGVycm9yOiAnICsgZXJyb3IubWVzc2FnZSArICdcXG4nICsgYmFja3VwRmlsZU5hbWUgKyAnIHNhdmVkIHRvIHZhdWx0IHJvb3QuJyk7XG5cdFx0XHRcdFxuXHRcdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXG5cdFx0XHRcdFx0bmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoZmlsZUNvbnRlbnRCYWNrdXApO1xuXHRcdFx0XHRcdG5ldyBOb3RpY2UoJ1RhZyBCdWRkeSBub3RlIGVkaXRpbmcgZXJyb3I6ICcgKyBlcnJvci5tZXNzYWdlICsgJ1xcbk5vdGUgY29udGVudCBjb3BpZWQgdG8gY2xpcGJvYXJkLicpO1xuXG5cdFx0XHRcdH1cblx0XHRcdH0gXG5cdFx0fSBlbHNlIHtcblx0XHRcdG5ldyBOb3RpY2UoJ1RhZyBCdWRkeSBlcnJvcjogQ2FuXFwndCBpZGVudGlmeSB0YWcgbG9jYXRpb24uJyk7XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgcmVhZEZpbGVzKGxpc3RGaWxlczogVEZpbGVbXSk6IFByb21pc2U8W1RGaWxlLCBzdHJpbmddW10+IHtcblx0XHRsZXQgbGlzdDogW1RGaWxlLCBzdHJpbmddW10gPSBbXTtcblx0XHRmb3IgKGxldCB0ID0gMDsgdCA8IGxpc3RGaWxlcy5sZW5ndGg7IHQgKz0gMSkge1xuXHRcdFx0Y29uc3QgZmlsZSA9IGxpc3RGaWxlc1t0XTtcblx0XHRcdGxldCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuY2FjaGVkUmVhZChmaWxlKTtcblx0XHRcdGxpc3QucHVzaChbZmlsZSwgY29udGVudF0pO1xuXHRcdH1cblx0XHRyZXR1cm4gbGlzdDtcblx0fVxuXG5cdGlzVmFsaWRUZXh0KGxpc3RUYWdzOiBzdHJpbmdbXSwgdGFnczogc3RyaW5nW10sIGluY2x1ZGU6IHN0cmluZ1tdLCBleGNsdWRlOiBzdHJpbmdbXSk6IGJvb2xlYW4ge1xuXHRcdGxldCB2YWxpZCA9IHRydWU7XG5cblx0XHQvLyBDaGVjayBPUiAodGFncylcblx0XHRpZiAodGFncy5sZW5ndGggPiAwKSB7XG5cdFx0XHR2YWxpZCA9IHZhbGlkICYmIHRhZ3Muc29tZSgodmFsdWUpID0+IGxpc3RUYWdzLmluY2x1ZGVzKHZhbHVlKSk7XG5cdFx0fVxuXHRcdC8vIENoZWNrIEFORCAoaW5jbHVkZSlcblx0XHRpZiAoaW5jbHVkZS5sZW5ndGggPiAwKSB7XG5cdFx0XHR2YWxpZCA9IHZhbGlkICYmIGluY2x1ZGUuZXZlcnkoKHZhbHVlKSA9PiBsaXN0VGFncy5pbmNsdWRlcyh2YWx1ZSkpO1xuXHRcdH1cblx0XHQvLyBDaGVjayBOT1QgKGV4Y2x1ZGUpXG5cdFx0aWYgKHZhbGlkICYmIGV4Y2x1ZGUubGVuZ3RoID4gMCkge1xuXHRcdFx0dmFsaWQgPSAhZXhjbHVkZS5zb21lKCh2YWx1ZSkgPT4gbGlzdFRhZ3MuaW5jbHVkZXModmFsdWUpKTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbGlkO1x0XHRcblx0fVxuXG5cdGFzeW5jIHZhbGlkYXRlRmlsZVBhdGggKGZpbGVQYXRoKSB7XG5cdFx0Y29uc3QgbWF0Y2hpbmdGaWxlcyA9IGF3YWl0IGFwcC52YXVsdC5nZXRGaWxlcygpLmZpbHRlcihmaWxlID0+IGZpbGUubmFtZSA9PT0gZmlsZVBhdGgpO1xuXHRcdGlmIChtYXRjaGluZ0ZpbGVzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0Y29uc3QgZmlsZVBhdGggPSBtYXRjaGluZ0ZpbGVzWzBdLnBhdGg7XG5cdFx0XHRjb25zdCBmaWxlID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVQYXRoKTtcblx0XHRcdC8vY29uc29sZS5sb2coJ1ZhbGlkYXRlIGZpbGU6ICcgKyBlbWJlZEZpbGUubmFtZSk7XG5cdFx0XHRyZXR1cm4gZmlsZTtcblx0XHR9IGVsc2UgaWYgKG1hdGNoaW5nRmlsZXMubGVuZ3RoID4gMSkge1xuXHRcdFx0bmV3IE5vdGljZSgnVGFnIEJ1ZGR5OiBNdWx0aXBsZSBmaWxlcyBmb3VuZCB3aXRoIHRoZSBzYW1lIG5hbWUuIENhblxcJ3Qgc2FmZWx5IGVkaXQgdGFnLicpO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5ldyBOb3RpY2UoJ1RhZyBCdWRkeTogTm8gZmlsZSBmb3VuZC4gVHJ5IGFnYWluLCBvciB0aGlzIHRhZyBtaWdodCBiZSBpbiBhbiB1bnN1cHBvcnRlZCBlbWJlZCB0eXBlLicpO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9XG5cblx0Y29udGVudENoYW5nZWRUb29NdWNoKG9yaWdpbmFsLCBtb2RpZmllZCwgdGFnLCBidWZmZXIgPSA1KSB7XG5cdCAgY29uc3QgZXhwZWN0ZWRDaGFuZ2UgPSB0YWcubGVuZ3RoOyAvLyBpbmNsdWRpbmcgdGhlICcjJyBzeW1ib2xcblx0ICBjb25zdCB0aHJlc2hvbGQgPSBleHBlY3RlZENoYW5nZSArIGJ1ZmZlcjsgLy8gYWxsb3cgZm9yIHNvbWUgbWlub3IgdW5pbnRlbmRlZCBtb2RpZmljYXRpb25zXG5cdCAgY29uc3QgYWN0dWFsQ2hhbmdlID0gTWF0aC5hYnMob3JpZ2luYWwubGVuZ3RoIC0gbW9kaWZpZWQubGVuZ3RoKTtcblxuXHQgIHJldHVybiBhY3R1YWxDaGFuZ2UgPiB0aHJlc2hvbGQ7XG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVxuXG5cdGNsZWFuU3RyaW5nKGlucHV0KSB7XG5cdFx0bGV0IGNsZWFuZWRTdHI7XG5cblx0XHQvLyBDaGVjayBpZiBpbnB1dCBpcyBhIERPTSBlbGVtZW50XG5cdFx0aWYgKGlucHV0IGluc3RhbmNlb2YgRWxlbWVudCkge1xuXHRcdFx0Ly9jb25zb2xlLmxvZygnaW5wdXQgaXM6IEVsZW1lbnQnKTtcblx0XHRcdGNsZWFuZWRTdHIgPSBpbnB1dC5vdXRlckhUTUwudHJpbSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvL2NvbnNvbGUubG9nKCdpbnB1dCBpczogU3RyaW5nJyk7XG5cdFx0XHRjbGVhbmVkU3RyID0gaW5wdXQudHJpbSgpO1xuXHRcdH1cblxuXHRcdC8vIFdoaXRlc3BhY2Ugbm9ybWFsaXphdGlvblxuXHRcdC8vY2xlYW5lZFN0ciA9IGNsZWFuZWRTdHIucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuXG5cdFx0Ly8gUmVtb3ZlIDxicj4gZWxlbWVudHNcblx0XHQvL2NsZWFuZWRTdHIgPSBjbGVhbmVkU3RyLnJlcGxhY2UoLzxicj4vZywgJyAnKTtcblxuXHRcdC8vIFJlbW92ZSBibG9ja3F1b3RlIHRhZ3MgYnV0IGtlZXAgdGhlaXIgY29udGVudFxuXHRcdC8vY2xlYW5lZFN0ciA9IGNsZWFuZWRTdHIucmVwbGFjZSgvPFxcLz9ibG9ja3F1b3RlPi9nLCAnJyk7XG5cblx0XHQvLyBSZW1vdmUgYmxvY2txdW90ZSB0YWdzIGJ1dCBrZWVwIHRoZWlyIGNvbnRlbnRcblx0XHQvL2NsZWFuZWRTdHIgPSBjbGVhbmVkU3RyLnJlcGxhY2UoLzxcXC8/ZGl2Pi9nLCAnJyk7XG5cblx0XHQvLyBSZW1vdmUgc3BhY2VzIGJldHdlZW4gdGFnc1xuXHRcdC8vY2xlYW5lZFN0ciA9IGNsZWFuZWRTdHIucmVwbGFjZSgvPlxccys8L2csICc+PCcpO1xuXG5cdFx0Ly8gV2hpdGVzcGFjZSBub3JtYWxpemF0aW9uXG5cdFx0Y2xlYW5lZFN0ciA9IGNsZWFuZWRTdHIucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuXG5cdFx0Ly8gSFRNTCBlbnRpdHkgZGVjb2Rpbmdcblx0XHRjb25zdCB0ZXh0QXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG5cdFx0dGV4dEFyZWEuaW5uZXJIVE1MID0gY2xlYW5lZFN0cjtcblx0XHRjbGVhbmVkU3RyID0gdGV4dEFyZWEudmFsdWUudHJpbSgpO1xuXG5cdFx0Ly8gT3B0aW9uYWw6IGNvbnZlcnQgdG8gbG93ZXJjYXNlXG5cdFx0Ly8gY2xlYW5lZFN0ciA9IGNsZWFuZWRTdHIudG9Mb3dlckNhc2UoKTtcblxuXHRcdHJldHVybiBjbGVhbmVkU3RyO1xuXHR9XG5cblx0YXN5bmMgcmVmcmVzaFZpZXcgKCl7XG5cdFx0Ly9jb25zb2xlLmxvZygnUmVmcmVzaCB2aWV3LicpO1xuXHRcdG5ldyBOb3RpY2UgKCdSZWZyZXNoIHZpZXcuJyk7XG5cdFx0Ly8gaWYgdXNpbmcgcmVyZW5kZXIsXG5cdFx0Ly9jb25zdCBzY3JvbGxTdGF0ZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk/LmN1cnJlbnRNb2RlPy5nZXRTY3JvbGwoKTtcblx0XHQvL2F3YWl0IHZpZXcucHJldmlld01vZGUucmVyZW5kZXIodHJ1ZSk7XG5cblx0XHRhd2FpdCBhcHAud29ya3NwYWNlLmFjdGl2ZUxlYWYucmVidWlsZFZpZXcoKTtcblx0XHQvLyBvbmx5IG5lZWRlZCBpZiB3ZSB1c2UgcmVyZW5kZXIgYWJvdmUuIGRvIHRoaXMgb24gYSB0aW1lb3V0XG5cdFx0Ly90aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpLnByZXZpZXdNb2RlLmFwcGx5U2Nyb2xsKHNjcm9sbFN0YXRlKTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8gQ1VTVE9NIFRBRy1TVU1NQVJZIElNUExFTUVOVEFUSU9OIC8vLy8vLy8vLy8vLy8vXG5cdC8vIE9SSUdJTkFMIENPREUgQlkgaHR0cHM6Ly9naXRodWIuY29tL21hY3JvamQvdGFnLXN1bW1hcnkgLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdGFzeW5jIHN1bW1hcnlDb2RlQmxvY2tQcm9jZXNzb3IgKHNvdXJjZSwgZWwsIGN0eCkge1xuXHRcdC8vIEluaXRpYWxpemUgdGFnIGxpc3Rcblx0XHRsZXQgdGFnczogc3RyaW5nW10gPSBBcnJheSgpO1xuXHRcdGxldCBpbmNsdWRlOiBzdHJpbmdbXSA9IEFycmF5KCk7XG5cdFx0bGV0IGV4Y2x1ZGU6IHN0cmluZ1tdID0gQXJyYXkoKTtcblxuXHRcdC8vIFByb2Nlc3Mgcm93cyBpbnNpZGUgY29kZWJsb2NrXG5cdFx0Y29uc3Qgcm93cyA9IHNvdXJjZS5zcGxpdChcIlxcblwiKS5maWx0ZXIoKHJvdykgPT4gcm93Lmxlbmd0aCA+IDApO1xuXHRcdHJvd3MuZm9yRWFjaCgobGluZSkgPT4ge1xuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIGxpbmUgc3BlY2lmaWVzIHRoZSB0YWdzIChPUilcblx0XHRcdGlmIChsaW5lLm1hdGNoKC9eXFxzKnRhZ3M6W1xccHtMfTAtOV9cXC0vIyBdKyQvZ3UpKSB7XG5cdFx0XHRcdGNvbnN0IGNvbnRlbnQgPSBsaW5lLnJlcGxhY2UoL15cXHMqdGFnczovLCBcIlwiKS50cmltKCk7XG5cblx0XHRcdFx0Ly8gR2V0IHRoZSBsaXN0IG9mIHZhbGlkIHRhZ3MgYW5kIGFzc2lnbiB0aGVtIHRvIHRoZSB0YWdzIHZhcmlhYmxlXG5cdFx0XHRcdGxldCBsaXN0ID0gY29udGVudC5zcGxpdCgvXFxzKy8pLm1hcCgodGFnKSA9PiB0YWcudHJpbSgpKTtcblx0XHRcdFx0bGlzdCA9IGxpc3QuZmlsdGVyKCh0YWcpID0+IHtcblx0XHRcdFx0XHRpZiAodGFnLm1hdGNoKC9eI1tcXHB7TH1dK1teI10qJC91KSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR0YWdzID0gbGlzdDtcblx0XHRcdH1cblx0XHRcdC8vIENoZWNrIGlmIHRoZSBsaW5lIHNwZWNpZmllcyB0aGUgdGFncyB0byBpbmNsdWRlIChBTkQpXG5cdFx0XHRpZiAobGluZS5tYXRjaCgvXlxccyppbmNsdWRlOltcXHB7TH0wLTlfXFwtLyMgXSskL2d1KSkge1xuXHRcdFx0XHRjb25zdCBjb250ZW50ID0gbGluZS5yZXBsYWNlKC9eXFxzKmluY2x1ZGU6LywgXCJcIikudHJpbSgpO1xuXG5cdFx0XHRcdC8vIEdldCB0aGUgbGlzdCBvZiB2YWxpZCB0YWdzIGFuZCBhc3NpZ24gdGhlbSB0byB0aGUgaW5jbHVkZSB2YXJpYWJsZVxuXHRcdFx0XHRsZXQgbGlzdCA9IGNvbnRlbnQuc3BsaXQoL1xccysvKS5tYXAoKHRhZykgPT4gdGFnLnRyaW0oKSk7XG5cdFx0XHRcdGxpc3QgPSBsaXN0LmZpbHRlcigodGFnKSA9PiB7XG5cdFx0XHRcdFx0aWYgKHRhZy5tYXRjaCgvXiNbXFxwe0x9XStbXiNdKiQvdSkpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aW5jbHVkZSA9IGxpc3Q7XG5cdFx0XHR9XG5cdFx0XHQvLyBDaGVjayBpZiB0aGUgbGluZSBzcGVjaWZpZXMgdGhlIHRhZ3MgdG8gZXhjbHVkZSAoTk9UKVxuXHRcdFx0aWYgKGxpbmUubWF0Y2goL15cXHMqZXhjbHVkZTpbXFxwe0x9MC05X1xcLS8jIF0rJC9ndSkpIHtcblx0XHRcdFx0Y29uc3QgY29udGVudCA9IGxpbmUucmVwbGFjZSgvXlxccypleGNsdWRlOi8sIFwiXCIpLnRyaW0oKTtcblxuXHRcdFx0XHQvLyBHZXQgdGhlIGxpc3Qgb2YgdmFsaWQgdGFncyBhbmQgYXNzaWduIHRoZW0gdG8gdGhlIGV4Y2x1ZGUgdmFyaWFibGVcblx0XHRcdFx0bGV0IGxpc3QgPSBjb250ZW50LnNwbGl0KC9cXHMrLykubWFwKCh0YWcpID0+IHRhZy50cmltKCkpO1xuXHRcdFx0XHRsaXN0ID0gbGlzdC5maWx0ZXIoKHRhZykgPT4ge1xuXHRcdFx0XHRcdGlmICh0YWcubWF0Y2goL14jW1xccHtMfV0rW14jXSokL3UpKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdGV4Y2x1ZGUgPSBsaXN0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gQ3JlYXRlIHN1bW1hcnkgb25seSBpZiB0aGUgdXNlciBzcGVjaWZpZWQgc29tZSB0YWdzXG5cdFx0aWYgKHRhZ3MubGVuZ3RoID4gMCB8fCBpbmNsdWRlLmxlbmd0aCA+IDApIHtcblx0XHRcdGF3YWl0IHRoaXMuY3JlYXRlU3VtbWFyeShlbCwgdGFncywgaW5jbHVkZSwgZXhjbHVkZSwgY3R4LnNvdXJjZVBhdGgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmNyZWF0ZUVtcHR5U3VtbWFyeShlbCk7XG5cdFx0fSBcblx0fTsgXG5cblx0Y3JlYXRlRW1wdHlTdW1tYXJ5KGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG5cdFx0Y29uc3QgY29udGFpbmVyID0gY3JlYXRlRWwoXCJkaXZcIik7XG5cdFx0Y29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc3VtbWFyeScpO1xuXHRcdGNvbnRhaW5lci5jcmVhdGVFbChcInNwYW5cIiwge1xuXHRcdFx0YXR0cjogeyBzdHlsZTogJ2NvbG9yOiB2YXIoLS10ZXh0LWVycm9yKSAhaW1wb3J0YW50OycgfSxcblx0XHRcdHRleHQ6IFwiVGhlcmUgYXJlIG5vIGZpbGVzIHdpdGggYmxvY2tzIHRoYXQgbWF0Y2ggdGhlIHNwZWNpZmllZCB0YWdzLlwiIFxuXHRcdH0pO1xuXHRcdGVsZW1lbnQucmVwbGFjZVdpdGgoY29udGFpbmVyKTtcblx0fVxuXG5cdGFzeW5jIGNyZWF0ZVN1bW1hcnkoZWxlbWVudDogSFRNTEVsZW1lbnQsIHRhZ3M6IHN0cmluZ1tdLCBpbmNsdWRlOiBzdHJpbmdbXSwgZXhjbHVkZTogc3RyaW5nW10sIGZpbGVQYXRoOiBzdHJpbmcpIHtcblx0XHRcblx0XHRjb25zdCBhY3RpdmVGaWxlID0gYXdhaXQgdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcblx0XHRjb25zdCB2YWxpZFRhZ3MgPSB0YWdzLmNvbmNhdChpbmNsdWRlKTsgLy8gQWxsIHRoZSB0YWdzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyXG5cdFx0Y29uc3QgdGVtcENvbXBvbmVudCA9IG5ldyBUZW1wQ29tcG9uZW50KCk7XG5cdFx0Y29uc3Qgc3VtbWFyeUNvbnRhaW5lciA9IGNyZWF0ZUVsKFwiZGl2XCIpO1xuXHRcdHN1bW1hcnlDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdzdW1tYXJ5Jyk7XG5cdFx0XG5cdFx0Ly8gR2V0IGZpbGVzXG5cdFx0bGV0IGxpc3RGaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcblxuXHRcdC8vIEZpbHRlciBmaWxlc1xuXHRcdGxpc3RGaWxlcyA9IGxpc3RGaWxlcy5maWx0ZXIoKGZpbGUpID0+IHtcblx0XHRcdC8vIFJlbW92ZSBmaWxlcyB0aGF0IGRvIG5vdCBjb250YWluIHRoZSB0YWdzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyXG5cdFx0XHRjb25zdCBjYWNoZSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcblx0XHRcdGNvbnN0IHRhZ3NJbkZpbGUgPSBnZXRBbGxUYWdzKGNhY2hlKTtcblxuXHRcdFx0aWYgKHZhbGlkVGFncy5zb21lKCh2YWx1ZSkgPT4gdGFnc0luRmlsZS5pbmNsdWRlcyh2YWx1ZSkpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcblxuXHRcdC8vIFNvcnQgZmlsZXMgYWxwaGFiZXRpY2FsbHlcblx0XHQvLyBjaGFuZ2UgdG8gc29ydCBieSBsYXN0IG1vZGlmaWVkP1xuXHRcdGxpc3RGaWxlcyA9IGxpc3RGaWxlcy5zb3J0KChmaWxlMSwgZmlsZTIpID0+IHtcblx0XHRcdGlmIChmaWxlMS5wYXRoIDwgZmlsZTIucGF0aCkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9IGVsc2UgaWYgKGZpbGUxLnBhdGggPiBmaWxlMi5wYXRoKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBHZXQgZmlsZXMgY29udGVudFxuXHRcdGxldCBsaXN0Q29udGVudHM6IFtURmlsZSwgc3RyaW5nXVtdID0gYXdhaXQgdGhpcy5yZWFkRmlsZXMobGlzdEZpbGVzKTtcblxuXHRcdC8vIENyZWF0ZSBzdW1tYXJ5XG5cdFx0bGV0IHN1bW1hcnk6IHN0cmluZyA9IFwiXCI7XG5cdFx0bGlzdENvbnRlbnRzLmZvckVhY2goKGl0ZW0pID0+IHtcblxuXHRcdFx0Ly8gR2V0IGZpbGVzIG5hbWVcblx0XHRcdGNvbnN0IGZpbGVOYW1lID0gaXRlbVswXS5uYW1lLnJlcGxhY2UoLy5tZCQvZywgXCJcIik7XG5cdFx0XHRjb25zdCBmaWxlUGF0aCA9IGl0ZW1bMF0ucGF0aDtcblx0XHRcdFxuXHRcdFx0Ly8gRG8gbm90IGFkZCB0aGlzIGl0ZW0gaWYgaXQncyBpbiB0aGUgc2FtZSBmaWxlIHdlJ3JlIGNyZWF0aW5nIHRoZSBzdW1tYXJ5XG5cdFx0XHRpZiAoYWN0aXZlRmlsZS5uYW1lID09IGl0ZW1bMF0ubmFtZSkge1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdzYW1lIGZpbGUnKVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEdldCBwYXJhZ3JhcGhzXG5cdFx0XHRsZXQgbGlzdFBhcmFncmFwaHM6IHN0cmluZ1tdID0gQXJyYXkoKTtcblx0XHRcdGNvbnN0IGJsb2NrcyA9IGl0ZW1bMV0uc3BsaXQoL1xcblxccypcXG4vKS5maWx0ZXIoKHJvdykgPT4gcm93LnRyaW0oKS5sZW5ndGggPiAwKTtcblxuXHRcdFx0Ly8gR2V0IGxpc3QgaXRlbXNcblx0XHRcdGJsb2Nrcy5mb3JFYWNoKChwYXJhZ3JhcGgpID0+IHtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIENoZWNrIGlmIHRoZSBwYXJhZ3JhcGggaXMgYW5vdGhlciBwbHVnaW5cblx0XHRcdFx0bGV0IHZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdGxldCBsaXN0VGFncyA9IHBhcmFncmFwaC5tYXRjaCgvI1tcXHB7TH0wLTlfXFwtLyNdKy9ndSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZiAobGlzdFRhZ3MgIT0gbnVsbCAmJiBsaXN0VGFncy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygncGFyYWdyYXBoLmNvbnRhaW5zKFwiYGBgXCIpIDogJyArIHBhcmFncmFwaC5jb250YWlucyhcImBgYFwiKSlcblx0XHRcdFx0XHRpZiAoIXBhcmFncmFwaC5jb250YWlucyhcImBgYFwiKSkge1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhpbmNsdWRlKVxuXHRcdFx0XHRcdFx0dmFsaWQgPSB0aGlzLmlzVmFsaWRUZXh0KGxpc3RUYWdzLCB0YWdzLCBpbmNsdWRlLCBleGNsdWRlKTtcblx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2codmFsaWQpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVtb3ZlZCBsaXN0IHBhcmFncmFwaHMgZnVuY3Rpb25hbGl0eVxuXHRcdFx0XHRpZiAodmFsaWQpIHtcblxuXHRcdFx0XHRcdC8vIEFkZCBwYXJhZ3JhcGhzIGFuZCB0aGUgaXRlbXMgb2YgYSBsaXN0XG5cdFx0XHRcdFx0bGV0IGxpc3RJdGVtczogc3RyaW5nW10gPSBBcnJheSgpO1xuXHRcdFx0XHRcdGxldCBpdGVtVGV4dCA9IFwiXCI7XG5cblx0XHRcdFx0XHRwYXJhZ3JhcGguc3BsaXQoJ1xcblxccypcXG4nKS5mb3JFYWNoKChsaW5lKSA9PiB7XG5cdFx0XHRcdFx0XHRsZXQgaXNMaXN0ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRpc0xpc3QgPSBsaW5lLnNlYXJjaCgvKFxccypbXFwtXFwrXFwqXSl7MX18KFswLTldXFwuKXsxfVxccysvKSAhPSAtMVxuXG5cdFx0XHRcdFx0XHRpZiAoIWlzTGlzdCkge1xuXHRcdFx0XHRcdFx0XHQvLyBBZGQgbm9ybWFsIHBhcmFncmFwaHNcblx0XHRcdFx0XHRcdFx0bGlzdFBhcmFncmFwaHMucHVzaChsaW5lKTtcblx0XHRcdFx0XHRcdFx0aXRlbVRleHQgPSBcIlwiO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0bGluZS5zcGxpdCgnXFxuJykuZm9yRWFjaCgoaXRlbUxpbmUpID0+IHtcblx0XHRcdFx0XHRcdFx0XHQvLyBHZXQgdGhlIGl0ZW0ncyBsZXZlbFxuXHRcdFx0XHRcdFx0XHRcdGxldCBsZXZlbCA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgZW5kSW5kZXggPSBpdGVtTGluZS5zZWFyY2goL1tcXC1cXCtcXCpdezF9fChbMC05XVxcLil7MX1cXHMrLyk7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgdGFiVGV4dCA9IGl0ZW1MaW5lLnNsaWNlKDAsIGVuZEluZGV4KTtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCB0YWJzID0gdGFiVGV4dC5tYXRjaCgvXFx0L2cpO1xuXHRcdFx0XHRcdFx0XHRcdGlmICh0YWJzKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsZXZlbCA9IHRhYnMubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBHZXQgaXRlbXMgdHJlZVxuXHRcdFx0XHRcdFx0XHRcdGlmIChsZXZlbCA9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoaXRlbVRleHQgIT0gXCJcIikge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRsaXN0SXRlbXMucHVzaChpdGVtVGV4dCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGl0ZW1UZXh0ID0gXCJcIjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGl0ZW1UZXh0ID0gXCJcIiArIGl0ZW1UZXh0LmNvbmNhdChpdGVtTGluZSArIFwiXFxuXCIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmVtb3ZlZCBpbmNsdWRlIGNoaWxkcmVuIHNldHRpbmdcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGxldmVsID4gMCAmJiBpdGVtVGV4dCAhPSBcIlwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpdGVtVGV4dCA9IGl0ZW1UZXh0LmNvbmNhdChpdGVtTGluZSArIFwiXFxuXCIpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRpZiAoaXRlbVRleHQgIT0gXCJcIikge1xuXHRcdFx0XHRcdFx0bGlzdEl0ZW1zLnB1c2goaXRlbVRleHQpO1xuXHRcdFx0XHRcdFx0aXRlbVRleHQgPSBcIlwiO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIENoZWNrIHRhZ3Mgb24gdGhlIGl0ZW1zXG5cdFx0XHRcdFx0bGlzdEl0ZW1zLmZvckVhY2goKGxpbmUpID0+IHtcblx0XHRcdFx0XHRcdGxpc3RUYWdzID0gbGluZS5tYXRjaCgvI1tcXHB7TH0wLTlfXFwtLyNdKy9ndSk7XG5cdFx0XHRcdFx0XHRpZiAobGlzdFRhZ3MgIT0gbnVsbCAmJiBsaXN0VGFncy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLmlzVmFsaWRUZXh0KGxpc3RUYWdzLCB0YWdzLCBpbmNsdWRlLCBleGNsdWRlKSkge1xuXHRcdFx0XHRcdFx0XHRcdGxpc3RQYXJhZ3JhcGhzLnB1c2gobGluZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH0pXG5cblx0XHRcdC8vIFByb2Nlc3MgZWFjaCBibG9jayBvZiB0ZXh0XG5cdFx0XHRsaXN0UGFyYWdyYXBocy5mb3JFYWNoKGFzeW5jKHBhcmFncmFwaCkgPT4ge1xuXHRcdFx0XHQvLyBSZXN0b3JlIG5ld2xpbmUgYXQgdGhlIGVuZFxuXHRcdFx0XHRwYXJhZ3JhcGggKz0gXCJcXG5cIjtcblx0XHRcdFx0dmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cDtcblxuXHRcdFx0XHQvLyBDaGVjayB3aGljaCB0YWcgbWF0Y2hlcyBpbiB0aGlzIHBhcmFncmFwaC5cblx0XHRcdFx0dmFyIHRhZ1RleHQgPSBuZXcgU3RyaW5nO1xuXHRcdFx0XHR2YXIgdGFnU2VjdGlvbiA9IG51bGw7XG5cdFx0XHRcdHRhZ3MuZm9yRWFjaCgodGFnKSA9PiB7XG5cdFx0XHRcdFx0dGFnVGV4dCA9IHRhZy5yZXBsYWNlKCcjJywgJ1xcXFwjJyk7XG5cdFx0XHRcdFx0cmVnZXggPSBuZXcgUmVnRXhwKGAke3RhZ1RleHR9KFxcXFxXfCQpYCwgJ2cnKTtcbiAgICAgICAgICAgICAgXHRcdGlmIChwYXJhZ3JhcGgubWF0Y2gocmVnZXgpICE9IG51bGwpIHsgXG4gICAgICAgICAgICAgIFx0XHRcdHRhZ1NlY3Rpb24gPSB0YWdcbiAgICAgICAgICAgICAgXHRcdH0gXG4gICAgICAgICAgICBcdH0pO1xuXG5cdFx0XHRcdC8vIFBvc3NpYmxlIEJ1dHRvbiBhbmQgUXVpY2tBZGQgUGx1Z2luIHVzYWdlXG5cdFx0XHRcdC8vIHBhcmFncmFwaCArPSAnYGBgYnV0dG9uXFxubmFtZSBDb3B5IHRvICcgKyB0YWdTZWN0aW9uLnJlcGxhY2UoJyMnLCAnJykgKyAnIHNlY3Rpb25cXG50eXBlIGNvbW1hbmRcXG5hY3Rpb24gUXVpY2tBZGQ6IFBhc3RlIENsaXBib2FyZCBUZXh0XFxuYGBgJ1xuXG5cdFx0XHRcdC8vIEFkZCBsaW5rIHRvIG9yaWdpbmFsIG5vdGUuIFRhZyBCdWRkeSBhZGRlZCBkZWVwIGxpbmtpbmcuXG5cdFx0XHRcdGxldCBibG9ja0xpbmsgPSBwYXJhZ3JhcGgubWF0Y2goL1xcXltcXHB7TH0wLTlfXFwtL15dKy9ndSk7IFxuICAgICAgICBcdFx0aWYgKGJsb2NrTGluaykgeyBcbiAgICAgICAgXHRcdFx0cGFyYWdyYXBoID0gXCIqKltbXCIgKyBmaWxlUGF0aCArIFwiI1wiICsgYmxvY2tMaW5rICsgXCJ8XCIgKyBmaWxlTmFtZSArIFwiXV0qKlxcblwiICsgcGFyYWdyYXBoOyBcbiAgICAgICAgXHRcdH0gZWxzZSB7IFxuICAgICAgICBcdFx0XHRwYXJhZ3JhcGggPSBcIioqW1tcIiArIGZpbGVQYXRoICsgXCJ8XCIgKyBmaWxlTmFtZSArIFwiXV0qKlxcblwiICsgcGFyYWdyYXBoOyBcbiAgICAgICAgXHRcdH1cblxuICAgICAgICBcdFx0Ly8gT3JpZ2luYWwgZm9ybWF0dGluZyBtZXRob2QuIFdpbGwgcmVtb3ZlLlxuICAgICAgICAgICAgXHRwYXJhZ3JhcGggKz0gXCJcXG5cXG5cIjtcbiAgICAgICAgICBcdFx0c3VtbWFyeSArPSBwYXJhZ3JhcGg7XG5cbiAgICAgICAgICBcdFx0Ly8gVGFnIEJ1ZGR5IGFkZGVkIGN1c3RvbSBmb3JtYXR0aW5nIGZvciB0YWcgZWRpdGluZyBmdW5jdGlvbmFsaXR5LiBGaXhlZCBjb21wb25lbnQgZXJyb3IuXG4gICAgICAgICAgXHRcdGNvbnN0IHBhcmFncmFwaENvbnRlbnQgPSBjcmVhdGVFbChcImJsb2NrcXVvdGVcIik7XG5cdFx0XHRcdHBhcmFncmFwaENvbnRlbnQuc2V0QXR0cmlidXRlKCdmaWxlLXNvdXJjZScsIGZpbGVQYXRoKTtcbiAgICAgICAgICBcdFx0YXdhaXQgTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihwYXJhZ3JhcGgsIHBhcmFncmFwaENvbnRlbnQsIHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk/LnBhdGgsIHRlbXBDb21wb25lbnQpO1xuICAgICAgICAgIFx0XHRzdW1tYXJ5Q29udGFpbmVyLmFwcGVuZENoaWxkKHBhcmFncmFwaENvbnRlbnQpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHQvLyBBZGQgU3VtbWFyeVxuXHRcdGlmIChzdW1tYXJ5ICE9IFwiXCIpIHtcblx0XHRcdC8vIE9yaWdpbmFsIGZvcm1hdHRpbmcgbWV0aG9kLiBXaWxsIHJlbW92ZS5cblx0XHRcdC8vIGF3YWl0IE1hcmtkb3duUmVuZGVyZXIucmVuZGVyTWFya2Rvd24oc3VtbWFyeSwgc3VtbWFyeUNvbnRhaW5lciwgdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKT8ucGF0aCwgdGVtcENvbXBvbmVudCk7XG5cdFx0XHRzdW1tYXJ5Q29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY29kZWJsb2NrLXRhZ3MnLCB0YWdzLmpvaW4oJywnKSk7XG5cdFx0XHRzdW1tYXJ5Q29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY29kZWJsb2NrLXRhZ3MtaW5jbHVkZScsICgoaW5jbHVkZS5sZW5ndGg+MCk/aW5jbHVkZS5qb2luKCcsJyk6JycpKTtcblx0XHRcdHN1bW1hcnlDb250YWluZXIuc2V0QXR0cmlidXRlKCdjb2RlYmxvY2stdGFncy1leGNsdWRlJywgKChleGNsdWRlLmxlbmd0aD4wKT9leGNsdWRlLmpvaW4oJywnKTonJykpO1xuXHRcdFx0ZWxlbWVudC5yZXBsYWNlV2l0aChzdW1tYXJ5Q29udGFpbmVyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5jcmVhdGVFbXB0eVN1bW1hcnkoZWxlbWVudCk7XG5cdFx0fVxuXHR9XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbn1cblxuY2xhc3MgVGVtcENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG5cdG9ubG9hZCgpIHt9XG5cdG9udW5sb2FkKCkge31cbn1cblxuY2xhc3MgRG91YmxlVGFwSGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKHBsdWdpbiwgZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjsgLy8gU3RvcmUgdGhlIHBsdWdpbiBpbnN0YW5jZVxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMubGFzdFRhcCA9IDA7XG4gICAgLy9uZXcgTm90aWNlKCdkb3VibGUgdGFwIGNyZWF0ZWQnKVxuICAgIHRoaXMucGx1Z2luLnJlZ2lzdGVyRG9tRXZlbnQodGhpcy5lbGVtZW50LCAndG91Y2hlbmQnLCB0aGlzLmhhbmRsZVRvdWNoRW5kLmJpbmQodGhpcyksIHRydWUpO1xuICB9XG5cbiAgaGFuZGxlVG91Y2hFbmQoZXZlbnQpIHtcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGNvbnN0IHRhcExlbmd0aCA9IGN1cnJlbnRUaW1lIC0gdGhpcy5sYXN0VGFwO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgIFxuICAgIGlmICh0YXBMZW5ndGggPCA1MDAgJiYgdGFwTGVuZ3RoID4gMCkge1xuICAgICAgLy9ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy9ldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIC8vbmV3IE5vdGljZSgnZG91YmxlIHRhcCBmaXJlZCcpO1xuICAgICAgdGhpcy5jYWxsYmFjayhldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgIH0sIDUwMCk7XG4gICAgfVxuICAgIHRoaXMubGFzdFRhcCA9IGN1cnJlbnRUaW1lO1xuICB9XG59XG5cbmNsYXNzIFByZXNzQW5kSG9sZEhhbmRsZXIge1xuICBjb25zdHJ1Y3RvcihwbHVnaW4sIGVsZW1lbnQsIGNhbGxiYWNrLCBkdXJhdGlvbiA9IDYwMCkge1xuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjsgLy8gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzIHRvIGNvbnNpZGVyIGFzIFwiaG9sZFwiXG4gICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcblxuICAgIC8vbmV3IE5vdGljZSAoJ3ByZXNzQW5kSG9sZCBjcmVhdGVkLicpXG5cbiAgICB0aGlzLnBsdWdpbi5yZWdpc3RlckRvbUV2ZW50KHRoaXMuZWxlbWVudCwgJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZVRvdWNoU3RhcnQuYmluZCh0aGlzKSwgdHJ1ZSk7XG4gICAgdGhpcy5wbHVnaW4ucmVnaXN0ZXJEb21FdmVudCh0aGlzLmVsZW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuaGFuZGxlVG91Y2hFbmQuYmluZCh0aGlzKSwgdHJ1ZSk7XG4gIH1cblxuICBoYW5kbGVUb3VjaFN0YXJ0KGV2ZW50KSB7XG4gICAgLy9ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIC8vZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgXHQvL25ldyBOb3RpY2UgKCdwcmVzc0FuZEhvbGQgZXZlbnQgZmlyZWQuJylcbiAgICAgIHRoaXMuY2FsbGJhY2soZXZlbnQpO1xuICAgICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcbiAgICB9LCB0aGlzLmR1cmF0aW9uKTtcbiAgfVxuXG4gIGhhbmRsZVRvdWNoRW5kKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgICB0aGlzLnRpbWVvdXQgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuIiwgIlxuaW1wb3J0IFRhZ0J1ZGR5IGZyb20gXCJtYWluXCI7XG5pbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuZXhwb3J0IGNsYXNzIFRCU2V0dGluZ3NUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcbiAgICBwbHVnaW46IFRhZ0J1ZGR5O1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogVGFnQnVkZHkpIHtcbiAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICB9XG4gICAgZGlzcGxheSgpOiB2b2lkIHtcbiAgICAgICAgbGV0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgLnNldE5hbWUoXCJPdmVycmlkZSBuYXRpdmUgdGFnIHNlYXJjaCBvbiBjbGlja1wiKVxuICAgICAgICAuc2V0RGVzYyhcIlRvZ2dsZSBvZmYgdG8gdXNlIGNtZCtjbGljayB0byByZW1vdmUgdGFnLlwiKVxuICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XG4gICAgICAgICAgICB0b2dnbGVcbiAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZW1vdmVPbkNsaWNrKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnJlbW92ZU9uQ2xpY2sgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAuc2V0TmFtZShcIkNvbnZlcnQgdG8gdGFnIHRleHQgd2l0aCBvcHQrY2xpY2sgKHJlbW92ZXMgIylcIilcbiAgICAgICAgLnNldERlc2MoXCJUb2dnbGUgb2ZmIHRvIHVzZSBvcHQrY2xpY2sgdG8gcGVyZm9ybSBuYXRpdmUgdGFnIHNlYXJjaC5cIilcbiAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxuICAgICAgICAgICAgdG9nZ2xlXG4gICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mub3B0VG9Db252ZXJ0KVxuICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm9wdFRvQ29udmVydCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgIC5zZXROYW1lKFwiUmVtb3ZlIGNoaWxkIHRhZ3MgZmlyc3RcIilcbiAgICAgICAgLnNldERlc2MoXCJUb2dnbGUgb2ZmIHRvIHVzZSBzaGlmdCtjbGljayB0byByZW1vdmUgY2hpbGQgdGFncyBmaXRzdC5cIilcbiAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxuICAgICAgICAgICAgdG9nZ2xlXG4gICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucmVtb3ZlQ2hpbGRUYWdzRmlyc3QpXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucmVtb3ZlQ2hpbGRUYWdzRmlyc3QgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAuc2V0TmFtZShcIk1vYmlsZSB0YWcgc2VhcmNoXCIpXG4gICAgICAgIC5zZXREZXNjKFwiVG9nZ2xlIG9uIHRvIHJlc3RvcmUgbW9iaWxlIG5hdGl2ZSB0YWcgc2VhcmNoIG9uIHRhcC4gVGFnIHJlbW92YWwgd2lsbCB0aGVuIHVzZSBwcmVzcytob2xkLlwiKVxuICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XG4gICAgICAgICAgICB0b2dnbGVcbiAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5tb2JpbGVUYWdTZWFyY2gpXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubW9iaWxlVGFnU2VhcmNoID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgLnNldE5hbWUoXCJTaG93IG1vYmlsZSBub3RpY2VzXCIpXG4gICAgICAgIC5zZXREZXNjKFwiVG9nZ2xlIG9mZiB0byBoaWRlIG5vdGljZXMgd2hlbiBlZGl0aW5nIG9yIHJlbW92aW5nIGEgdGFnLlwiKVxuICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XG4gICAgICAgICAgICB0b2dnbGVcbiAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5tb2JpbGVOb3RpY2VzKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm1vYmlsZU5vdGljZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAuc2V0TmFtZShcIkRlYnVnIG1vZGVcIilcbiAgICAgICAgLnNldERlc2MoXCJPdXRwdXQgdG8gY29uc29sZS5cIilcbiAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxuICAgICAgICAgICAgdG9nZ2xlXG4gICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVidWdNb2RlKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRlYnVnTW9kZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG59XG5cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQ0VBLHNCQUErQztBQUV4QyxJQUFNLGdCQUFOLGNBQTRCLGlDQUFpQjtBQUFBLEVBR2hELFlBQVlBLE1BQVUsUUFBa0I7QUFDcEMsVUFBTUEsTUFBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2xCO0FBQUEsRUFDQSxVQUFnQjtBQUNaLFFBQUksRUFBRSxZQUFZLElBQUk7QUFFdEIsZ0JBQVksTUFBTTtBQUVsQixRQUFJLHdCQUFRLFdBQVcsRUFDdEIsUUFBUSxxQ0FBcUMsRUFDN0MsUUFBUSw0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LE9BQU87QUFBQSxNQUMzQixHQUFHLEdBQUc7QUFBQSxJQUNSO0FBQ0EsU0FBSyxVQUFVO0FBQUEsRUFDakI7QUFDRjtBQUVBLElBQU0sc0JBQU4sTUFBMEI7QUFBQSxFQUN4QixZQUFZLFFBQVEsU0FBUyxVQUFVLFdBQVcsS0FBSztBQUNyRCxTQUFLLFNBQVM7QUFDZCxTQUFLLFVBQVU7QUFDZixTQUFLLFdBQVc7QUFDaEIsU0FBSyxXQUFXO0FBQ2hCLFNBQUssVUFBVTtBQUlmLFNBQUssT0FBTyxpQkFBaUIsS0FBSyxTQUFTLGNBQWMsS0FBSyxpQkFBaUIsS0FBSyxJQUFJLEdBQUcsSUFBSTtBQUMvRixTQUFLLE9BQU8saUJBQWlCLEtBQUssU0FBUyxZQUFZLEtBQUssZUFBZSxLQUFLLElBQUksR0FBRyxJQUFJO0FBQUEsRUFDN0Y7QUFBQSxFQUVBLGlCQUFpQixPQUFPO0FBR3RCLFNBQUssVUFBVSxXQUFXLE1BQU07QUFFOUIsV0FBSyxTQUFTLEtBQUs7QUFDbkIsV0FBSyxVQUFVO0FBQUEsSUFDakIsR0FBRyxLQUFLLFFBQVE7QUFBQSxFQUNsQjtBQUFBLEVBRUEsZUFBZSxPQUFPO0FBQ3BCLFFBQUksS0FBSyxTQUFTO0FBQ2hCLG1CQUFhLEtBQUssT0FBTztBQUN6QixXQUFLLFVBQVU7QUFBQSxJQUNqQjtBQUFBLEVBQ0Y7QUFDRjsiLAogICJuYW1lcyI6IFsiYXBwIiwgImltcG9ydF9vYnNpZGlhbiIsICJlcnJvciIsICJmaWxlUGF0aCJdCn0K
